// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã
class HeroGame {
    constructor() {
        this.heroes = [];
        this.items = [];
        this.monsters = [];
        this.maps = [];
        this.locations = [];
        
        this.currentHero = null;
        this.currentScreen = 'hero-select';
        this.currentMap = null;
        this.currentLocation = null;
        this.currentMonster = null;
        
        this.battleActive = false;
        this.battleRound = 0;
        this.battleLog = [];
        
        this.init();
    }

    async init() {
        console.log('üéÆ –ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
        await this.loadGameData();
        this.renderHeroSelect();
    }

    async loadGameData() {
        try {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥–µ—Ä–æ–µ–≤
            this.heroes = [
                {
                    id: 1,
                    name: "–í–æ–∏–Ω –°–≤–µ—Ç–∞",
                    image: "https://via.placeholder.com/300x400/336699/ffffff?text=Hero+1",
                    race: "human",
                    class: "warrior",
                    level: 1,
                    gold: 100,
                    experience: 0,
                    unlocked: true,
                    baseHealth: 100,
                    baseDamage: 20,
                    baseArmor: 10,
                    healthRegen: 100/60,
                    inventory: [],
                    equipment: { main_hand: null, chest: null }
                },
                {
                    id: 2,
                    name: "–≠–ª—å—Ñ–∏–π—Å–∫–∏–π –õ—É—á–Ω–∏–∫",
                    image: "https://via.placeholder.com/300x400/339966/ffffff?text=Hero+2",
                    race: "elf",
                    class: "archer",
                    level: 1,
                    gold: 80,
                    experience: 0,
                    unlocked: true,
                    baseHealth: 80,
                    baseDamage: 25,
                    baseArmor: 8,
                    healthRegen: 80/60,
                    inventory: [],
                    equipment: { main_hand: null, chest: null }
                },
                {
                    id: 3,
                    name: "–ì–Ω–æ–º–∏–π –ö—É–∑–Ω–µ—Ü",
                    image: "https://via.placeholder.com/300x400/996633/ffffff?text=Hero+3",
                    race: "dwarf",
                    class: "blacksmith",
                    level: 1,
                    gold: 120,
                    experience: 0,
                    unlocked: false,
                    baseHealth: 120,
                    baseDamage: 15,
                    baseArmor: 15,
                    healthRegen: 120/60,
                    inventory: [],
                    equipment: { main_hand: null, chest: null }
                }
            ];

            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –≥–µ—Ä–æ–µ–≤:', this.heroes.length);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        }
    }

    // –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø –í–´–ë–û–†–ê –ì–ï–†–û–Ø
    selectHero(heroId) {
        console.log('üñ±Ô∏è –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –≥–µ—Ä–æ—è:', heroId);
        
        const hero = this.heroes.find(h => h.id === heroId);
        if (!hero) {
            console.error('–ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê - –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–±–æ—Ä
        this.currentHero = hero;
        this.showScreen('main');
        this.renderHeroScreen();
        
        console.log('‚úÖ –ì–µ—Ä–æ–π –≤—ã–±—Ä–∞–Ω:', hero.name);
    }

    showScreen(screenName) {
        this.currentScreen = screenName;
        console.log('üñ•Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω:', screenName);
    }

    renderHeroSelect() {
        console.log('üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–µ—Ä–æ—è');
        const container = document.getElementById('app');
        
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä app –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        const heroesHTML = this.heroes.map(hero => {
            const isUnlocked = hero.unlocked === true;
            
            return `
                <div class="hero-option ${isUnlocked ? '' : 'locked'}" 
                     onclick="game.selectHero(${hero.id})">
                    <div class="hero-option-image">
                        <img src="${hero.image}" alt="${hero.name}">
                        ${!isUnlocked ? '<div class="locked-overlay">üîí</div>' : ''}
                    </div>
                    <div class="hero-option-info">
                        <div class="hero-option-header">
                            <strong>${hero.name}</strong>
                            <span class="hero-level">–£—Ä. ${hero.level}</span>
                        </div>
                        <div class="hero-option-stats">
                            <div class="stat-row">
                                <span>‚ù§Ô∏è ${hero.baseHealth}</span>
                                <span>‚öîÔ∏è ${hero.baseDamage}</span>
                                <span>üõ°Ô∏è ${hero.baseArmor}</span>
                            </div>
                            <div class="stat-row">
                                <span>üí∞ ${hero.gold}</span>
                                <span>üèπ ${hero.race}</span>
                            </div>
                        </div>
                        ${!isUnlocked ? '<small class="locked-text">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</small>' : ''}
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = `
            <div class="screen active" id="screen-hero-select">
                <h2 class="text-center">–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è</h2>
                <div class="hero-list">
                    ${heroesHTML}
                </div>
                <div style="text-align: center; margin-top: 20px; color: #888;">
                    <small>–î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å (F12)</small>
                </div>
            </div>
        `;
        
        console.log('‚úÖ –í—ã–±–æ—Ä –≥–µ—Ä–æ—è –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω');
    }

    renderHeroScreen() {
        if (!this.currentHero) return;
        
        console.log('üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ –≥–µ—Ä–æ—è:', this.currentHero.name);
        
        const container = document.getElementById('app');
        container.innerHTML = `
            <div class="screen active" id="screen-main">
                <div class="action-buttons">
                    <button class="btn-primary" onclick="game.startAdventure()">üé≤ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ</button>
                    <button class="btn-secondary" onclick="game.showInventory()">üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</button>
                    <button class="btn-secondary" onclick="game.renderHeroSelect()">üîÅ –ù–∞–∑–∞–¥ –∫ –≥–µ—Ä–æ—è–º</button>
                </div>
                
                <div style="background: rgba(0,0,0,0.8); padding: 20px; border-radius: 10px; margin: 20px; text-align: center;">
                    <h1>üéØ ${this.currentHero.name}</h1>
                    <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!</p>
                    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; margin-top: 20px;">
                        <div class="hero-stat">
                            <div>‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ</div>
                            <div class="stat-value">${this.currentHero.baseHealth}</div>
                        </div>
                        <div class="hero-stat">
                            <div>‚öîÔ∏è –£—Ä–æ–Ω</div>
                            <div class="stat-value">${this.currentHero.baseDamage}</div>
                        </div>
                        <div class="hero-stat">
                            <div>üõ°Ô∏è –ë—Ä–æ–Ω—è</div>
                            <div class="stat-value">${this.currentHero.baseArmor}</div>
                        </div>
                    </div>
                    <div style="margin-top: 20px;">
                        <p>üí∞ –ó–æ–ª–æ—Ç–æ: ${this.currentHero.gold}</p>
                        <p>üìä –£—Ä–æ–≤–µ–Ω—å: ${this.currentHero.level}</p>
                    </div>
                </div>
                
                <div class="battle-log" id="battle-log">
                    <div class="log-entry">‚úÖ –ì–µ—Ä–æ–π "${this.currentHero.name}" —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω!</div>
                </div>
            </div>
        `;
    }

    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    startAdventure() {
        this.addToLog('üöÄ –ù–∞—á–∞—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!');
    }

    showInventory() {
        this.addToLog('üéí –û—Ç–∫—Ä—ã—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!');
    }

    addToLog(message) {
        const log = document.getElementById('battle-log');
        if (log) {
            const entry = document.createElement('div');
            entry.className = 'log-entry';
            entry.textContent = message;
            log.appendChild(entry);
            log.scrollTop = log.scrollHeight;
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
console.log('üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...');

let game;

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        console.log('‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω');
        game = new HeroGame();
        window.game = game;
    });
} else {
    console.log('‚úÖ DOM —É–∂–µ –≥–æ—Ç–æ–≤');
    game = new HeroGame();
    window.game = game;
}

// –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.debugGame = function() {
    if (window.game) {
        console.log('=== –î–ï–ë–ê–ì –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===');
        console.log('–¢–µ–∫—É—â–∏–π –≥–µ—Ä–æ–π:', game.currentHero?.name || '–ù–µ—Ç');
        console.log('–¢–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω:', game.currentScreen);
        console.log('–í—Å–µ–≥–æ –≥–µ—Ä–æ–µ–≤:', game.heroes.length);
    }
};

window.unlockAll = function() {
    if (window.game) {
        game.heroes.forEach(hero => hero.unlocked = true);
        game.renderHeroSelect();
        console.log('üîì –í—Å–µ –≥–µ—Ä–æ–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
    }
};
