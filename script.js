// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã
class HeroGame {
    constructor() {
        this.heroes = [];
        this.items = [];
        this.monsters = [];
        this.locations = [];
        this.movementStyles = [];
        this.merchants = [];
        this.showReward = false;
        this.lastReward = 0;
        this.currentHero = null;
        this.currentScreen = 'hero-select';
        this.currentLocation = null;
        this.currentMonster = null;
        this.selectedMovement = null;
        this.merchantsUnlocked = 1;
        
        this.init();
    }

     async init() {
        await this.loadGameData();
        this.loadSave();
        this.renderHeroSelect();
    }

    // –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON
    async loadJSON(filePath) {
        try {
            const response = await fetch(filePath);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return await response.json();
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${filePath}:`, error);
            return null;
        }
    }

async loadGameData() {
    try {
        const [heroes, enemies, items, locations, movement] = await Promise.all([
            this.loadJSON('data/heroes.json'),
            this.loadJSON('data/enemies.json'),
            this.loadJSON('data/items.json'),
            this.loadJSON('data/locations.json'),
            this.loadJSON('data/movement.json')
        ]);

        // –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.heroes = heroes || this.getDefaultHeroes();
        this.monsters = enemies || this.getDefaultEnemies();
        this.items = items || this.getDefaultItems();
        this.locations = locations || this.getDefaultLocations();
        this.movementStyles = movement || this.getDefaultMovement();

        console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
            heroes: this.heroes,
            monsters: this.monsters,
            items: this.items,
            locations: this.locations,
            movementStyles: this.movementStyles
        });

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        this.heroes = this.getDefaultHeroes();
        this.monsters = this.getDefaultEnemies();
        this.items = this.getDefaultItems();
        this.locations = this.getDefaultLocations();
        this.movementStyles = this.getDefaultMovement();
    }
}

    getDefaultHeroes() {
        return [
            {
                id: 1,
                name: "–†–µ–∑–µ—Ä–≤–Ω—ã–π –≥–µ—Ä–æ–π",
                health: 100,
                maxHealth: 100,
                attack: 10,
                defense: 5,
                speed: 5,
                level: 1,
                experience: 0,
                skills: ["–ë–∞–∑–æ–≤—ã–π —É–¥–∞—Ä"]
            }
        ];
    }

    getDefaultEnemies() {
        return [
            {
                id: 1,
                name: "–°–ª–∞–±—ã–π –º–æ–Ω—Å—Ç—Ä",
                health: 30,
                maxHealth: 30,
                attack: 5,
                defense: 2,
                speed: 3,
                experience: 5
            }
        ];
    }

    getDefaultItems() {
        return [
            {
                id: 1,
                name: "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è",
                type: "potion",
                value: 20,
                price: 25
            }
        ];
    }

    // –°–±—Ä–æ—Å –≥–µ—Ä–æ—è –∫ –±–∞–∑–æ–≤—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    resetHero() {
        if (!this.currentHero) return;
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        const confirmed = confirm("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≥–µ—Ä–æ—è?\n\n–í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.");
        
        if (!confirmed) {
            this.addToLog("‚ùå –°–±—Ä–æ—Å –≥–µ—Ä–æ—è –æ—Ç–º–µ–Ω–µ–Ω");
            return;
        }
        
        // –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—ã/–∫–ª–∞—Å—Å–∞/—Å–∞–≥–∏
        const baseConfig = {
            race: "human",
            class: "warrior", 
            saga: "golden_egg",
            baseHealth: 100,
            baseDamage: 20,
            baseArmor: 10,
            gold: 500,
            level: 1,
            experience: 0,
            inventory: [],
            equipment: {
                main_hand: null,
                chest: null
            }
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const heroName = this.currentHero.name;
        const heroImage = this.currentHero.image;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        Object.assign(this.currentHero, baseConfig);
        this.currentHero.name = heroName;
        this.currentHero.image = heroImage;
        
        this.addToLog("üîÑ –ì–µ—Ä–æ–π —Å–±—Ä–æ—à–µ–Ω –∫ –±–∞–∑–æ–≤—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º");
        this.addToLog("üéØ –¢–µ–ø–µ—Ä—å –≤—ã: –ß–µ–ª–æ–≤–µ–∫-–í–æ–∏–Ω (–ó–æ–ª–æ—Ç–æ–µ –Ø–π—Ü–æ)");
        this.saveGame();
        this.renderHeroScreen();
    }

    // –ë–æ–Ω—É—Å—ã —Ä–∞—Å, –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏ —Å–∞–≥
    getBonuses() {
        return {
            races: {
                elf: { 
                    bonus: {type: "escape_bonus", value: 1}, 
                    name: "–≠–ª—å—Ñ", 
                    description: "–ü—Ä–æ–≤–æ—Ä–Ω—ã–π –∏ –Ω–µ—É–ª–æ–≤–∏–º—ã–π" 
                },
                dwarf: { 
                    bonus: {type: "health_mult", value: 0.3}, 
                    name: "–ì–Ω–æ–º", 
                    description: "–í—ã–Ω–æ—Å–ª–∏–≤—ã–π –∏ –∫—Ä–µ–ø–∫–∏–π" 
                },
                halfling: { 
                    bonus: {type: "stealth_bonus", value: 1}, 
                    name: "–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫", 
                    description: "–ú–∞–ª–µ–Ω—å–∫–∏–π –∏ –Ω–µ–∑–∞–º–µ—Ç–Ω—ã–π" 
                },
                fairy: { 
                    bonus: {type: "luck_bonus", value: 1}, 
                    name: "–§–µ—è", 
                    description: "–í–µ–∑–µ–Ω–∏–µ –∏ –º–∞–≥–∏—è" 
                },
                laitar: { 
                    bonus: {type: "survival_bonus", value: 1}, 
                    name: "–õ–∞–π—Ç–∞—Ä", 
                    description: "–ú–∞—Å—Ç–µ—Ä –≤—ã–∂–∏–≤–∞–Ω–∏—è" 
                },
                ork: { 
                    bonus: {type: "damage_mult", value: 0.2}, 
                    name: "–û—Ä–∫", 
                    description: "–°–∏–ª—å–Ω—ã–π –∏ —Å–≤–∏—Ä–µ–ø—ã–π" 
                },
                human: { 
                    bonus: {type: "gold_mult", value: 0.3}, 
                    name: "–ß–µ–ª–æ–≤–µ–∫", 
                    description: "–ü—Ä–µ–¥–ø—Ä–∏–∏–º—á–∏–≤—ã–π –∏ –±–æ–≥–∞—Ç—ã–π" 
                },
                dragon: { 
                    bonus: {type: "armor_mult", value: 0.15}, 
                    name: "–î—Ä–∞–∫–æ–Ω", 
                    description: "–ú–æ–≥—É—á–∏–π –∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π" 
                }
            },
            classes: {
                archer: { 
                    bonus: {type: "damage_mult", value: 0.2}, 
                    name: "–õ—É—á–Ω–∏–∫", 
                    description: "–ú–∞—Å—Ç–µ—Ä –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è" 
                },
                warrior: { 
                    bonus: {type: "damage_mult", value: 0.2}, 
                    name: "–í–æ–∏–Ω", 
                    description: "–°–∏–ª—å–Ω—ã–π –∏ –æ—Ç–≤–∞–∂–Ω—ã–π" 
                },
                thief: { 
                    bonus: {type: "stealth_bonus", value: 1}, 
                    name: "–í–æ—Ä", 
                    description: "–¢–∏—Ö–∏–π –∏ –Ω–µ–∑–∞–º–µ—Ç–Ω—ã–π" 
                },
                merchant: { 
                    bonus: {type: "gold_mult", value: 0.3}, 
                    name: "–¢–æ—Ä–≥–æ–≤–µ—Ü", 
                    description: "–ò—Å–∫—É—Å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü" 
                },
                fighter: { 
                    bonus: {type: "luck_bonus", value: 1}, 
                    name: "–ö—É–ª–∞—á–Ω—ã–π –±–æ–µ—Ü", 
                    description: "–£–¥–∞—á–ª–∏–≤—ã–π –±–æ–µ—Ü" 
                },
                healer: { 
                    bonus: {type: "health_mult", value: 0.3}, 
                    name: "–ó–Ω–∞—Ö–∞—Ä—å", 
                    description: "–ú–∞—Å—Ç–µ—Ä –∏—Å—Ü–µ–ª–µ–Ω–∏—è" 
                },
                sorcerer: { 
                    bonus: {type: "escape_bonus", value: 1}, 
                    name: "–ö–æ–ª–¥—É–Ω", 
                    description: "–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞" 
                },
                death_mage: { 
                    bonus: {type: "stealth_bonus", value: 1}, 
                    name: "–í–æ–ª—Ö–≤ —Å–º–µ—Ä—Ç–∏", 
                    description: "–¢—ë–º–Ω—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞" 
                },
                hunter: { 
                    bonus: {type: "survival_bonus", value: 1}, 
                    name: "–û—Ö–æ—Ç–Ω–∏–∫", 
                    description: "–°–ª–µ–¥–æ–ø—ã—Ç –∏ –≤—ã–∂–∏–≤–∞–ª—å—â–∏–∫" 
                },
                bounty_hunter: { 
                    bonus: {type: "damage_mult", value: 0.1}, 
                    name: "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –≥–æ–ª–æ–≤–∞–º–∏", 
                    description: "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é" 
                },
                gladiator: { 
                    bonus: {type: "damage_mult", value: 0.2}, 
                    name: "–ì–ª–∞–¥–∏–∞—Ç–æ—Ä", 
                    description: "–ú–∞—Å—Ç–µ—Ä –ª—é–±–æ–≥–æ –æ—Ä—É–∂–∏—è" 
                },
                blacksmith: { 
                    bonus: {type: "armor_mult", value: 0.15}, 
                    name: "–ö—É–∑–Ω–µ—Ü", 
                    description: "–ú–∞—Å—Ç–µ—Ä –±—Ä–æ–Ω–∏" 
                },
                antiquarian: { 
                    bonus: {type: "gold_mult", value: 0.3}, 
                    name: "–ò—Å–∫–∞—Ç–µ–ª—å –¥—Ä–µ–≤–Ω–æ—Å—Ç–µ–π", 
                    description: "–ó–Ω–∞—Ç–æ–∫ —Å–æ–∫—Ä–æ–≤–∏—â" 
                }
            },
            sagas: {
                golden_egg: { 
                    bonus: {type: "health_mult", value: 0.3}, 
                    name: "–ó–æ–ª–æ—Ç–æ–µ –Ø–π—Ü–æ", 
                    description: "–û–±–ª–∞–¥–∞—Ç–µ–ª—å –¥—Ä–µ–≤–Ω–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞" 
                },
                vulkanor: { 
                    bonus: {type: "damage_mult", value: 0.2}, 
                    name: "–í—É–ª–∫–∞–Ω–æ—Ä", 
                    description: "–ü—Ä–æ—à–µ–¥—à–∏–π –æ–≥–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è" 
                },
                well: { 
                    bonus: {type: "gold_mult", value: 0.3}, 
                    name: "–ö–æ–ª–æ–¥–µ—Ü", 
                    description: "–ù–∞—à–µ–¥—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –±–æ–≥–∞—Ç—Å—Ç–≤–∞" 
                },
                pets: { 
                    bonus: {type: "luck_bonus", value: 1}, 
                    name: "–ü–∏—Ç–æ–º—Ü—ã", 
                    description: "–í–µ—Ä–Ω—ã–µ —Å–ø—É—Ç–Ω–∏–∫–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç —É–¥–∞—á—É" 
                },
                following_sun: { 
                    bonus: {type: "survival_bonus", value: 1}, 
                    name: "–í—Å–ª–µ–¥ –∑–∞ —Å–æ–ª–Ω—Ü–µ–º", 
                    description: "–ü—Ä–æ—à–µ–¥—à–∏–π —á–µ—Ä–µ–∑ –ø—É—Å—Ç—ã–Ω–∏" 
                },
                vampire_crown: { 
                    bonus: {type: "stealth_bonus", value: 1}, 
                    name: "–ö–æ—Ä–æ–Ω–∞ –∫–æ—Ä–æ–ª—è –≤–∞–º–ø–∏—Ä–æ–≤", 
                    description: "–ù–æ—Å–∏—Ç–µ–ª—å —Ç—ë–º–Ω–æ–π –∫–æ—Ä–æ–Ω—ã" 
                },
                tiger_eye: { 
                    bonus: {type: "armor_mult", value: 0.15}, 
                    name: "–ñ–µ–ª—Ç—ã–π –ì–ª–∞–∑ —Ç–∏–≥—Ä–∞", 
                    description: "–û–±–ª–∞–¥–∞—Ç–µ–ª—å –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–∞—â–∏—Ç—ã" 
                },
                sky_phenomena: { 
                    bonus: {type: "escape_bonus", value: 1}, 
                    name: "–ù–µ–±–µ—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è", 
                    description: "–°–≤–∏–¥–µ—Ç–µ–ª—å –Ω–µ–±–µ—Å–Ω—ã—Ö —á—É–¥–µ—Å" 
                }
            }
        };
    }

    // –†–∞—Å—á—ë—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–µ—Ä–æ—è
    calculateHeroStats(hero) {
        const bonuses = this.getBonuses();
        
        // –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å—ã
        const raceBonus = bonuses.races[hero.race]?.bonus || {type: "none", value: 0};
        const classBonus = bonuses.classes[hero.class]?.bonus || {type: "none", value: 0};
        const sagaBonus = bonuses.sagas[hero.saga]?.bonus || {type: "none", value: 0};
        
        // –ë–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        let weaponBonus = {type: "none", value: 0};
        let armorBonus = {type: "none", value: 0};
        
        if (hero.equipment.main_hand) {
            const weapon = this.items.find(item => item.id === hero.equipment.main_hand);
            weaponBonus = weapon?.bonus || {type: "none", value: 0};
        }
        
        if (hero.equipment.chest) {
            const armor = this.items.find(item => item.id === hero.equipment.chest);
            armorBonus = armor?.bonus || {type: "none", value: 0};
        }

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±–æ–Ω—É—Å—ã
        const allBonuses = [raceBonus, classBonus, sagaBonus, weaponBonus, armorBonus];

        // –ë–∞–∑–∞
        let health = hero.baseHealth;
        let damage = hero.baseDamage;
        let armor = hero.baseArmor;

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        if (hero.equipment.main_hand) {
            const weapon = this.items.find(item => item.id === hero.equipment.main_hand);
            damage += weapon?.fixed_damage || 0;
        }
        
        if (hero.equipment.chest) {
            const armorItem = this.items.find(item => item.id === hero.equipment.chest);
            armor += armorItem?.fixed_armor || 0;
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏
        allBonuses.forEach(bonus => {
            switch(bonus.type) {
                case 'health_mult':
                    health *= (1 + bonus.value);
                    break;
                case 'damage_mult':
                    damage *= (1 + bonus.value);
                    break;
                case 'armor_mult':
                    armor *= (1 + bonus.value);
                    break;
            }
        });

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ—á—å
        const power = Math.round((health / 10) + (damage * 1.5) + (armor * 2));

        // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–≤—ã–∫–∏
        const skills = {
            escape: 0,
            stealth: 0,
            luck: 0,
            survival: 0,
            wealth: 0
        };

        allBonuses.forEach(bonus => {
            if (bonus.type.includes('_bonus')) {
                const skill = bonus.type.replace('_bonus', '');
                if (skills.hasOwnProperty(skill)) {
                    skills[skill] += bonus.value;
                }
            }
        });

        return {
            health: Math.round(health),
            damage: Math.round(damage),
            armor: Math.round(armor),
            power: power,
            skills: skills,
            bonuses: {
                race: raceBonus,
                class: classBonus,
                saga: sagaBonus,
                weapon: weaponBonus,
                armor: armorBonus
            }
        };
    }

    // –†–µ–Ω–¥–µ—Ä –≤—ã–±–æ—Ä–∞ –≥–µ—Ä–æ—è
    renderHeroSelect() {
        const container = document.getElementById('app');
        container.innerHTML = `
            <div class="screen active" id="screen-hero-select">
                <h2 class="text-center">–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è</h2>
                <div class="hero-list">
                    ${this.heroes.map(hero => `
                        <div class="hero-option" onclick="game.selectHero(${hero.id})">
                            <div class="hero-option-image">
                                <img src="${hero.image}" alt="${hero.name}">
                            </div>
                            <div class="hero-option-info">
                                <strong>${hero.name}</strong>
                                <div>–£—Ä. ${hero.level} | üí∞ ${hero.gold}</div>
                                <small>${this.getBonuses().races[hero.race]?.name} - ${this.getBonuses().classes[hero.class]?.name}</small>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }

    // –í—ã–±–æ—Ä –≥–µ—Ä–æ—è
    selectHero(heroId) {
        this.currentHero = this.heroes.find(h => h.id === heroId);
        this.showScreen('main');
        this.renderHeroScreen();
        this.saveGame();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω
    showScreen(screenName) {
        this.currentScreen = screenName;
    }

   // –†–µ–Ω–¥–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –≥–µ—Ä–æ—è
renderHeroScreen() {
    if (!this.currentHero) return;

    const stats = this.calculateHeroStats(this.currentHero);
    const bonuses = this.getBonuses();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ
    const weapon = this.currentHero.equipment.main_hand ? 
        this.items.find(item => item.id === this.currentHero.equipment.main_hand) : null;
    const armor = this.currentHero.equipment.chest ? 
        this.items.find(item => item.id === this.currentHero.equipment.chest) : null;

    const container = document.getElementById('app');
    container.innerHTML = `
        <div class="screen active" id="screen-main">
            <!-- –ù–æ–≤—ã–π –º–∞–∫–µ—Ç —Å —Ç—Ä–µ–º—è –∫–æ–ª–æ–Ω–∫–∞–º–∏ -->
            <div class="hero-layout">
                <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ì–µ—Ä–æ–π -->
                <div class="hero-column">
                    <div class="column-title">üéØ –í–ê–® –ì–ï–†–û–ô</div>
                    <div class="hero-image">
                        <img src="${this.currentHero.image}" alt="${this.currentHero.name}">
                    </div>
                    <div class="hero-info">
                        <h2>${this.currentHero.name}</h2>
                        <div class="hero-stats">
                            <span>–£—Ä. ${this.currentHero.level}</span>
                            <span>üí∞ ${this.currentHero.gold}</span>
                            <span>‚ö° ${this.currentHero.experience}/100</span>
                        </div>
                    </div>
                </div>

                <!-- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –õ–æ–∫–∞—Ü–∏—è -->
                <div class="location-column">
                    <div class="column-title">üìç –õ–û–ö–ê–¶–ò–Ø</div>
                    ${this.renderLocationColumn()}
                </div>

                <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ú–æ–Ω—Å—Ç—Ä/–ù–∞–≥—Ä–∞–¥–∞ -->
                <div class="monster-column">
                    <div class="column-title">üé≠ –í–†–ê–ì / üéÅ –ù–ê–ì–†–ê–î–ê</div>
                    ${this.renderMonsterRewardColumn()}
                </div>
            </div>

            <!-- –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π -->
            <!-- –°–µ–∫—Ü–∏—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ -->
            <div class="equipment-section">
                <div class="equipment-slot ${weapon ? 'equipped' : 'empty'}" onclick="game.showInventory()">
                    <div class="equipment-icon">
                        ${weapon ? 
                            `<img src="${weapon.image}" alt="${weapon.name}">` : 
                            ''
                        }
                    </div>
                    <div>
                        <strong>‚öîÔ∏è –û—Ä—É–∂–∏–µ</strong>
                        <div>${weapon ? weapon.name : '–ü—É—Å—Ç–æ'}</div>
                        ${weapon ? `<small>${this.formatBonus(weapon.bonus)}</small>` : ''}
                    </div>
                </div>
                
                <div class="equipment-slot ${armor ? 'equipped' : 'empty'}" onclick="game.showInventory()">
                    <div class="equipment-icon">
                        ${armor ? 
                            `<img src="${armor.image}" alt="${armor.name}">` : 
                            ''
                        }
                    </div>
                    <div>
                        <strong>üõ°Ô∏è –ë—Ä–æ–Ω—è</strong>
                        <div>${armor ? armor.name : '–ü—É—Å—Ç–æ'}</div>
                        ${armor ? `<small>${this.formatBonus(armor.bonus)}</small>` : ''}
                    </div>
                </div>
            </div>

            <!-- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å... -->
            <!-- ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... -->
        </div>
    `;
}
// –†–µ–Ω–¥–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
renderLocationColumn() {
    if (this.currentLocation) {
        return `
            <div class="location-info">
                <div class="location-image-large">
                    <img src="${this.currentLocation.image}" alt="${this.currentLocation.name}">
                </div>
                <h4>${this.currentLocation.name}</h4>
                <p>${this.currentLocation.description}</p>
                <div class="location-effects">
                    ${this.currentLocation.movementBonus ? `<div>üìè –î–≤–∏–∂–µ–Ω–∏–µ: +${this.currentLocation.movementBonus}</div>` : ''}
                    ${this.currentLocation.movementPenalty ? `<div>üìè –î–≤–∏–∂–µ–Ω–∏–µ: ${this.currentLocation.movementPenalty}</div>` : ''}
                    ${this.currentLocation.stealthBonus ? `<div>üëª –°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å: +${this.currentLocation.stealthBonus}</div>` : ''}
                    ${this.currentLocation.stealthPenalty ? `<div>üëª –°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å: ${this.currentLocation.stealthPenalty}</div>` : ''}
                    ${this.currentLocation.escapeBonus ? `<div>üèÉ –ü–æ–±–µ–≥: +${this.currentLocation.escapeBonus}</div>` : ''}
                    ${this.currentLocation.escapePenalty ? `<div>üèÉ –ü–æ–±–µ–≥: ${this.currentLocation.escapePenalty}</div>` : ''}
                </div>
                ${this.currentLocation.deathRisk ? `<div class="risk-badge">‚ò†Ô∏è –®–∞–Ω—Å —Å–º–µ—Ä—Ç–∏: 1/${this.currentLocation.deathRisk}</div>` : ''}
            </div>
        `;
    } else {
        return `
            <div class="location-info">
                <div class="location-image-large">
                    <div style="text-align: center; padding: 40px; color: rgba(255,255,255,0.5);">
                        <div style="font-size: 3em; margin-bottom: 10px;">üåç</div>
                        <div>–ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫ –ª–æ–∫–∞—Ü–∏–∏</div>
                    </div>
                </div>
            </div>
        `;
    }
}

// –†–µ–Ω–¥–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞/–Ω–∞–≥—Ä–∞–¥—ã
renderMonsterRewardColumn() {
    if (this.showReward) {
        return this.renderRewardDisplay();
    } else if (this.currentMonster) {
        return this.renderMonsterDisplay();
    } else {
        return `
            <div class="monster-info">
                <div class="monster-image-large">
                    <div style="text-align: center; padding: 40px; color: rgba(255,255,255,0.5);">
                        <div style="font-size: 3em; margin-bottom: 10px;">‚öîÔ∏è</div>
                        <div>–í—Å—Ç—Ä–µ—Ç—å—Ç–µ –º–æ–Ω—Å—Ç—Ä–∞</div>
                    </div>
                </div>
            </div>
        `;
    }
}

// –†–µ–Ω–¥–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã
renderRewardDisplay() {
    return `
        <div class="reward-info">
            <div class="reward-image">
                üí∞
            </div>
            <div style="text-align: center; margin-top: 10px;">
                <h4>üéâ –ü–û–ë–ï–î–ê!</h4>
                <p>–ü–æ–ª—É—á–µ–Ω–æ: ${this.lastReward} –∑–æ–ª–æ—Ç–∞</p>
                <button class="btn-primary" onclick="game.hideReward()">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
            </div>
        </div>
    `;
}

// –†–µ–Ω–¥–µ—Ä –º–æ–Ω—Å—Ç—Ä–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
renderMonsterDisplay() {
    if (!this.currentMonster) return '';
    
    const stats = this.calculateHeroStats(this.currentHero);
    const powerComparison = stats.power >= this.currentMonster.power ? '‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û' : '‚ö†Ô∏è –†–ò–°–ö';

    return `
        <div class="monster-info">
            <div class="monster-image-large">
                <img src="${this.currentMonster.image}" alt="${this.currentMonster.name}">
            </div>
            <h4>${this.currentMonster.name}</h4>
            <p>${this.currentMonster.description}</p>
            
            <div class="stats-grid" style="grid-template-columns: 1fr 1fr;">
                <div class="stat-card">
                    <div>‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ</div>
                    <div class="stat-value">${this.currentMonster.health}</div>
                </div>
                <div class="stat-card">
                    <div>‚öîÔ∏è –£—Ä–æ–Ω</div>
                    <div class="stat-value">${this.currentMonster.damage}</div>
                </div>
                <div class="stat-card">
                    <div>üõ°Ô∏è –ë—Ä–æ–Ω—è</div>
                    <div class="stat-value">${this.currentMonster.armor}</div>
                </div>
                <div class="stat-card">
                    <div>üåü –ú–æ—â—å</div>
                    <div class="stat-value">${this.currentMonster.power}</div>
                </div>
            </div>
            
            <div style="text-align: center; margin: 10px 0;">
                <p><strong>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:</strong> ${powerComparison}</p>
                <p>üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${this.currentMonster.reward} –∑–æ–ª–æ—Ç–∞</p>
            </div>
        </div>
    `;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É
showReward(amount) {
    this.showReward = true;
    this.lastReward = amount;
    this.renderHeroScreen();
}

// –°–∫—Ä—ã—Ç—å –Ω–∞–≥—Ä–∞–¥—É
hideReward() {
    this.showReward = false;
    this.lastReward = 0;
    this.renderHeroScreen();
}
    // –û–∫–Ω–æ –ª–æ–∫–∞—Ü–∏–∏/–º–æ–Ω—Å—Ç—Ä–∞
    renderLocationMonsterContainer() {
        if (this.currentMonster) {
            return this.renderMonsterDisplay();
        } else if (this.currentLocation) {
            return this.renderLocationDisplay();
        } else {
            return `
                <div class="location-info">
                    <div class="location-image-placeholder">
                        <div style="text-align: center; padding: 40px; color: rgba(255,255,255,0.5);">
                            <div style="font-size: 3em; margin-bottom: 10px;">üåç</div>
                            <div>–ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫ –ª–æ–∫–∞—Ü–∏–∏ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ</div>
                        </div>
                    </div>
                </div>
            `;
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
    renderLocationDisplay() {
        if (!this.currentLocation) return '';
        
        return `
            <div class="location-info">
                <h3>üìç ${this.currentLocation.name}</h3>
                <div class="location-image-large">
                    <img src="${this.currentLocation.image}" alt="${this.currentLocation.name}" style="width: 100%; max-height: 200px; object-fit: cover; border-radius: 10px; margin-bottom: 10px;">
                </div>
                <p>${this.currentLocation.description}</p>
                <div class="location-effects">
                    ${this.currentLocation.movementBonus ? `<div>üìè –î–≤–∏–∂–µ–Ω–∏–µ: +${this.currentLocation.movementBonus}</div>` : ''}
                    ${this.currentLocation.movementPenalty ? `<div>üìè –î–≤–∏–∂–µ–Ω–∏–µ: ${this.currentLocation.movementPenalty}</div>` : ''}
                    ${this.currentLocation.stealthBonus ? `<div>üëª –°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å: +${this.currentLocation.stealthBonus}</div>` : ''}
                    ${this.currentLocation.stealthPenalty ? `<div>üëª –°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å: ${this.currentLocation.stealthPenalty}</div>` : ''}
                    ${this.currentLocation.escapeBonus ? `<div>üèÉ –ü–æ–±–µ–≥: +${this.currentLocation.escapeBonus}</div>` : ''}
                    ${this.currentLocation.escapePenalty ? `<div>üèÉ –ü–æ–±–µ–≥: ${this.currentLocation.escapePenalty}</div>` : ''}
                </div>
                <div class="location-risks">
                    ${this.currentLocation.deathRisk ? `<span class="risk-badge">‚ò†Ô∏è –®–∞–Ω—Å —Å–º–µ—Ä—Ç–∏: 1/${this.currentLocation.deathRisk}</span>` : ''}
                </div>
            </div>
        `;
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–∞
    renderMonsterDisplay() {
        if (!this.currentMonster) return '';
        
        const stats = this.calculateHeroStats(this.currentHero);
        const powerComparison = stats.power >= this.currentMonster.power ? '‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û' : '‚ö†Ô∏è –†–ò–°–ö';

        return `
            <div class="location-info">
                <h3>üé≠ ${this.currentMonster.name}</h3>
                <div class="monster-image-large">
                    <img src="${this.currentMonster.image}" alt="${this.currentMonster.name}" style="width: 100%; max-height: 200px; object-fit: cover; border-radius: 10px; margin-bottom: 10px;">
                </div>
                <p>${this.currentMonster.description}</p>
                
                <div class="stats-grid">
                    <div class="stat-card">
                        <div>‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ</div>
                        <div class="stat-value">${this.currentMonster.health}</div>
                    </div>
                    <div class="stat-card">
                        <div>‚öîÔ∏è –£—Ä–æ–Ω</div>
                        <div class="stat-value">${this.currentMonster.damage}</div>
                    </div>
                    <div class="stat-card">
                        <div>üõ°Ô∏è –ë—Ä–æ–Ω—è</div>
                        <div class="stat-value">${this.currentMonster.armor}</div>
                    </div>
                    <div class="stat-card">
                        <div>üåü –ú–æ—â—å</div>
                        <div class="stat-value">${this.currentMonster.power}</div>
                    </div>
                </div>
                
                <div style="text-align: center; margin: 15px 0;">
                    <p><strong>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:</strong> ${powerComparison}</p>
                    <p>üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${this.currentMonster.reward} –∑–æ–ª–æ—Ç–∞</p>
                    <p>üèÉ –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–±–µ–≥–∞: ${this.currentMonster.escapeDifficulty}+</p>
                </div>

                ${this.selectedMovement ? this.renderCalculationsPanel() : ''}
            </div>
        `;
    }

    // –ü–∞–Ω–µ–ª—å —Ä–∞—Å—á—ë—Ç–æ–≤
    renderCalculationsPanel() {
        if (!this.currentMonster || !this.selectedMovement) return '';
        
        const stats = this.calculateHeroStats(this.currentHero);
        const movement = this.movementStyles.find(s => s.id === this.selectedMovement);
        
        // –†–∞—Å—á—ë—Ç –¥–∞–ª—å–Ω–æ—Å—Ç–∏
        let movementRange = typeof movement.movement === 'string' ? movement.movement : movement.movement;
        if (this.currentLocation.movementBonus) {
            movementRange = this.calculateMovementRange(movementRange, this.currentLocation.movementBonus);
        }
        if (this.currentLocation.movementPenalty && !movement.ignoresPenalties) {
            movementRange = this.calculateMovementRange(movementRange, this.currentLocation.movementPenalty);
        }

        // –†–∞—Å—á—ë—Ç —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏
        let stealthChance = stats.skills.stealth;
        if (movement.stealthBonus) stealthChance += movement.stealthBonus;
        if (movement.stealthPenalty) stealthChance += movement.stealthPenalty;
        if (this.currentLocation.stealthBonus) stealthChance += this.currentLocation.stealthBonus;
        if (this.currentLocation.stealthPenalty) stealthChance += this.currentLocation.stealthPenalty;

        // –†–∞—Å—á—ë—Ç –ø–æ–±–µ–≥–∞
        let escapeChance = stats.skills.escape;
        if (movement.escapeBonus) escapeChance += movement.escapeBonus;
        if (movement.escapePenalty) escapeChance += movement.escapePenalty;
        if (this.currentLocation.escapeBonus) escapeChance += this.currentLocation.escapeBonus;
        if (this.currentLocation.escapePenalty) escapeChance += this.currentLocation.escapePenalty;

        return `
            <div class="calculations-panel">
                <h3>üìä –†–∞—Å—á—ë—Ç—ã –¥–ª—è ${this.currentMonster.name}:</h3>
                <div class="calculation-row">
                    <span>üìè –î–∞–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–∞:</span>
                    <span class="calculation-value">${movementRange} –∫–ª–µ—Ç–æ–∫</span>
                </div>
                <div class="calculation-row">
                    <span>üëª –®–∞–Ω—Å —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏:</span>
                    <span class="calculation-value">${this.calculateSuccessChance(stealthChance, 3)}%</span>
                </div>
                <div class="calculation-row">
                    <span>üèÉ –®–∞–Ω—Å –ø–æ–±–µ–≥–∞:</span>
                    <span class="calculation-value">${this.calculateSuccessChance(escapeChance, this.currentMonster.escapeDifficulty)}%</span>
                </div>
                <div class="calculation-row">
                    <span>‚öîÔ∏è –®–∞–Ω—Å –ø–æ–±–µ–¥—ã:</span>
                    <span class="calculation-value ${stats.power >= this.currentMonster.power ? 'power-advantage' : 'power-risk'}">
                        ${stats.power >= this.currentMonster.power ? '–í—ã—Å–æ–∫–∏–π' : '–ù–∏–∑–∫–∏–π'}
                    </span>
                </div>
            </div>
        `;
    }

    // –†–∞—Å—á—ë—Ç –¥–∞–ª—å–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞
    calculateMovementRange(base, modifier) {
        if (typeof base === 'string') {
            // –î–ª—è dice notation —Ç–∏–ø–∞ "1d4"
            const [count, dice] = base.split('d').map(Number);
            const min = Math.max(1, count + modifier);
            const max = dice + modifier;
            return `${min}-${max}`;
        } else {
            return Math.max(1, base + modifier);
        }
    }

    // –†–∞—Å—á—ë—Ç —à–∞–Ω—Å–∞ —É—Å–ø–µ—Ö–∞
    calculateSuccessChance(bonusDice, targetNumber) {
        // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞: –∫–∞–∂–¥—ã–π d6 –¥–∞—ë—Ç ~16.7% —à–∞–Ω—Å –Ω–∞ —É—Å–ø–µ—Ö
        const baseChance = (7 - targetNumber) * 16.7;
        const bonusChance = bonusDice * 16.7;
        return Math.min(95, Math.max(5, Math.round(baseChance + bonusChance)));
    }

    // –ë—Ä–æ—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–∏
    rollLocation() {
        const roll = Math.floor(Math.random() * this.locations.length);
        this.currentLocation = this.locations[roll];
        this.selectedMovement = null;
        this.currentMonster = null;
        
        this.addToLog(`üé≤ –ë—Ä–æ—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–∏: ${this.currentLocation.name}`);
        this.addToLog(`üìç ${this.currentLocation.description}`);
        if (this.currentLocation.deathRisk) {
            this.addToLog(`‚ö†Ô∏è –û–ø–∞—Å–Ω–æ—Å—Ç—å: —à–∞–Ω—Å —Å–º–µ—Ä—Ç–∏ 1/${this.currentLocation.deathRisk}`);
        }
        
        this.renderHeroScreen();
        this.showMovementSelection();
    }

    // –í—ã–±–æ—Ä —Å—Ç–∏–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
    showMovementSelection() {
        const container = document.getElementById('app');
        const movementHTML = this.movementStyles.map(style => `
            <div class="hero-option" onclick="game.selectMovement('${style.id}')">
                <strong>${style.name}</strong>
                <div>${style.description}</div>
                <small>–î–≤–∏–∂–µ–Ω–∏–µ: ${typeof style.movement === 'string' ? style.movement : style.movement} –∫–ª–µ—Ç–∫–∏</small>
            </div>
        `).join('');

        container.innerHTML += `
            <div class="screen active" id="screen-movement">
                <h3 class="text-center">üö∂ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–≤–∏–∂–µ–Ω–∏—è</h3>
                <div class="hero-list">
                    ${movementHTML}
                </div>
            </div>
        `;

        this.showScreen('movement');
    }

    // –í—ã–±–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è
    selectMovement(styleId) {
        const style = this.movementStyles.find(s => s.id === styleId);
        this.selectedMovement = styleId;
        
        this.addToLog(`üö∂ –í—ã–±—Ä–∞–Ω–æ: ${style.name}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–Ω—Å–∞ —Å–º–µ—Ä—Ç–∏
        if (this.checkDeathRisk()) {
            return; // –ì–µ—Ä–æ–π –ø–æ–≥–∏–±
        }
        
        // –í—Å—Ç—Ä–µ—á–∞ —Å –º–æ–Ω—Å—Ç—Ä–æ–º
        this.encounterMonster();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–Ω—Å–∞ —Å–º–µ—Ä—Ç–∏
    checkDeathRisk() {
        if (!this.currentLocation.deathRisk) return false;
        
        const deathRoll = Math.floor(Math.random() * this.currentLocation.deathRisk) + 1;
        if (deathRoll === 1) {
            this.addToLog(`üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ù–ï–£–î–ê–ß–ê!`);
            this.addToLog(`‚ò†Ô∏è ${this.currentLocation.deathMessage}`);
            this.addToLog(`üè• –í—ã –ø–æ–≥–∏–±–ª–∏ –∏ –≤–æ–∑—Ä–æ–¥–∏–ª–∏—Å—å —É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–∞–≤–µ—Ä–Ω—ã`);
            
            // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            this.currentLocation = null;
            this.selectedMovement = null;
            this.currentMonster = null;
            this.saveGame();
            
            setTimeout(() => {
                this.renderHeroScreen();
            }, 3000);
            
            return true;
        }
        
        this.addToLog(`‚úÖ –í–∞–º –ø–æ–≤–µ–∑–ª–æ! –®–∞–Ω—Å —Å–º–µ—Ä—Ç–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–≤—ã–ø–∞–ª–æ ${deathRoll})`);
        return false;
    }

    // –í—Å—Ç—Ä–µ—á–∞ —Å –º–æ–Ω—Å—Ç—Ä–æ–º
    encounterMonster() {
        const roll = Math.floor(Math.random() * this.monsters.length);
        this.currentMonster = this.monsters[roll];
        
        this.addToLog(`üé≠ –í—Å—Ç—Ä–µ—á–µ–Ω: ${this.currentMonster.name}`);
        this.renderHeroScreen(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –º–æ–Ω—Å—Ç—Ä–∞
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –º–æ–Ω—Å—Ç—Ä–∞
        this.showMonsterActions();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–æ–Ω—Å—Ç—Ä–∞
    showMonsterActions() {
        const container = document.getElementById('app');
        container.innerHTML += `
            <div class="action-buttons" style="margin-top: 15px;">
                <button class="btn-primary" onclick="game.startBattle()">‚öîÔ∏è –°—Ä–∞–∂–∞—Ç—å—Å—è</button>
                <button class="btn-secondary" onclick="game.attemptStealth()">üëª –°–∫—Ä—ã—Ç—å—Å—è</button>
                <button class="btn-secondary" onclick="game.attemptEscape()">üèÉ –£–±–µ–∂–∞—Ç—å</button>
            </div>
        `;
    }

// –ù–∞—á–∞—Ç—å –±–æ–π
startBattle() {
    this.addToLog(`‚öîÔ∏è –ù–∞—á–∞–ª–æ –±–æ—è —Å ${this.currentMonster.name}`);
    const stats = this.calculateHeroStats(this.currentHero);
    
    if (stats.power >= this.currentMonster.power) {
        this.addToLog(`üéØ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ ${this.currentMonster.name}!`);
        this.addToLog(`üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${this.currentMonster.reward} –∑–æ–ª–æ—Ç–∞`);
        this.currentHero.gold += this.currentMonster.reward;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –≤–º–µ—Å—Ç–æ –º–æ–Ω—Å—Ç—Ä–∞
        this.showReward(this.currentMonster.reward);
    } else {
        this.addToLog(`üí• –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –±–æ–π —Å ${this.currentMonster.name}`);
        this.addToLog(`üè• –ü–æ—Ç–µ—Ä—è–Ω–æ 20% –∑–¥–æ—Ä–æ–≤—å—è`);
        this.completeEncounter();
    }
}
    // –ü–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä—ã—Ç—å—Å—è
    attemptStealth() {
        const stats = this.calculateHeroStats(this.currentHero);
        let stealthBonus = stats.skills.stealth;
        
        // –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã/—à—Ç—Ä–∞—Ñ—ã
        const movement = this.movementStyles.find(s => s.id === this.selectedMovement);
        if (movement.stealthBonus) stealthBonus += movement.stealthBonus;
        if (movement.stealthPenalty) stealthBonus += movement.stealthPenalty;
        if (this.currentLocation.stealthBonus) stealthBonus += this.currentLocation.stealthBonus;
        if (this.currentLocation.stealthPenalty) stealthBonus += this.currentLocation.stealthPenalty;
        
        this.addToLog(`üëª –ü–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä—ã—Ç—å—Å—è... –ë–æ–Ω—É—Å: +${stealthBonus}d6`);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –±—Ä–æ—Å–∫–∞
        const stealthRoll = this.rollDice(stealthBonus, 3);
        
        if (stealthRoll.success) {
            this.addToLog(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã–ª–∏—Å—å –æ—Ç ${this.currentMonster.name}!`);
        } else {
            this.addToLog(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å—Å—è! –ú–æ–Ω—Å—Ç—Ä –≤–∞—Å –∑–∞–º–µ—Ç–∏–ª`);
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è
        }
        
        this.completeEncounter();
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–±–µ–≥–∞
    attemptEscape() {
        const stats = this.calculateHeroStats(this.currentHero);
        let escapeBonus = stats.skills.escape;
        
        // –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã/—à—Ç—Ä–∞—Ñ—ã
        const movement = this.movementStyles.find(s => s.id === this.selectedMovement);
        if (movement.escapeBonus) escapeBonus += movement.escapeBonus;
        if (movement.escapePenalty) escapeBonus += movement.escapePenalty;
        if (this.currentLocation.escapeBonus) escapeBonus += this.currentLocation.escapeBonus;
        if (this.currentLocation.escapePenalty) escapeBonus += this.currentLocation.escapePenalty;
        
        this.addToLog(`üèÉ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–±–µ–≥–∞... –ë–æ–Ω—É—Å: +${escapeBonus}d6`);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –±—Ä–æ—Å–∫–∞
        const escapeRoll = this.rollDice(escapeBonus, this.currentMonster.escapeDifficulty);
        
        if (escapeRoll.success) {
            this.addToLog(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–±–µ–∂–∞–ª–∏ –æ—Ç ${this.currentMonster.name}!`);
        } else {
            this.addToLog(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å! –ü—Ä–∏–¥—ë—Ç—Å—è —Å—Ä–∞–∂–∞—Ç—å—Å—è`);
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –±–æ–π
            this.startBattle();
            return;
        }
        
        this.completeEncounter();
    }

    // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤
    rollDice(bonusDice, targetNumber) {
        let total = 0;
        let rolls = [];
        
        // –ë–∞–∑–æ–≤—ã–π –±—Ä–æ—Å–æ–∫
        const baseRoll = Math.floor(Math.random() * 6) + 1;
        rolls.push(baseRoll);
        total += baseRoll;
        
        // –ë–æ–Ω—É—Å–Ω—ã–µ –±—Ä–æ—Å–∫–∏
        for (let i = 0; i < bonusDice; i++) {
            const bonusRoll = Math.floor(Math.random() * 6) + 1;
            rolls.push(bonusRoll);
            total += bonusRoll;
        }
        
        const success = total >= targetNumber;
        
        this.addToLog(`üé≤ –ë—Ä–æ—Å–æ–∫: [${rolls.join(', ')}] = ${total} (–Ω—É–∂–Ω–æ ${targetNumber}+) - ${success ? '–£–°–ü–ï–•' : '–ù–ï–£–î–ê–ß–ê'}`);
        
        return { success, total, rolls };
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
    completeEncounter() {
        this.currentMonster = null;
        this.selectedMovement = null;
        this.addToLog(`üèÅ –í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
        this.saveGame();
        setTimeout(() => {
            this.renderHeroScreen();
        }, 2000);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω
    showMerchant() {
        const availableItems = this.items.filter(item => item.merchant <= this.merchantsUnlocked);
        const merchantHTML = availableItems.map(item => `
            <div class="hero-option" onclick="game.buyItem(${item.id})">
                <div class="hero-option-image">
                    <img src="${item.image}" alt="${item.name}">
                </div>
                <div class="hero-option-info">
                    <strong>${item.name}</strong>
                    <div>${this.formatBonus(item.bonus)}</div>
                    <div>–£—Ä–æ–Ω: +${item.fixed_damage || 0} | –ë—Ä–æ–Ω—è: +${item.fixed_armor || 0}</div>
                    <div>üí∞ ${item.price} –∑–æ–ª–æ—Ç–∞ | –£—Ä. ${item.requiredLevel}</div>
                    <small>${item.description}</small>
                </div>
            </div>
        `).join('');

        const container = document.getElementById('app');
        container.innerHTML += `
            <div class="screen active" id="screen-merchant">
                <h3 class="text-center">üè™ –ú–∞–≥–∞–∑–∏–Ω (–¢–æ—Ä–≥–æ–≤–µ—Ü ${this.merchantsUnlocked})</h3>
                <div class="hero-list">
                    ${merchantHTML || '<div class="text-center">–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç</div>'}
                </div>
                <div class="action-buttons">
                    <button class="btn-secondary" onclick="game.renderHeroScreen()">‚Üê –ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;

        this.showScreen('merchant');
    }

    // –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    buyItem(itemId) {
        const item = this.items.find(i => i.id === itemId);
        if (!item) return;

        if (this.currentHero.gold < item.price) {
            this.addToLog(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${item.name}`);
            return;
        }

        if (this.currentHero.level < item.requiredLevel) {
            this.addToLog(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${item.name}`);
            return;
        }

        this.currentHero.gold -= item.price;
        this.currentHero.inventory.push(itemId);
        
        this.addToLog(`üõí –ö—É–ø–ª–µ–Ω–æ: ${item.name} –∑–∞ ${item.price} –∑–æ–ª–æ—Ç–∞`);
        this.saveGame();
        this.showMerchant(); // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    showInventory() {
        if (!this.currentHero) return;

        const inventoryHTML = this.currentHero.inventory.map(itemId => {
            const item = this.items.find(i => i.id === itemId);
            if (!item) return '';
            
            const isEquipped = Object.values(this.currentHero.equipment).includes(itemId);
            
            return `
                <div class="inventory-item" onclick="game.equipItem(${itemId})">
                    <div class="inventory-item-image">
                        <img src="${item.image}" alt="${item.name}">
                    </div>
                    <strong>${item.name}</strong>
                    <div>${this.formatBonus(item.bonus)}</div>
                    <div>–£—Ä–æ–Ω: +${item.fixed_damage || 0} | –ë—Ä–æ–Ω—è: +${item.fixed_armor || 0}</div>
                    ${isEquipped ? '<small>‚úì –ù–∞–¥–µ—Ç–æ</small>' : '<small>üì¶ –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ</small>'}
                </div>
            `;
        }).join('');

        const container = document.getElementById('app');
        container.innerHTML += `
            <div class="screen active" id="screen-inventory">
                <h3 class="text-center">üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</h3>
                <div class="inventory-grid">
                    ${inventoryHTML || '<div class="text-center">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</div>'}
                </div>
                <div class="action-buttons">
                    <button class="btn-secondary" onclick="game.renderHeroScreen()">‚Üê –ù–∞–∑–∞–¥ –∫ –≥–µ—Ä–æ—é</button>
                </div>
            </div>
        `;

        this.showScreen('inventory');
    }

    // –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
    equipItem(itemId) {
        const item = this.items.find(i => i.id === itemId);
        if (!item) return;

        // –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        const currentEquipped = this.currentHero.equipment[item.slot];
        if (currentEquipped) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            if (!this.currentHero.inventory.includes(currentEquipped)) {
                this.currentHero.inventory.push(currentEquipped);
            }
        }

        // –ù–∞–¥–µ–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
        this.currentHero.equipment[item.slot] = itemId;
        
        // –£–±–∏—Ä–∞–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        this.currentHero.inventory = this.currentHero.inventory.filter(id => id !== itemId);

        this.addToLog(`üéØ –ù–∞–¥–µ—Ç–æ: ${item.name}`);
        this.saveGame();
        this.renderHeroScreen();
    }

    // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª
    addToLog(message) {
        const log = document.getElementById('battle-log');
        if (log) {
            const entry = document.createElement('div');
            entry.className = 'log-entry';
            entry.textContent = message;
            log.appendChild(entry);
            log.scrollTop = log.scrollHeight;
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatBonus(bonus) {
        if (!bonus || bonus.type === 'none') return '–ù–µ—Ç –±–æ–Ω—É—Å–∞';
        
        const bonusNames = {
            'health_mult': '+% –∫ –∑–¥–æ—Ä–æ–≤—å—é',
            'damage_mult': '+% –∫ —É—Ä–æ–Ω—É', 
            'armor_mult': '+% –∫ –±—Ä–æ–Ω–µ',
            'gold_mult': '+% –∫ –∑–æ–ª–æ—Ç—É',
            'escape_bonus': '–ü–æ–±–µ–≥ +',
            'stealth_bonus': '–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å +',
            'luck_bonus': '–£–¥–∞—á–∞ +',
            'survival_bonus': '–í—ã–∂–∏–≤–∞–Ω–∏–µ +'
        };

        const value = bonus.type.includes('_mult') ? 
            Math.round(bonus.value * 100) : bonus.value;
            
        return bonusNames[bonus.type] ? 
            `${bonusNames[bonus.type]}${value}${bonus.type.includes('_mult') ? '%' : ''}` : 
            `–ë–æ–Ω—É—Å: ${value}`;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    getEquipmentName(slot) {
        const itemId = this.currentHero.equipment[slot];
        if (!itemId) return null;
        const item = this.items.find(i => i.id === itemId);
        return item?.name || null;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
    saveGame() {
        if (this.currentHero) {
            localStorage.setItem('heroGameSave', JSON.stringify({
                currentHeroId: this.currentHero.id,
                heroes: this.heroes,
                currentLocation: this.currentLocation,
                merchantsUnlocked: this.merchantsUnlocked
            }));
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    loadSave() {
        try {
            const save = localStorage.getItem('heroGameSave');
            if (save) {
                const data = JSON.parse(save);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–µ—Å—Å, –∞ –Ω–µ —Å–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –≥–µ—Ä–æ–µ–≤
                const savedHeroProgress = data.heroes || [];
                const currentHeroId = data.currentHeroId;
                
                // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ—Ä–æ–µ–≤
                const progressMap = new Map();
                savedHeroProgress.forEach(hero => {
                    progressMap.set(hero.id, {
                        gold: hero.gold,
                        level: hero.level,
                        experience: hero.experience,
                        inventory: hero.inventory,
                        equipment: hero.equipment
                    });
                });
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å–≤–µ–∂–∏–º –¥–∞–Ω–Ω—ã–º –∏–∑ JSON
                this.heroes = this.heroes.map(freshHero => {
                    const progress = progressMap.get(freshHero.id);
                    if (progress) {
                        return {
                            ...freshHero, // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
                            ...progress   // –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        };
                    }
                    return freshHero; // –ù–æ–≤—ã–π –≥–µ—Ä–æ–π –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                });
                
                this.currentLocation = data.currentLocation || null;
                this.merchantsUnlocked = data.merchantsUnlocked || 1;
                
                if (currentHeroId) {
                    this.currentHero = this.heroes.find(h => h.id === currentHeroId);
                    if (this.currentHero) {
                        this.showScreen('main');
                        this.renderHeroScreen();
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–≥—Ä—ã –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
let game;
document.addEventListener('DOMContentLoaded', () => {
    game = new HeroGame();
});
