// –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
console.log('üöÄ Script.js –∑–∞–≥—Ä—É–∂–µ–Ω!');

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–≥—Ä—ã
let game;
document.addEventListener('DOMContentLoaded', () => {
    console.log('‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω');
    game = new HeroGame();
    console.log('‚úÖ –ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});


// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã
class HeroGame {
    constructor() {
        this.heroes = [];
        this.items = [];
        this.monsters = [];
        this.maps = [];
        this.locations = [];
        this.movementStyles = [];
        this.merchants = [];
        
        this.showReward = false;
        this.lastReward = 0;
        this.currentHero = null;
        this.currentScreen = 'hero-select';
        this.currentMap = null;
        this.currentLocation = null;
        this.currentMonster = null;
        this.selectedMovement = null;
        
        // –ù–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –±–æ—è
        this.battleActive = false;
        this.battleRound = 0;
        this.battleLog = [];
        this.lastHealthUpdate = Date.now();
        this.healthRegenRate = 100 / 60;
        
        // –û–±—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        this.globalInventory = [];
        
        this.init();
    }

async init() {
    await this.loadGameData();
    this.loadSave();
    
    // –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú –ß–¢–û –ü–ï–†–í–´–ô –ì–ï–†–û–ô –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù
    if (this.heroes.length > 0) {
        const firstHero = this.heroes.find(h => h.id === 1);
        if (firstHero) {
            firstHero.unlocked = true;
        }
    }
    
    this.checkHeroUnlocks();
    this.renderHeroSelect();
}

    // –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON
    async loadJSON(filePath) {
        try {
            const response = await fetch(filePath);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return await response.json();
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${filePath}:`, error);
            return null;
        }
    }

  async loadGameData() {
    try {
        const [heroes, enemies, items, mapsData, locationsData, movement] = await Promise.all([
            this.loadJSON('data/heroes.json'),
            this.loadJSON('data/enemies.json'),
            this.loadJSON('data/items.json'),
            this.loadJSON('data/maps.json'),
            this.loadJSON('data/locations.json'),
            this.loadJSON('data/movement.json')
        ]);

        this.heroes = heroes || this.getDefaultHeroes();
        this.monsters = enemies || this.getDefaultEnemies();
        this.items = items || this.getDefaultItems();
        this.maps = mapsData || this.getDefaultMaps();
        this.locations = locationsData || this.getDefaultLocations();
        this.movementStyles = movement || this.getDefaultMovement();

        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –†–ê–ó–ë–õ–û–ö–ò–†–£–ï–ú –ü–ï–†–í–û–ì–û –ì–ï–†–û–Ø
        if (this.heroes.length > 0) {
            const firstHero = this.heroes.find(h => h.id === 1);
            if (firstHero) {
                firstHero.unlocked = true;
            }
        }

        console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        this.heroes = this.getDefaultHeroes();
        this.monsters = this.getDefaultEnemies();
        this.items = this.getDefaultItems();
        this.maps = this.getDefaultMaps();
        this.locations = this.getDefaultLocations();
        this.movementStyles = this.getDefaultMovement();
    }
}

    // –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
    getLevelRequirements() {
        return {
            1: 1,
            2: 100,
            3: 250,
            4: 500,
            5: 1000,
            6: 2000,
            7: 4000,
            8: 8000,
            9: 16000,
            10: 32000,
            11: 64000,
            12: 128000,
            13: 256000,
            14: 512000,
            15: 1024000,
        };
    }

    addExperience(amount) {
        if (!this.currentHero) return;
        
        const oldLevel = this.currentHero.level;
        this.currentHero.experience += amount;
        
        const levelRequirements = this.getLevelRequirements();
        let newLevel = oldLevel;
        
        while (this.currentHero.experience >= levelRequirements[newLevel + 1] && levelRequirements[newLevel + 1]) {
            newLevel++;
        }
        
        if (newLevel > oldLevel) {
            this.levelUp(newLevel);
        }
        
        this.saveGame();
    }

    levelUp(newLevel) {
        const levelsGained = newLevel - this.currentHero.level;
        this.currentHero.level = newLevel;
        
        const healthIncrease = 10 * levelsGained;
        const damageIncrease = 2 * levelsGained;
        const armorIncrease = 1 * levelsGained;
        
        this.currentHero.baseHealth += healthIncrease;
        this.currentHero.baseDamage += damageIncrease;
        this.currentHero.baseArmor += armorIncrease;
        
        this.currentHero.currentHealth = this.currentHero.baseHealth;
        
        this.addToLog(`üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å —É—Ä–æ–≤–µ–Ω—å ${newLevel}`);
        this.addToLog(`‚ù§Ô∏è +${healthIncrease} –∑–¥–æ—Ä–æ–≤—å—è`);
        this.addToLog(`‚öîÔ∏è +${damageIncrease} —É—Ä–æ–Ω–∞`);
        this.addToLog(`üõ°Ô∏è +${armorIncrease} –±—Ä–æ–Ω–∏`);
        
        this.checkHeroUnlocks();
    }

    checkHeroUnlocks() {
        const heroUnlockLevels = {
            2: 10,
            3: 15,
            4: 20,
            5: 25,
            6: 30,
            7: 35,
            8: 40
        };
        
        Object.entries(heroUnlockLevels).forEach(([heroId, requiredLevel]) => {
            const hero = this.heroes.find(h => h.id === parseInt(heroId));
            if (hero && !hero.unlocked && this.currentHero.level >= requiredLevel) {
                hero.unlocked = true;
                this.addToLog(`üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –≥–µ—Ä–æ–π: ${hero.name}!`);
            }
        });
    }

    // –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    getDefaultHeroes() {
        return [
            {
                id: 1,
                name: "–ù–∞—á–∞–ª—å–Ω—ã–π –≥–µ—Ä–æ–π",
                image: "images/heroes/hero1.jpg",
                race: "human",
                class: "warrior",
                saga: "golden_egg",
                baseHealth: 100,
                baseDamage: 20,
                baseArmor: 10,
                gold: 500,
                level: 1,
                experience: 0,
                healthRegen: 100/60,
                inventory: [],
                equipment: {
                    main_hand: null,
                    chest: null
                },
                unlocked: true,
                story: "–ü—Ä–æ—Å—Ç–æ–π –≤–æ–∏–Ω –∏–∑ –¥–∞–ª–µ–∫–æ–π –¥–µ—Ä–µ–≤–Ω–∏...",
                videoUrl: "https://youtube.com/embed/..."
            },
            {
                id: 2,
                name: "–û–ø—ã—Ç–Ω—ã–π –∏—Å–∫–∞—Ç–µ–ª—å",
                image: "images/heroes/hero2.jpg",
                race: "elf",
                class: "archer",
                saga: "vulkanor",
                baseHealth: 120,
                baseDamage: 25,
                baseArmor: 8,
                gold: 0,
                level: 1,
                experience: 0,
                healthRegen: 100/45,
                inventory: [],
                equipment: {
                    main_hand: null,
                    chest: null
                },
                unlocked: false,
                story: "–≠–ª—å—Ñ–∏–π—Å–∫–∏–π —Å–ª–µ–¥–æ–ø—ã—Ç —Å –æ—Å—Ç—Ä—ã–º –≤–∑–≥–ª—è–¥–æ–º...",
                videoUrl: "https://youtube.com/embed/..."
            }
        ];
    }

    getDefaultEnemies() {
        return [
            {
                id: 1,
                name: "–°–ª–∞–±—ã–π –º–æ–Ω—Å—Ç—Ä",
                health: 30,
                maxHealth: 30,
                attack: 5,
                defense: 2,
                speed: 3,
                experience: 5,
                reward: 10
            }
        ];
    }

    getDefaultItems() {
        return [
            {
                id: 1,
                name: "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è",
                type: "potion",
                value: 20,
                price: 25,
                heal: 20
            }
        ];
    }

    getDefaultMaps() {
        return [
            { 
                id: 1, 
                name: "–ê—Ä–∫–∞–Ω–∏—É–º", 
                image: "images/maps/arcanium.jpg", 
                description: "–ó–µ–º–ª—è –¥—Ä–µ–≤–Ω–µ–π –º–∞–≥–∏–∏", 
                multiplier: 1.0, 
                unlocked: true 
            },
            { 
                id: 2, 
                name: "–•–æ–±–±–ª—Ç–æ–Ω", 
                image: "images/maps/hobbleton.jpg", 
                description: "–ú–∏—Ä–Ω—ã–π —Å–µ–ª—å—Å–∫–∏–π –∫—Ä–∞–π", 
                multiplier: 1.5, 
                unlocked: false 
            },
            { 
                id: 3, 
                name: "–§–µ–ª–∏—Å–∞—Ä", 
                image: "images/maps/felisar.jpg", 
                description: "–õ–µ—Å–Ω—ã–µ —Ç—Ä–æ–ø–∏–∫–∏", 
                multiplier: 2.0, 
                unlocked: false 
            },
            { 
                id: 4, 
                name: "–ò–ª–≤–µ—Ä–∏–Ω", 
                image: "images/maps/ilverin.jpg", 
                description: "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–µ—Å", 
                multiplier: 2.5, 
                unlocked: false 
            },
            { 
                id: 5, 
                name: "–í–∞—Ä–≥–æ—à", 
                image: "images/maps/vargosh.jpg", 
                description: "–í—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–µ –∑–µ–º–ª–∏", 
                multiplier: 3.0, 
                unlocked: false 
            },
            { 
                id: 6, 
                name: "–î—É–Ω–≥–∞—Ä–Ω", 
                image: "images/maps/dungarn.jpg", 
                description: "–ü–æ–¥–∑–µ–º–Ω—ã–µ –ø–µ—â–µ—Ä—ã", 
                multiplier: 3.5, 
                unlocked: false 
            },
            { 
                id: 7, 
                name: "–õ—é–º–∏–Ω—ç–ª—å", 
                image: "images/maps/luminel.jpg", 
                description: "–°–≤–µ—Ä–∫–∞—é—â–∏–µ —Ä–∞–≤–Ω–∏–Ω—ã", 
                multiplier: 4.0, 
                unlocked: false 
            },
            { 
                id: 8, 
                name: "–ê—Å—Ç—Ä–∞—Ä–∏–æ–Ω", 
                image: "images/maps/astarion.jpg", 
                description: "–ù–µ–±–µ—Å–Ω—ã–µ –ø—Ä–æ—Å—Ç–æ—Ä—ã", 
                multiplier: 4.5, 
                unlocked: false 
            },
            { 
                id: 9, 
                name: "–≠–ª—å—Ñ–∞—Ä–∏–æ–Ω", 
                image: "images/maps/elfarion.jpg", 
                description: "–î—Ä–µ–≤–Ω–µ–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ —ç–ª—å—Ñ–æ–≤", 
                multiplier: 5.0, 
                unlocked: false 
            }
        ];
    }

    getDefaultLocations() {
        return [
            { 
                level: 10, 
                name: "–ù–∞—á–∞–ª—å–Ω—ã–µ –∑–µ–º–ª–∏", 
                description: "–ú—è–≥–∫–∏–π –∫–ª–∏–º–∞—Ç, —Å–ª–∞–±—ã–µ –º–æ–Ω—Å—Ç—Ä—ã", 
                image: "images/locations/level10.jpg",
                monsterRange: [1, 10], 
                artifactChance: 0.005, 
                relicChance: 0.0005 
            },
            { 
                level: 9, 
                name: "–ì–ª—É–±–æ–∫–∏–π –ª–µ—Å", 
                description: "–ì—É—Å—Ç—ã–µ –∑–∞—Ä–æ—Å–ª–∏", 
                image: "images/locations/level9.jpg",
                monsterRange: [1, 20], 
                artifactChance: 0.01, 
                relicChance: 0.001 
            },
            { 
                level: 8, 
                name: "–°–∫–∞–ª–∏—Å—Ç—ã–µ —É—Ç–µ—Å—ã", 
                description: "–ö—Ä—É—Ç—ã–µ –æ–±—Ä—ã–≤—ã", 
                image: "images/locations/level8.jpg",
                monsterRange: [1, 30], 
                artifactChance: 0.015, 
                relicChance: 0.0015 
            },
            { 
                level: 7, 
                name: "–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–µ —Ä—É–∏–Ω—ã", 
                description: "–î—Ä–µ–≤–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏", 
                image: "images/locations/level7.jpg",
                monsterRange: [1, 40], 
                artifactChance: 0.02, 
                relicChance: 0.002 
            },
            { 
                level: 6, 
                name: "–¢–µ–º–Ω—ã–µ –ø–µ—â–µ—Ä—ã", 
                description: "–ú—Ä–∞–∫ –∏ –æ–ø–∞—Å–Ω–æ—Å—Ç—å", 
                image: "images/locations/level6.jpg",
                monsterRange: [1, 50], 
                artifactChance: 0.025, 
                relicChance: 0.0025 
            },
            { 
                level: 5, 
                name: "–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –∑–µ–º–ª–∏", 
                description: "–°–∏–ª–∞ –º–∞–≥–∏–∏", 
                image: "images/locations/level5.jpg",
                monsterRange: [1, 60], 
                artifactChance: 0.03, 
                relicChance: 0.003 
            },
            { 
                level: 4, 
                name: "–õ–µ–¥—è–Ω—ã–µ –ø—É—Å—Ç–æ—à–∏", 
                description: "–í–µ—á–Ω–∞—è –º–µ—Ä–∑–ª–æ—Ç–∞", 
                image: "images/locations/level4.jpg",
                monsterRange: [1, 70], 
                artifactChance: 0.035, 
                relicChance: 0.0035 
            },
            { 
                level: 3, 
                name: "–û–≥–Ω–µ–Ω–Ω—ã–µ –∑–µ–º–ª–∏", 
                description: "–ñ–∞—Ä –∏ –ø–ª–∞–º—è", 
                image: "images/locations/level3.jpg",
                monsterRange: [1, 80], 
                artifactChance: 0.04, 
                relicChance: 0.004 
            },
            { 
                level: 2, 
                name: "–ù–µ–±–µ—Å–Ω—ã–µ –ø—É—Ç–∏", 
                description: "–í—ã—Å–æ–∫–æ –≤ –æ–±–ª–∞–∫–∞—Ö", 
                image: "images/locations/level2.jpg",
                monsterRange: [1, 90], 
                artifactChance: 0.045, 
                relicChance: 0.0045 
            },
            { 
                level: 1, 
                name: "–¢—Ä–æ–Ω–Ω—ã–π –∑–∞–ª", 
                description: "–û–±–∏—Ç–µ–ª—å –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤", 
                image: "images/locations/level1.jpg",
                monsterRange: [1, 100], 
                artifactChance: 0.05, 
                relicChance: 0.005 
            }
        ];
    }

    getDefaultMovement() {
        return [
            {
                id: "walk",
                name: "–ü–µ—à–∫–æ–º",
                description: "–û–±—ã—á–Ω–∞—è —Ö–æ–¥—å–±–∞",
                movement: 2,
                stealthBonus: 0,
                escapeBonus: 0
            }
        ];
    }

    // –ë–æ–Ω—É—Å—ã —Ä–∞—Å, –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏ —Å–∞–≥
    getBonuses() {
        return {
            races: {
                elf: { bonus: {type: "escape_bonus", value: 1}, name: "–≠–ª—å—Ñ", description: "–ü—Ä–æ–≤–æ—Ä–Ω—ã–π –∏ –Ω–µ—É–ª–æ–≤–∏–º—ã–π" },
                dwarf: { bonus: {type: "health_mult", value: 0.3}, name: "–ì–Ω–æ–º", description: "–í—ã–Ω–æ—Å–ª–∏–≤—ã–π –∏ –∫—Ä–µ–ø–∫–∏–π" },
                halfling: { bonus: {type: "stealth_bonus", value: 1}, name: "–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫", description: "–ú–∞–ª–µ–Ω—å–∫–∏–π –∏ –Ω–µ–∑–∞–º–µ—Ç–Ω—ã–π" },
                fairy: { bonus: {type: "luck_bonus", value: 1}, name: "–§–µ—è", description: "–í–µ–∑–µ–Ω–∏–µ –∏ –º–∞–≥–∏—è" },
                laitar: { bonus: {type: "survival_bonus", value: 1}, name: "–õ–∞–π—Ç–∞—Ä", description: "–ú–∞—Å—Ç–µ—Ä –≤—ã–∂–∏–≤–∞–Ω–∏—è" },
                ork: { bonus: {type: "damage_mult", value: 0.2}, name: "–û—Ä–∫", description: "–°–∏–ª—å–Ω—ã–π –∏ —Å–≤–∏—Ä–µ–ø—ã–π" },
                human: { bonus: {type: "gold_mult", value: 0.3}, name: "–ß–µ–ª–æ–≤–µ–∫", description: "–ü—Ä–µ–¥–ø—Ä–∏–∏–º—á–∏–≤—ã–π –∏ –±–æ–≥–∞—Ç—ã–π" },
                dragon: { bonus: {type: "armor_mult", value: 0.15}, name: "–î—Ä–∞–∫–æ–Ω", description: "–ú–æ–≥—É—á–∏–π –∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π" }
            },
            classes: {
                archer: { bonus: {type: "damage_mult", value: 0.2}, name: "–õ—É—á–Ω–∏–∫", description: "–ú–∞—Å—Ç–µ—Ä –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è" },
                warrior: { bonus: {type: "damage_mult", value: 0.2}, name: "–í–æ–∏–Ω", description: "–°–∏–ª—å–Ω—ã–π –∏ –æ—Ç–≤–∞–∂–Ω—ã–π" },
                thief: { bonus: {type: "stealth_bonus", value: 1}, name: "–í–æ—Ä", description: "–¢–∏—Ö–∏–π –∏ –Ω–µ–∑–∞–º–µ—Ç–Ω—ã–π" },
                merchant: { bonus: {type: "gold_mult", value: 0.3}, name: "–¢–æ—Ä–≥–æ–≤–µ—Ü", description: "–ò—Å–∫—É—Å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü" },
                fighter: { bonus: {type: "luck_bonus", value: 1}, name: "–ö—É–ª–∞—á–Ω—ã–π –±–æ–µ—Ü", description: "–£–¥–∞—á–ª–∏–≤—ã–π –±–æ–µ—Ü" },
                healer: { bonus: {type: "health_mult", value: 0.3}, name: "–ó–Ω–∞—Ö–∞—Ä—å", description: "–ú–∞—Å—Ç–µ—Ä –∏—Å—Ü–µ–ª–µ–Ω–∏—è" },
                sorcerer: { bonus: {type: "escape_bonus", value: 1}, name: "–ö–æ–ª–¥—É–Ω", description: "–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞" },
                death_mage: { bonus: {type: "stealth_bonus", value: 1}, name: "–í–æ–ª—Ö–≤ —Å–º–µ—Ä—Ç–∏", description: "–¢—ë–º–Ω—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞" },
                hunter: { bonus: {type: "survival_bonus", value: 1}, name: "–û—Ö–æ—Ç–Ω–∏–∫", description: "–°–ª–µ–¥–æ–ø—ã—Ç –∏ –≤—ã–∂–∏–≤–∞–ª—å—â–∏–∫" },
                bounty_hunter: { bonus: {type: "damage_mult", value: 0.1}, name: "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –≥–æ–ª–æ–≤–∞–º–∏", description: "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é" },
                gladiator: { bonus: {type: "damage_mult", value: 0.2}, name: "–ì–ª–∞–¥–∏–∞—Ç–æ—Ä", description: "–ú–∞—Å—Ç–µ—Ä –ª—é–±–æ–≥–æ –æ—Ä—É–∂–∏—è" },
                blacksmith: { bonus: {type: "armor_mult", value: 0.15}, name: "–ö—É–∑–Ω–µ—Ü", description: "–ú–∞—Å—Ç–µ—Ä –±—Ä–æ–Ω–∏" },
                antiquarian: { bonus: {type: "gold_mult", value: 0.3}, name: "–ò—Å–∫–∞—Ç–µ–ª—å –¥—Ä–µ–≤–Ω–æ—Å—Ç–µ–π", description: "–ó–Ω–∞—Ç–æ–∫ —Å–æ–∫—Ä–æ–≤–∏—â" }
            },
            sagas: {
                golden_egg: { bonus: {type: "health_mult", value: 0.3}, name: "–ó–æ–ª–æ—Ç–æ–µ –Ø–π—Ü–æ", description: "–û–±–ª–∞–¥–∞—Ç–µ–ª—å –¥—Ä–µ–≤–Ω–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞" },
                vulkanor: { bonus: {type: "damage_mult", value: 0.2}, name: "–í—É–ª–∫–∞–Ω–æ—Ä", description: "–ü—Ä–æ—à–µ–¥—à–∏–π –æ–≥–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è" },
                well: { bonus: {type: "gold_mult", value: 0.3}, name: "–ö–æ–ª–æ–¥–µ—Ü", description: "–ù–∞—à–µ–¥—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –±–æ–≥–∞—Ç—Å—Ç–≤–∞" },
                pets: { bonus: {type: "luck_bonus", value: 1}, name: "–ü–∏—Ç–æ–º—Ü—ã", description: "–í–µ—Ä–Ω—ã–µ —Å–ø—É—Ç–Ω–∏–∫–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç —É–¥–∞—á—É" },
                following_sun: { bonus: {type: "survival_bonus", value: 1}, name: "–í—Å–ª–µ–¥ –∑–∞ —Å–æ–ª–Ω—Ü–µ–º", description: "–ü—Ä–æ—à–µ–¥—à–∏–π —á–µ—Ä–µ–∑ –ø—É—Å—Ç—ã–Ω–∏" },
                vampire_crown: { bonus: {type: "stealth_bonus", value: 1}, name: "–ö–æ—Ä–æ–Ω–∞ –∫–æ—Ä–æ–ª—è –≤–∞–º–ø–∏—Ä–æ–≤", description: "–ù–æ—Å–∏—Ç–µ–ª—å —Ç—ë–º–Ω–æ–π –∫–æ—Ä–æ–Ω—ã" },
                tiger_eye: { bonus: {type: "armor_mult", value: 0.15}, name: "–ñ–µ–ª—Ç—ã–π –ì–ª–∞–∑ —Ç–∏–≥—Ä–∞", description: "–û–±–ª–∞–¥–∞—Ç–µ–ª—å –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–∞—â–∏—Ç—ã" },
                sky_phenomena: { bonus: {type: "escape_bonus", value: 1}, name: "–ù–µ–±–µ—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è", description: "–°–≤–∏–¥–µ—Ç–µ–ª—å –Ω–µ–±–µ—Å–Ω—ã—Ö —á—É–¥–µ—Å" }
            }
        };
    }

    // –†–∞—Å—á—ë—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–µ—Ä–æ—è
    calculateHeroStats(hero) {
        const bonuses = this.getBonuses();
        
        const raceBonus = bonuses.races[hero.race]?.bonus || {type: "none", value: 0};
        const classBonus = bonuses.classes[hero.class]?.bonus || {type: "none", value: 0};
        const sagaBonus = bonuses.sagas[hero.saga]?.bonus || {type: "none", value: 0};
        
        let weaponBonus = {type: "none", value: 0};
        let armorBonus = {type: "none", value: 0};
        
        if (hero.equipment.main_hand) {
            const weapon = this.items.find(item => item.id === hero.equipment.main_hand);
            weaponBonus = weapon?.bonus || {type: "none", value: 0};
        }
        
        if (hero.equipment.chest) {
            const armor = this.items.find(item => item.id === hero.equipment.chest);
            armorBonus = armor?.bonus || {type: "none", value: 0};
        }

        const allBonuses = [raceBonus, classBonus, sagaBonus, weaponBonus, armorBonus];

        // –ë–∞–∑–∞ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è
        const levelMultiplier = 1 + (hero.level - 1) * 0.1;
        let health = hero.baseHealth * levelMultiplier;
        let damage = hero.baseDamage * levelMultiplier;
        let armor = hero.baseArmor * levelMultiplier;

        // –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞
        if (hero.equipment.main_hand) {
            const weapon = this.items.find(item => item.id === hero.equipment.main_hand);
            damage += weapon?.fixed_damage || 0;
        }
        
        if (hero.equipment.chest) {
            const armorItem = this.items.find(item => item.id === hero.equipment.chest);
            armor += armorItem?.fixed_armor || 0;
        }

        // –ë–æ–Ω—É—Å—ã
        allBonuses.forEach(bonus => {
            switch(bonus.type) {
                case 'health_mult': health *= (1 + bonus.value); break;
                case 'damage_mult': damage *= (1 + bonus.value); break;
                case 'armor_mult': armor *= (1 + bonus.value); break;
            }
        });

        const power = Math.round((health / 10) + (damage * 1.5) + (armor * 2));

        const skills = {
            escape: 0,
            stealth: 0,
            luck: 0,
            survival: 0,
            wealth: 0
        };

        allBonuses.forEach(bonus => {
            if (bonus.type.includes('_bonus')) {
                const skill = bonus.type.replace('_bonus', '');
                if (skills.hasOwnProperty(skill)) {
                    skills[skill] += bonus.value;
                }
            }
            else if (bonus.type === 'gold_mult') {
                skills.wealth += bonus.value;
            }
        });

        const currentHealth = this.getCurrentHealth();

        return {
            health: Math.round(health),
            currentHealth: currentHealth,
            maxHealth: Math.round(health),
            damage: Math.round(damage),
            armor: Math.round(armor),
            power: power,
            skills: skills,
            bonuses: {
                race: raceBonus,
                class: classBonus,
                saga: sagaBonus,
                weapon: weaponBonus,
                armor: armorBonus
            }
        };
    }

    // –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    getCurrentHealth() {
        if (!this.currentHero) return 0;
        
        const now = Date.now();
        const timePassed = (now - this.lastHealthUpdate) / 1000;
        const healthToRegen = timePassed * this.currentHero.healthRegen;
        
        let currentHealth = this.currentHero.currentHealth || this.currentHero.baseHealth;
        
        if (currentHealth < this.currentHero.baseHealth) {
            currentHealth = Math.min(
                this.currentHero.baseHealth,
                currentHealth + healthToRegen
            );
            this.currentHero.currentHealth = currentHealth;
            this.lastHealthUpdate = now;
            this.saveGame();
        }
        
        return Math.floor(currentHealth);
    }

 renderHeroSelect() {
    const container = document.getElementById('app');
    container.innerHTML = `
        <div class="screen active" id="screen-hero-select">
            <h2 class="text-center">–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è</h2>
            <div class="hero-list">
                ${this.heroes.map(hero => {
                    // –ü–ï–†–í–´–ô –ì–ï–†–û–ô –í–°–ï–ì–î–ê –î–û–°–¢–£–ü–ï–ù, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ unlocked
                    const isUnlocked = hero.id === 1 ? true : (hero.unlocked || false);
                    
                    const stats = this.calculateHeroStats(hero);
                    const bonuses = this.getBonuses();
                    
                    const activeSkills = [];
                    
                    if (stats.skills.stealth > 0) activeSkills.push({icon: 'üëª', name: '–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å', value: stats.skills.stealth});
                    if (stats.skills.escape > 0) activeSkills.push({icon: 'üèÉ', name: '–ü–æ–±–µ–≥', value: stats.skills.escape});
                    if (stats.skills.luck > 0) activeSkills.push({icon: 'üçÄ', name: '–£–¥–∞—á–∞', value: stats.skills.luck});
                    if (stats.skills.survival > 0) activeSkills.push({icon: 'üåø', name: '–í—ã–∂–∏–≤–∞–Ω–∏–µ', value: stats.skills.survival});
                    if (stats.skills.wealth > 0) activeSkills.push({icon: 'üí∞', name: '–ë–æ–≥–∞—Ç—Å—Ç–≤–æ', value: stats.skills.wealth});
                    
                    if (stats.bonuses.race.value > 0 && stats.bonuses.race.type.includes('health_mult')) 
                        activeSkills.push({icon: '‚ù§Ô∏è', name: '–ó–¥–æ—Ä–æ–≤—å–µ', value: Math.round(stats.bonuses.race.value * 100) + '%'});
                    if (stats.bonuses.race.value > 0 && stats.bonuses.race.type.includes('damage_mult')) 
                        activeSkills.push({icon: '‚öîÔ∏è', name: '–£—Ä–æ–Ω', value: Math.round(stats.bonuses.race.value * 100) + '%'});
                    if (stats.bonuses.race.value > 0 && stats.bonuses.race.type.includes('armor_mult')) 
                        activeSkills.push({icon: 'üõ°Ô∏è', name: '–ë—Ä–æ–Ω—è', value: Math.round(stats.bonuses.race.value * 100) + '%'});
                    
                    if (stats.bonuses.class.value > 0 && stats.bonuses.class.type.includes('health_mult')) 
                        activeSkills.push({icon: '‚ù§Ô∏è', name: '–ó–¥–æ—Ä–æ–≤—å–µ', value: Math.round(stats.bonuses.class.value * 100) + '%'});
                    if (stats.bonuses.class.value > 0 && stats.bonuses.class.type.includes('damage_mult')) 
                        activeSkills.push({icon: '‚öîÔ∏è', name: '–£—Ä–æ–Ω', value: Math.round(stats.bonuses.class.value * 100) + '%'});
                    if (stats.bonuses.class.value > 0 && stats.bonuses.class.type.includes('armor_mult')) 
                        activeSkills.push({icon: 'üõ°Ô∏è', name: '–ë—Ä–æ–Ω—è', value: Math.round(stats.bonuses.class.value * 100) + '%'});
                    
                    if (stats.bonuses.saga.value > 0 && stats.bonuses.saga.type.includes('health_mult')) 
                        activeSkills.push({icon: '‚ù§Ô∏è', name: '–ó–¥–æ—Ä–æ–≤—å–µ', value: Math.round(stats.bonuses.saga.value * 100) + '%'});
                    if (stats.bonuses.saga.value > 0 && stats.bonuses.saga.type.includes('damage_mult')) 
                        activeSkills.push({icon: '‚öîÔ∏è', name: '–£—Ä–æ–Ω', value: Math.round(stats.bonuses.saga.value * 100) + '%'});
                    if (stats.bonuses.saga.value > 0 && stats.bonuses.saga.type.includes('armor_mult')) 
                        activeSkills.push({icon: 'üõ°Ô∏è', name: '–ë—Ä–æ–Ω—è', value: Math.round(stats.bonuses.saga.value * 100) + '%'});

                    return `
                        <div class="hero-option ${isUnlocked ? '' : 'locked'}" 
                             onclick="${isUnlocked ? `game.selectHero(${hero.id})` : ''}">
                            <div class="hero-option-image">
                                <img src="${hero.image}" alt="${hero.name}">
                                ${!isUnlocked ? '<div class="locked-overlay">üîí</div>' : ''}
                            </div>
                            <div class="hero-option-info">
                                <div class="hero-option-header">
                                    <strong>${hero.name}</strong>
                                    <span class="hero-level">–£—Ä. ${hero.level}</span>
                                </div>
                                <div class="hero-option-stats">
                                    <div class="stat-row">
                                        <span>‚ù§Ô∏è ${stats.currentHealth}/${stats.maxHealth}</span>
                                        <span>‚öîÔ∏è ${stats.damage}</span>
                                        <span>üõ°Ô∏è ${stats.armor}</span>
                                        <span>üåü ${stats.power}</span>
                                    </div>
                                    <div class="stat-row">
                                        <span>üí∞ ${hero.gold}</span>
                                        <span>‚ö° ${hero.experience}/${this.getLevelRequirements()[hero.level + 1] || 'MAX'}</span>
                                    </div>
                                </div>
                                ${activeSkills.length > 0 ? `
                                    <div class="hero-option-skills">
                                        ${activeSkills.map(skill => `
                                            <span title="${skill.name}">${skill.icon} ${skill.value}${typeof skill.value === 'number' ? 'd6' : ''}</span>
                                        `).join('')}
                                    </div>
                                ` : ''}
                                <div class="hero-option-bonuses">
                                    <small>${bonuses.races[hero.race]?.name} - ${bonuses.classes[hero.class]?.name} - ${bonuses.sagas[hero.saga]?.name}</small>
                                </div>
                                ${!isUnlocked ? '<small class="locked-text">–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å: ' + (hero.id * 5) + '</small>' : ''}
                            </div>
                        </div>
                    `;
                }).join('')}
            </div>
        </div>
    `;
}

// –í—ã–±–æ—Ä –≥–µ—Ä–æ—è
selectHero(heroId) {
    console.log('–í—ã–±–æ—Ä –≥–µ—Ä–æ—è:', heroId); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    
    const hero = this.heroes.find(h => h.id === heroId);
    if (!hero) {
        console.error('–ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω:', heroId);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –≥–µ—Ä–æ–π
    const isUnlocked = hero.id === 1 ? true : (hero.unlocked || false);
    if (!isUnlocked) {
        console.log('–ì–µ—Ä–æ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:', hero.name);
        return;
    }
    
    this.currentHero = hero;
    this.showScreen('main');
    this.renderHeroScreen();
    this.saveGame();
    
    console.log('–ì–µ—Ä–æ–π –≤—ã–±—Ä–∞–Ω:', hero.name);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω
showScreen(screenName) {
    this.currentScreen = screenName;
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω:', screenName);
}

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω
    showScreen(screenName) {
        this.currentScreen = screenName;
    }

    // –†–µ–Ω–¥–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –≥–µ—Ä–æ—è
    renderHeroScreen() {
        if (!this.currentHero) return;

        const stats = this.calculateHeroStats(this.currentHero);
        const bonuses = this.getBonuses();

        const weapon = this.currentHero.equipment.main_hand ? 
            this.items.find(item => item.id === this.currentHero.equipment.main_hand) : null;
        const armor = this.currentHero.equipment.chest ? 
            this.items.find(item => item.id === this.currentHero.equipment.chest) : null;

        const nextLevelExp = this.getLevelRequirements()[this.currentHero.level + 1];
        const expProgress = nextLevelExp ? (this.currentHero.experience / nextLevelExp) * 100 : 100;

        const container = document.getElementById('app');
        container.innerHTML = `
            <div class="screen active" id="screen-main">
                <!-- –ù–æ–≤—ã–π –º–∞–∫–µ—Ç —Å —Ç—Ä–µ–º—è –∫–æ–ª–æ–Ω–∫–∞–º–∏ -->
                <div class="hero-layout">
                    <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ì–µ—Ä–æ–π -->
                    <div class="hero-column">
                        <div class="column-title">üéØ –í–ê–® –ì–ï–†–û–ô</div>
                        <div class="hero-image">
                            <img src="${this.currentHero.image}" alt="${this.currentHero.name}">
                        </div>
                        <div class="hero-info">
                            <h2>${this.currentHero.name}</h2>
                            <div class="hero-main-stats">
                                <div class="main-stat">
                                    <span class="stat-icon">‚ù§Ô∏è</span>
                                    <span class="stat-value">${stats.currentHealth}/${stats.maxHealth}</span>
                                </div>
                                <div class="main-stat">
                                    <span class="stat-icon">‚öîÔ∏è</span>
                                    <span class="stat-value">${stats.damage}</span>
                                </div>
                                <div class="main-stat">
                                    <span class="stat-icon">üõ°Ô∏è</span>
                                    <span class="stat-value">${stats.armor}</span>
                                </div>
                                <div class="main-stat">
                                    <span class="stat-icon">üåü</span>
                                    <span class="stat-value">${stats.power}</span>
                                </div>
                            </div>
                            <div class="hero-regen">
                                <span>‚ö° –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è: ${Math.round(this.currentHero.healthRegen * 60)}/–º–∏–Ω</span>
                            </div>
                            <div class="level-progress">
                                <div class="level-progress-fill" style="width: ${expProgress}%"></div>
                            </div>
                            <div class="hero-progress">
                                <span>–£—Ä. ${this.currentHero.level}</span>
                                <span>üí∞ ${this.currentHero.gold}</span>
                                <span>‚ö° ${this.currentHero.experience}/${nextLevelExp || 'MAX'}</span>
                            </div>
                        </div>
                    </div>

                    <!-- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ö–∞—Ä—Ç–∞ -->
                    <div class="map-column">
                        <div class="column-title">üó∫Ô∏è –í–´–ë–û–† –ö–ê–†–¢–´</div>
                        ${this.renderMapSelection()}
                    </div>

                    <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –õ–æ–∫–∞—Ü–∏—è -->
                    <div class="location-column">
                        <div class="column-title">üìç –í–´–ë–û–† –õ–û–ö–ê–¶–ò–ò</div>
                        ${this.renderLocationSelection()}
                    </div>
                </div>

                <!-- –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å - –º–æ–Ω—Å—Ç—Ä/–±–æ–π -->
                <div class="battle-section">
                    <div class="monster-reward-column">
                        <div class="column-title">üé≠ –í–†–ê–ì / üéÅ –ù–ê–ì–†–ê–î–ê</div>
                        ${this.renderMonsterRewardColumn()}
                    </div>
                </div>

                <!-- –°–µ–∫—Ü–∏—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ -->
                <div class="equipment-section">
                    <div class="equipment-slot ${weapon ? 'equipped' : 'empty'}" onclick="game.showInventory()">
                        <div class="equipment-icon">
                            ${weapon ? `<img src="${weapon.image}" alt="${weapon.name}">` : ''}
                        </div>
                        <div>
                            <strong>‚öîÔ∏è –û—Ä—É–∂–∏–µ</strong>
                            <div>${weapon ? weapon.name : '–ü—É—Å—Ç–æ'}</div>
                            ${weapon ? `<small>${this.formatBonus(weapon.bonus)}</small>` : ''}
                        </div>
                    </div>
                    
                    <div class="equipment-slot ${armor ? 'equipped' : 'empty'}" onclick="game.showInventory()">
                        <div class="equipment-icon">
                            ${armor ? `<img src="${armor.image}" alt="${armor.name}">` : ''}
                        </div>
                        <div>
                            <strong>üõ°Ô∏è –ë—Ä–æ–Ω—è</strong>
                            <div>${armor ? armor.name : '–ü—É—Å—Ç–æ'}</div>
                            ${armor ? `<small>${this.formatBonus(armor.bonus)}</small>` : ''}
                        </div>
                    </div>
                </div>

                <!-- –ë–æ–Ω—É—Å—ã -->
                <div class="bonuses-section">
                    <h3>üéØ –ë–æ–Ω—É—Å—ã:</h3>
                    <div class="bonus-item">
                        <strong>–†–∞—Å–∞:</strong> ${bonuses.races[this.currentHero.race]?.name} 
                        (${this.formatBonus(stats.bonuses.race)})
                    </div>
                    <div class="bonus-item">
                        <strong>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</strong> ${bonuses.classes[this.currentHero.class]?.name}
                        (${this.formatBonus(stats.bonuses.class)})
                    </div>
                    <div class="bonus-item">
                        <strong>–°–∞–≥–∞:</strong> ${bonuses.sagas[this.currentHero.saga]?.name}
                        (${this.formatBonus(stats.bonuses.saga)})
                    </div>
                </div>

                <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
                <div class="action-buttons">
                    <button class="btn-primary" onclick="game.startAdventure()">üé≤ –ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ</button>
                    <button class="btn-secondary" onclick="game.showInventory()">üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</button>
                    <button class="btn-secondary" onclick="game.showMerchant()">üè™ –ú–∞–≥–∞–∑–∏–Ω</button>
                    <button class="btn-danger" onclick="game.resetHero()">üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≥–µ—Ä–æ—è</button>
                    <button class="btn-secondary" onclick="game.renderHeroSelect()">üîÅ –°–º–µ–Ω–∏—Ç—å –≥–µ—Ä–æ—è</button>
                </div>

                <!-- –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π -->
                <div class="battle-log" id="battle-log"></div>
            </div>
        `;

        if (this.battleActive) {
            this.renderBattleScreen();
        }
    }

    // –†–µ–Ω–¥–µ—Ä –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
    renderMapSelection() {
        if (this.currentMap) {
            return `
                <div class="map-info">
                    <div class="map-image-large">
                        <img src="${this.currentMap.image}" alt="${this.currentMap.name}">
                    </div>
                    <h4>${this.currentMap.name}</h4>
                    <p>${this.currentMap.description}</p>
                    <div class="map-multiplier">
                        –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∏–ª—ã: x${this.currentMap.multiplier}
                    </div>
                    <button class="btn-secondary" onclick="game.showMapSelection()">–°–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É</button>
                </div>
            `;
        } else {
            return `
                <div class="map-info">
                    <div class="map-image-large">
                        <div style="text-align: center; padding: 40px; color: rgba(255,255,255,0.5);">
                            <div style="font-size: 3em; margin-bottom: 10px;">üó∫Ô∏è</div>
                            <div>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É</div>
                        </div>
                    </div>
                    <button class="btn-primary" onclick="game.showMapSelection()">–í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É</button>
                </div>
            `;
        }
    }

    // –†–µ–Ω–¥–µ—Ä –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
    renderLocationSelection() {
        if (this.currentLocation) {
            return `
                <div class="location-info">
                    <div class="location-image-large">
                        <img src="${this.currentLocation.image}" alt="${this.currentLocation.name}">
                    </div>
                    <h4>${this.currentLocation.name} (–£—Ä. ${this.currentLocation.level})</h4>
                    <p>${this.currentLocation.description}</p>
                    <div class="location-stats">
                        <div>–ú–æ–Ω—Å—Ç—Ä—ã: ‚Ññ${this.currentLocation.monsterRange[0]}-${this.currentLocation.monsterRange[1]}</div>
                        <div>–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: ${(this.currentLocation.artifactChance * 100).toFixed(2)}%</div>
                        <div>–†–µ–ª–∏–∫–≤–∏–∏: ${(this.currentLocation.relicChance * 100).toFixed(2)}%</div>
                    </div>
                    <button class="btn-secondary" onclick="game.showLocationSelection()">–°–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é</button>
                </div>
            `;
        } else {
            return `
                <div class="location-info">
                    <div class="location-image-large">
                        <div style="text-align: center; padding: 40px; color: rgba(255,255,255,0.5);">
                            <div style="font-size: 3em; margin-bottom: 10px;">üìç</div>
                            <div>–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</div>
                        </div>
                    </div>
                    <button class="btn-primary" onclick="game.showLocationSelection()">–í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é</button>
                </div>
            `;
        }
    }

    // –†–µ–Ω–¥–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞/–Ω–∞–≥—Ä–∞–¥—ã
    renderMonsterRewardColumn() {
        if (this.showReward) {
            return this.renderRewardDisplay();
        } else if (this.currentMonster) {
            const monsterDisplay = this.renderMonsterDisplay();
            setTimeout(() => {
                this.showMonsterActions();
            }, 100);
            return monsterDisplay;
        } else {
            return `
                <div class="monster-info">
                    <div class="monster-image-large">
                        <div style="text-align: center; padding: 40px; color: rgba(255,255,255,0.5);">
                            <div style="font-size: 3em; margin-bottom: 10px;">‚öîÔ∏è</div>
                            <div>–í—Å—Ç—Ä–µ—Ç—å—Ç–µ –º–æ–Ω—Å—Ç—Ä–∞</div>
                        </div>
                    </div>
                </div>
            `;
        }
    }

    // –†–µ–Ω–¥–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã
    renderRewardDisplay() {
        return `
            <div class="reward-info">
                <div class="reward-image">
                    üí∞
                </div>
                <div style="text-align: center; margin-top: 10px;">
                    <h4>üéâ –ü–û–ë–ï–î–ê!</h4>
                    <p>–ü–æ–ª—É—á–µ–Ω–æ: ${this.lastReward} –∑–æ–ª–æ—Ç–∞</p>
                    <button class="btn-primary" onclick="game.hideReward()">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
                </div>
            </div>
        `;
    }

    // –†–µ–Ω–¥–µ—Ä –º–æ–Ω—Å—Ç—Ä–∞
    renderMonsterDisplay() {
        if (!this.currentMonster) return '';
        
        const stats = this.calculateHeroStats(this.currentHero);
        const powerComparison = stats.power >= this.currentMonster.power ? '‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û' : '‚ö†Ô∏è –†–ò–°–ö';

        return `
            <div class="monster-info">
                <div class="monster-image-large">
                    <img src="${this.currentMonster.image}" alt="${this.currentMonster.name}">
                </div>
                <h4>${this.currentMonster.name}</h4>
                <p>${this.currentMonster.description}</p>
                
                <div class="stats-grid" style="grid-template-columns: 1fr 1fr;">
                    <div class="stat-card">
                        <div>‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ</div>
                        <div class="stat-value">${this.currentMonster.health}</div>
                    </div>
                    <div class="stat-card">
                        <div>‚öîÔ∏è –£—Ä–æ–Ω</div>
                        <div class="stat-value">${this.currentMonster.damage}</div>
                    </div>
                    <div class="stat-card">
                        <div>üõ°Ô∏è –ë—Ä–æ–Ω—è</div>
                        <div class="stat-value">${this.currentMonster.armor}</div>
                    </div>
                    <div class="stat-card">
                        <div>üåü –ú–æ—â—å</div>
                        <div class="stat-value">${this.currentMonster.power}</div>
                    </div>
                </div>
                
                <div style="text-align: center; margin: 10px 0;">
                    <p><strong>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:</strong> ${powerComparison}</p>
                    <p>üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${this.currentMonster.reward} –∑–æ–ª–æ—Ç–∞</p>
                </div>
            </div>
        `;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã
    showMapSelection() {
        const mapsHTML = this.maps.map(map => `
            <div class="map-option ${map.unlocked ? '' : 'locked'}" 
                 onclick="${map.unlocked ? `game.selectMap(${map.id})` : ''}">
                <div class="map-option-image">
                    <img src="${map.image}" alt="${map.name}">
                    ${!map.unlocked ? '<div class="locked-overlay">üîí</div>' : ''}
                </div>
                <div class="map-option-info">
                    <strong>${map.name}</strong>
                    <div>${map.description}</div>
                    <small>–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x${map.multiplier}</small>
                    ${!map.unlocked ? '<small class="locked-text">–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ</small>' : ''}
                </div>
            </div>
        `).join('');

        const container = document.getElementById('app');
        container.innerHTML += `
            <div class="screen active" id="screen-map-select">
                <h3 class="text-center">üó∫Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É</h3>
                <div class="maps-grid">
                    ${mapsHTML}
                </div>
                <div class="action-buttons">
                    <button class="btn-secondary" onclick="game.renderHeroScreen()">‚Üê –ù–∞–∑–∞–¥ –∫ –≥–µ—Ä–æ—é</button>
                </div>
            </div>
        `;

        this.showScreen('map-select');
    }

    // –í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã
    selectMap(mapId) {
        this.currentMap = this.maps.find(m => m.id === mapId);
        this.addToLog(`üó∫Ô∏è –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞: ${this.currentMap.name}`);
        this.renderHeroScreen();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏
    showLocationSelection() {
        if (!this.currentMap) {
            this.addToLog('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É');
            return;
        }

        const locationsHTML = this.locations.map(location => `
            <div class="location-option" onclick="game.selectLocation(${location.level})">
                <div class="location-option-image">
                    <img src="${location.image}" alt="${location.name}">
                </div>
                <div class="location-option-info">
                    <strong>${location.name} (–£—Ä. ${location.level})</strong>
                    <div>${location.description}</div>
                    <small>–ú–æ–Ω—Å—Ç—Ä—ã: ‚Ññ${location.monsterRange[0]}-${location.monsterRange[1]}</small>
                </div>
            </div>
        `).join('');

        const container = document.getElementById('app');
        container.innerHTML += `
            <div class="screen active" id="screen-location-select">
                <h3 class="text-center">üìç –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</h3>
                <div class="locations-grid">
                    ${locationsHTML}
                </div>
                <div class="action-buttons">
                    <button class="btn-secondary" onclick="game.renderHeroScreen()">‚Üê –ù–∞–∑–∞–¥ –∫ –≥–µ—Ä–æ—é</button>
                </div>
            </div>
        `;

        this.showScreen('location-select');
    }

    // –í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏
    selectLocation(level) {
        this.currentLocation = this.locations.find(l => l.level === level);
        this.addToLog(`üìç –í—ã–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: ${this.currentLocation.name} (–£—Ä. ${level})`);
        this.renderHeroScreen();
    }

    // –ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ
    startAdventure() {
        if (!this.currentMap || !this.currentLocation) {
            this.addToLog('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏ –ª–æ–∫–∞—Ü–∏—é');
            return;
        }

        this.addToLog(`üöÄ –ù–∞—á–∞—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –∫–∞—Ä—Ç–µ ${this.currentMap.name}, –ª–æ–∫–∞—Ü–∏—è: ${this.currentLocation.name}`);
        this.encounterMonster();
    }

    // –í—Å—Ç—Ä–µ—á–∞ —Å –º–æ–Ω—Å—Ç—Ä–æ–º
    encounterMonster() {
        if (!this.currentLocation || !this.currentMap) return;

        const [minId, maxId] = this.currentLocation.monsterRange;
        const monsterId = Math.floor(Math.random() * (maxId - minId + 1)) + minId;
        
        let monster = this.monsters.find(m => m.id === monsterId);
        if (!monster) {
            monster = this.monsters[0]; // fallback
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫–∞—Ä—Ç—ã
        this.currentMonster = {
            ...monster,
            health: Math.round(monster.health * this.currentMap.multiplier),
            damage: Math.round(monster.damage * this.currentMap.multiplier),
            armor: Math.round(monster.armor * this.currentMap.multiplier),
            reward: Math.round(monster.reward * this.currentMap.multiplier),
            power: Math.round(monster.power * this.currentMap.multiplier)
        };

        this.addToLog(`üé≠ –í—Å—Ç—Ä–µ—á–µ–Ω: ${this.currentMonster.name}`);
        this.renderHeroScreen();
        this.showMonsterActions();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–æ–Ω—Å—Ç—Ä–∞
    showMonsterActions() {
        if (!this.currentMonster) return;
        
        const container = document.getElementById('app');
        const oldActions = container.querySelector('.monster-actions');
        if (oldActions) {
            oldActions.remove();
        }
        
        const actionsHTML = `
            <div class="monster-actions" style="margin-top: 15px;">
                <button class="btn-primary" onclick="game.startBattle()">‚öîÔ∏è –°—Ä–∞–∂–∞—Ç—å—Å—è</button>
                <button class="btn-secondary" onclick="game.attemptStealth()">üëª –°–∫—Ä—ã—Ç—å—Å—è</button>
                <button class="btn-secondary" onclick="game.attemptEscape()">üèÉ –£–±–µ–∂–∞—Ç—å</button>
            </div>
        `;
        
        container.innerHTML += actionsHTML;
    }

    // ========== –°–ò–°–¢–ï–ú–ê –ë–û–Ø ==========

    // –ù–∞—á–∞—Ç—å –±–æ–π
    startBattle() {
        if (!this.currentMonster || this.battleActive) return;
        
        this.battleActive = true;
        this.battleRound = 0;
        this.battleLog = [];
        
        if (!this.currentHero.currentHealth) {
            const stats = this.calculateHeroStats(this.currentHero);
            this.currentHero.currentHealth = stats.health;
        }
        
        this.currentMonster.currentHealth = this.currentMonster.health;
        
        this.addToLog(`‚öîÔ∏è –ù–∞—á–∞–ª–æ –±–æ—è —Å ${this.currentMonster.name}!`);
        this.renderBattleScreen();
    }

    // –†–µ–Ω–¥–µ—Ä —ç–∫—Ä–∞–Ω–∞ –±–æ—è
    renderBattleScreen() {
        if (!this.battleActive) return;
        
        const stats = this.calculateHeroStats(this.currentHero);
        const heroHealthPercent = (this.currentHero.currentHealth / stats.maxHealth) * 100;
        const monsterHealthPercent = (this.currentMonster.currentHealth / this.currentMonster.health) * 100;
        
        const battleHTML = `
            <div class="battle-screen">
                <div class="battle-header">
                    <h3>‚öîÔ∏è –ë–û–ô</h3>
                    <div class="battle-round">–†–∞—É–Ω–¥: ${this.battleRound}</div>
                </div>
                
                <div class="battle-combatants">
                    <!-- –ì–µ—Ä–æ–π -->
                    <div class="combatant hero-combatant">
                        <div class="combatant-image">
                            <img src="${this.getRaceImage(this.currentHero.race)}" alt="${this.currentHero.race}">
                        </div>
                        <div class="combatant-info">
                            <h4>${this.currentHero.name}</h4>
                            <div class="health-bar">
                                <div class="health-bar-fill" style="width: ${heroHealthPercent}%"></div>
                                <div class="health-bar-text">
                                    ${Math.ceil(this.currentHero.currentHealth)}/${stats.maxHealth}
                                </div>
                            </div>
                            <div class="combatant-stats">
                                <span>‚öîÔ∏è ${stats.damage}</span>
                                <span>üõ°Ô∏è ${stats.armor}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="vs">VS</div>
                    
                    <!-- –ú–æ–Ω—Å—Ç—Ä -->
                    <div class="combatant monster-combatant">
                        <div class="combatant-image">
                            <img src="${this.currentMonster.image}" alt="${this.currentMonster.name}">
                        </div>
                        <div class="combatant-info">
                            <h4>${this.currentMonster.name}</h4>
                            <div class="health-bar">
                                <div class="health-bar-fill" style="width: ${monsterHealthPercent}%"></div>
                                <div class="health-bar-text">
                                    ${Math.ceil(this.currentMonster.currentHealth)}/${this.currentMonster.health}
                                </div>
                            </div>
                            <div class="combatant-stats">
                                <span>‚öîÔ∏è ${this.currentMonster.damage}</span>
                                <span>üõ°Ô∏è ${this.currentMonster.armor}</span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- –õ–æ–≥ –±–æ—è -->
                <div class="battle-log-container">
                    ${this.battleLog.map(entry => `
                        <div class="battle-log-entry ${entry.type || ''}">${entry.message}</div>
                    `).join('')}
                </div>
                
                <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
                <div class="battle-actions">
                    <button class="btn-battle-attack" onclick="game.battleAttack()">
                        ‚öîÔ∏è –ù–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä
                    </button>
                    <button class="btn-battle-escape" onclick="game.attemptEscapeFromBattle()">
                        üèÉ –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–±–µ–∂–∞—Ç—å
                    </button>
                </div>
            </div>
        `;
        
        const container = document.getElementById('app');
        const existingBattle = container.querySelector('.battle-screen');
        if (existingBattle) {
            existingBattle.remove();
        }
        container.innerHTML += battleHTML;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—ã
    getRaceImage(race) {
        const raceImages = {
            human: 'images/races/human.png',
            elf: 'images/races/elf.png',
            dwarf: 'images/races/dwarf.png',
            ork: 'images/races/ork.png',
            dragon: 'images/races/dragon.png',
            halfling: 'images/races/halfling.png',
            fairy: 'images/races/fairy.png',
            laitar: 'images/races/laitar.png'
        };
        return raceImages[race] || 'images/races/human.png';
    }

    // –ê—Ç–∞–∫–∞ –≤ –±–æ—é
    battleAttack() {
        if (!this.battleActive) return;
        
        this.battleRound++;
        const stats = this.calculateHeroStats(this.currentHero);
        
        // –•–æ–¥ –≥–µ—Ä–æ—è
        const heroDamage = Math.max(1, stats.damage - this.currentMonster.armor);
        this.currentMonster.currentHealth -= heroDamage;
        
        this.addBattleLog({
            message: `üó°Ô∏è ${this.currentHero.name} –Ω–∞–Ω–æ—Å–∏—Ç ${heroDamage} —É—Ä–æ–Ω–∞!`,
            type: 'hero-attack'
        });
        
        if (this.currentMonster.currentHealth <= 0) {
            this.endBattle(true);
            return;
        }
        
        // –•–æ–¥ –º–æ–Ω—Å—Ç—Ä–∞
        const monsterDamage = Math.max(1, this.currentMonster.damage - stats.armor);
        this.currentHero.currentHealth -= monsterDamage;
        
        this.addBattleLog({
            message: `üëπ ${this.currentMonster.name} –Ω–∞–Ω–æ—Å–∏—Ç ${monsterDamage} —É—Ä–æ–Ω–∞!`,
            type: 'monster-attack'
        });
        
        if (this.currentHero.currentHealth <= 0) {
            this.endBattle(false);
            return;
        }
        
        this.saveGame();
        this.renderBattleScreen();
    }

    // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ –±–æ—è
    addBattleLog(entry) {
        this.battleLog.push(entry);
        if (this.battleLog.length > 10) {
            this.battleLog.shift();
        }
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—è
    endBattle(victory) {
        if (victory) {
            const reward = this.currentMonster.reward;
            this.currentHero.gold += reward;
            
            const baseExperience = Math.max(10, Math.floor(this.currentMonster.power / 2));
            const experienceGained = baseExperience;
            
            this.addExperience(experienceGained);
            
            this.addBattleLog({
                message: `üéâ –ü–û–ë–ï–î–ê! –ü–æ–ª—É—á–µ–Ω–æ ${reward} –∑–æ–ª–æ—Ç–∞ –∏ ${experienceGained} –æ–ø—ã—Ç–∞`,
                type: 'victory'
            });
            
            this.addToLog(`üéØ –ü–æ–±–µ–∂–¥–µ–Ω ${this.currentMonster.name}! –ü–æ–ª—É—á–µ–Ω–æ ${reward} –∑–æ–ª–æ—Ç–∞ –∏ ${experienceGained} –æ–ø—ã—Ç–∞`);
            
            this.checkSpecialDrops();
            
        } else {
            this.addBattleLog({
                message: `üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï! –ì–µ—Ä–æ–π –ø–æ–≤–µ—Ä–∂–µ–Ω`,
                type: 'defeat'
            });
            
            this.addToLog(`üí• –ü—Ä–æ–∏–≥—Ä–∞–Ω –±–æ–π —Å ${this.currentMonster.name}`);
        }
        
        this.battleActive = false;
        this.currentMonster = null;
        this.selectedMovement = null;
        
        setTimeout(() => {
            this.renderHeroScreen();
        }, 3000);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä–æ–ø–∞ –æ—Å–æ–±—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    checkSpecialDrops() {
        if (!this.currentLocation) return;
        
        if (Math.random() < this.currentLocation.artifactChance) {
            this.dropArtifact();
        }
        
        if (Math.random() < this.currentLocation.relicChance) {
            this.dropRelic();
        }
    }

    // –î—Ä–æ–ø –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    dropArtifact() {
        this.addToLog(`‚ú® –ù–∞–π–¥–µ–Ω —Ä–µ–¥–∫–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç!`);
    }

    // –î—Ä–æ–ø —Ä–µ–ª–∏–∫–≤–∏–∏
    dropRelic() {
        this.addToLog(`üåü –ù–∞–π–¥–µ–Ω–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Ä–µ–ª–∏–∫–≤–∏—è!`);
    }

    // –ü–æ–±–µ–≥ –∏–∑ –±–æ—è
    attemptEscapeFromBattle() {
        const stats = this.calculateHeroStats(this.currentHero);
        const escapeRoll = this.rollDice(stats.skills.escape, 10);
        
        if (escapeRoll.success) {
            this.addBattleLog({
                message: `üèÉ –£—Å–ø–µ—à–Ω—ã–π –ø–æ–±–µ–≥ –∏–∑ –±–æ—è!`,
                type: 'escape'
            });
            this.battleActive = false;
            this.completeEncounter();
        } else {
            this.addBattleLog({
                message: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å! –ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç`,
                type: 'escape-failed'
            });
            const monsterDamage = Math.max(1, this.currentMonster.damage - stats.armor);
            this.currentHero.currentHealth -= monsterDamage;
            
            if (this.currentHero.currentHealth <= 0) {
                this.endBattle(false);
            } else {
                this.saveGame();
                this.renderBattleScreen();
            }
        }
    }

    // ========== –ö–û–ù–ï–¶ –°–ò–°–¢–ï–ú–´ –ë–û–Ø ==========

    // –ü–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä—ã—Ç—å—Å—è
    attemptStealth() {
        const stats = this.calculateHeroStats(this.currentHero);
        const stealthRoll = this.rollDice(stats.skills.stealth, 8);
        
        if (stealthRoll.success) {
            this.addToLog(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã–ª–∏—Å—å –æ—Ç ${this.currentMonster.name}!`);
        } else {
            this.addToLog(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å—Å—è! –ú–æ–Ω—Å—Ç—Ä –≤–∞—Å –∑–∞–º–µ—Ç–∏–ª`);
        }
        
        this.completeEncounter();
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–±–µ–≥–∞
    attemptEscape() {
        const stats = this.calculateHeroStats(this.currentHero);
        const escapeRoll = this.rollDice(stats.skills.escape, 10);
        
        if (escapeRoll.success) {
            this.addToLog(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–±–µ–∂–∞–ª–∏ –æ—Ç ${this.currentMonster.name}!`);
        } else {
            this.addToLog(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å! –ü—Ä–∏–¥—ë—Ç—Å—è —Å—Ä–∞–∂–∞—Ç—å—Å—è`);
            this.startBattle();
            return;
        }
        
        this.completeEncounter();
    }

    // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤
    rollDice(bonusDice, targetNumber) {
        let total = 0;
        let rolls = [];
        
        const baseRoll = Math.floor(Math.random() * 6) + 1;
        rolls.push(baseRoll);
        total += baseRoll;
        
        for (let i = 0; i < bonusDice; i++) {
            const bonusRoll = Math.floor(Math.random() * 6) + 1;
            rolls.push(bonusRoll);
            total += bonusRoll;
        }
        
        const success = total >= targetNumber;
        
        this.addToLog(`üé≤ –ë—Ä–æ—Å–æ–∫: [${rolls.join(', ')}] = ${total} (–Ω—É–∂–Ω–æ ${targetNumber}+) - ${success ? '–£–°–ü–ï–•' : '–ù–ï–£–î–ê–ß–ê'}`);
        
        return { success, total, rolls };
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
    completeEncounter() {
        this.currentMonster = null;
        this.selectedMovement = null;
        
        const container = document.getElementById('app');
        const monsterActions = container.querySelector('.monster-actions');
        if (monsterActions) {
            monsterActions.remove();
        }
        
        this.addToLog(`üèÅ –í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
        this.saveGame();
        setTimeout(() => {
            this.renderHeroScreen();
        }, 2000);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É
    showReward(amount) {
        this.showReward = true;
        this.lastReward = amount;
        this.renderHeroScreen();
    }

    // –°–∫—Ä—ã—Ç—å –Ω–∞–≥—Ä–∞–¥—É
    hideReward() {
        this.showReward = false;
        this.lastReward = 0;
        
        const container = document.getElementById('app');
        const monsterActions = container.querySelector('.monster-actions');
        if (monsterActions) {
            monsterActions.remove();
        }
        
        this.renderHeroScreen();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω
    showMerchant() {
        const availableItems = this.items.filter(item => item.requiredLevel <= (this.currentHero?.level || 1));
        
        const merchantHTML = availableItems.map(item => `
            <div class="merchant-item">
                <div class="merchant-item-image">
                    <img src="${item.image}" alt="${item.name}" onerror="this.style.display='none'">
                </div>
                <div class="merchant-item-info">
                    <strong>${item.name}</strong>
                    <div class="item-stats">
                        ${item.fixed_damage ? `<span>‚öîÔ∏è –£—Ä–æ–Ω: +${item.fixed_damage}</span>` : ''}
                        ${item.fixed_armor ? `<span>üõ°Ô∏è –ë—Ä–æ–Ω—è: +${item.fixed_armor}</span>` : ''}
                        ${item.heal ? `<span>‚ù§Ô∏è –õ–µ—á–µ–Ω–∏–µ: +${item.heal}</span>` : ''}
                        ${item.bonus ? `<span>üéØ ${this.formatBonus(item.bonus)}</span>` : ''}
                    </div>
                    <div class="item-price">
                        <span>üí∞ –ö—É–ø–∏—Ç—å: ${item.price}</span>
                        <span>üí∏ –ü—Ä–æ–¥–∞—Ç—å: ${item.sellPrice}</span>
                    </div>
                    <small>${item.description}</small>
                    <div class="merchant-actions">
                        <button class="btn-primary" onclick="game.buyItem(${item.id})">–ö—É–ø–∏—Ç—å</button>
                        ${this.currentHero.inventory.includes(item.id) ? 
                            `<button class="btn-secondary" onclick="game.sellItem(${item.id})">–ü—Ä–æ–¥–∞—Ç—å</button>` : 
                            ''
                        }
                    </div>
                </div>
            </div>
        `).join('');

        const container = document.getElementById('app');
        container.innerHTML += `
            <div class="screen active" id="screen-merchant">
                <h3 class="text-center">üè™ –ú–∞–≥–∞–∑–∏–Ω</h3>
                <div class="hero-info" style="margin-bottom: 15px;">
                    <div style="display: flex; justify-content: space-between;">
                        <span>üí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: ${this.currentHero?.gold || 0}</span>
                        <span>üéí –°–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç: ${10 - (this.currentHero?.inventory?.length || 0)}/10</span>
                    </div>
                </div>
                <div class="merchant-list">
                    ${merchantHTML || '<div class="text-center">–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç</div>'}
                </div>
                <div class="action-buttons">
                    <button class="btn-secondary" onclick="game.renderHeroScreen()">‚Üê –ù–∞–∑–∞–¥ –∫ –≥–µ—Ä–æ—é</button>
                </div>
            </div>
        `;

        this.showScreen('merchant');
    }

    // –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    buyItem(itemId) {
        const item = this.items.find(i => i.id === itemId);
        if (!item) return;

        if (this.currentHero.gold < item.price) {
            this.addToLog(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${item.name}`);
            return;
        }

        if (this.currentHero.inventory.length >= 10) {
            this.addToLog(`‚ùå –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω! –ú–∞–∫—Å–∏–º—É–º 10 –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);
            return;
        }

        if (this.currentHero.inventory.includes(itemId)) {
            this.addToLog(`‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å ${item.name}`);
            return;
        }

        this.currentHero.gold -= item.price;
        this.currentHero.inventory.push(itemId);
        
        this.addToLog(`üõí –ö—É–ø–ª–µ–Ω–æ: ${item.name} –∑–∞ ${item.price} –∑–æ–ª–æ—Ç–∞`);
        this.saveGame();
        this.showMerchant();
    }

    // –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
    sellItem(itemId) {
        const item = this.items.find(i => i.id === itemId);
        if (!item) return;

        if (!this.currentHero.inventory.includes(itemId)) {
            this.addToLog(`‚ùå –ü—Ä–µ–¥–º–µ—Ç ${item.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ`);
            return;
        }

        this.currentHero.inventory = this.currentHero.inventory.filter(id => id !== itemId);
        this.currentHero.gold += item.sellPrice;
        
        if (this.currentHero.equipment.main_hand === itemId) {
            this.currentHero.equipment.main_hand = null;
        }
        if (this.currentHero.equipment.chest === itemId) {
            this.currentHero.equipment.chest = null;
        }

        this.addToLog(`üí∞ –ü—Ä–æ–¥–∞–Ω–æ: ${item.name} –∑–∞ ${item.sellPrice} –∑–æ–ª–æ—Ç–∞`);
        this.saveGame();
        this.showMerchant();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    showInventory() {
        if (!this.currentHero) return;

        const inventoryHTML = this.currentHero.inventory.map(itemId => {
            const item = this.items.find(i => i.id === itemId);
            if (!item) return '';
            
            const isEquipped = Object.values(this.currentHero.equipment).includes(itemId);
            
            return `
                <div class="inventory-item" onclick="game.equipItem(${itemId})">
                    <div class="inventory-item-image">
                        <img src="${item.image}" alt="${item.name}">
                    </div>
                    <strong>${item.name}</strong>
                    <div>${this.formatBonus(item.bonus)}</div>
                    <div>–£—Ä–æ–Ω: +${item.fixed_damage || 0} | –ë—Ä–æ–Ω—è: +${item.fixed_armor || 0}</div>
                    ${isEquipped ? '<small>‚úì –ù–∞–¥–µ—Ç–æ</small>' : '<small>üì¶ –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ</small>'}
                </div>
            `;
        }).join('');

        const container = document.getElementById('app');
        container.innerHTML += `
            <div class="screen active" id="screen-inventory">
                <h3 class="text-center">üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</h3>
                <div class="inventory-grid">
                    ${inventoryHTML || '<div class="text-center">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</div>'}
                </div>
                <div class="action-buttons">
                    <button class="btn-secondary" onclick="game.renderHeroScreen()">‚Üê –ù–∞–∑–∞–¥ –∫ –≥–µ—Ä–æ—é</button>
                </div>
            </div>
        `;

        this.showScreen('inventory');
    }

    // –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
    equipItem(itemId) {
        const item = this.items.find(i => i.id === itemId);
        if (!item) return;

        if (item.type === 'potion') {
            this.usePotion(item);
            return;
        }

        const currentEquipped = this.currentHero.equipment[item.slot];
        if (currentEquipped) {
            if (!this.currentHero.inventory.includes(currentEquipped)) {
                this.currentHero.inventory.push(currentEquipped);
            }
        }

        this.currentHero.equipment[item.slot] = itemId;
        this.currentHero.inventory = this.currentHero.inventory.filter(id => id !== itemId);

        this.addToLog(`üéØ –ù–∞–¥–µ—Ç–æ: ${item.name}`);
        this.saveGame();
        this.renderHeroScreen();
    }

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–µ–ª—å–µ
    usePotion(item) {
        if (item.type !== 'potion') return;

        if (item.heal) {
            this.currentHero.baseHealth += item.heal;
            this.addToLog(`‚ù§Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${item.name} (+${item.heal} –∑–¥–æ—Ä–æ–≤—å—è)`);
        }

        this.currentHero.inventory = this.currentHero.inventory.filter(id => id !== item.id);
        
        this.saveGame();
        this.showInventory();
    }

    // –°–±—Ä–æ—Å –≥–µ—Ä–æ—è
    resetHero() {
        if (!this.currentHero) return;
        
        const confirmed = confirm("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≥–µ—Ä–æ—è?\n\n–í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.");
        
        if (!confirmed) {
            this.addToLog("‚ùå –°–±—Ä–æ—Å –≥–µ—Ä–æ—è –æ—Ç–º–µ–Ω–µ–Ω");
            return;
        }
        
        const baseConfig = {
            race: "human",
            class: "warrior", 
            saga: "golden_egg",
            baseHealth: 100,
            baseDamage: 20,
            baseArmor: 10,
            gold: 500,
            level: 1,
            experience: 0,
            inventory: [],
            equipment: {
                main_hand: null,
                chest: null
            }
        };
        
        const heroName = this.currentHero.name;
        const heroImage = this.currentHero.image;
        
        Object.assign(this.currentHero, baseConfig);
        this.currentHero.name = heroName;
        this.currentHero.image = heroImage;
        
        this.addToLog("üîÑ –ì–µ—Ä–æ–π —Å–±—Ä–æ—à–µ–Ω –∫ –±–∞–∑–æ–≤—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º");
        this.saveGame();
        this.renderHeroScreen();
    }

    // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª
    addToLog(message) {
        const log = document.getElementById('battle-log');
        if (log) {
            const entry = document.createElement('div');
            entry.className = 'log-entry';
            entry.textContent = message;
            log.appendChild(entry);
            log.scrollTop = log.scrollHeight;
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–∞
    formatBonus(bonus) {
        if (!bonus || bonus.type === 'none') return '–ù–µ—Ç –±–æ–Ω—É—Å–∞';
        
        const bonusNames = {
            'health_mult': '+% –∫ –∑–¥–æ—Ä–æ–≤—å—é',
            'damage_mult': '+% –∫ —É—Ä–æ–Ω—É', 
            'armor_mult': '+% –∫ –±—Ä–æ–Ω–µ',
            'gold_mult': '+% –∫ –∑–æ–ª–æ—Ç—É',
            'escape_bonus': '–ü–æ–±–µ–≥ +',
            'stealth_bonus': '–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å +',
            'luck_bonus': '–£–¥–∞—á–∞ +',
            'survival_bonus': '–í—ã–∂–∏–≤–∞–Ω–∏–µ +'
        };

        const value = bonus.type.includes('_mult') ? 
            Math.round(bonus.value * 100) : bonus.value;
            
        return bonusNames[bonus.type] ? 
            `${bonusNames[bonus.type]}${value}${bonus.type.includes('_mult') ? '%' : ''}` : 
            `–ë–æ–Ω—É—Å: ${value}`;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
    saveGame() {
        if (this.currentHero) {
            localStorage.setItem('heroGameSave', JSON.stringify({
                currentHeroId: this.currentHero.id,
                heroes: this.heroes,
                currentMap: this.currentMap,
                currentLocation: this.currentLocation,
                lastHealthUpdate: this.lastHealthUpdate,
                globalInventory: this.globalInventory
            }));
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    loadSave() {
        try {
            const save = localStorage.getItem('heroGameSave');
            if (save) {
                const data = JSON.parse(save);
                
                const savedHeroProgress = data.heroes || [];
                const currentHeroId = data.currentHeroId;
                
                const progressMap = new Map();
                savedHeroProgress.forEach(hero => {
                    progressMap.set(hero.id, {
                        gold: hero.gold,
                        level: hero.level,
                        experience: hero.experience,
                        inventory: hero.inventory,
                        equipment: hero.equipment,
                        currentHealth: hero.currentHealth,
                        unlocked: hero.unlocked
                    });
                });
                
                this.heroes = this.heroes.map(freshHero => {
                    const progress = progressMap.get(freshHero.id);
                    if (progress) {
                        return {
                            ...freshHero,
                            ...progress
                        };
                    }
                    return freshHero;
                });
                
                this.currentMap = data.currentMap || null;
                this.currentLocation = data.currentLocation || null;
                this.lastHealthUpdate = data.lastHealthUpdate || Date.now();
                this.globalInventory = data.globalInventory || [];
                
                if (currentHeroId) {
                    this.currentHero = this.heroes.find(h => h.id === currentHeroId);
                    if (this.currentHero) {
                        this.showScreen('main');
                        this.renderHeroScreen();
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–≥—Ä—ã
let game;
document.addEventListener('DOMContentLoaded', () => {
    game = new HeroGame();
});
