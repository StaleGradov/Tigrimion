// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã
class HeroGame {
    constructor() {
        this.heroes = [];
        this.items = [];
        this.monsters = [];
        this.locations = [];
        this.movementStyles = [];
        
        this.currentHero = null;
        this.currentScreen = 'hero-select';
        
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    async init() {
        await this.loadGameData();
        this.loadSave();
        this.renderHeroSelect();
        this.setupEventListeners();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
    async loadGameData() {
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –∑–¥–µ—Å—å –±—É–¥—É—Ç fetch –∑–∞–ø—Ä–æ—Å—ã
            // –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.heroes = [
                {
                    id: 1,
                    name: "–õ–µ–≥–æ–ª–∞—Å",
                    image: "images/heroes/argonat.webp",
                    race: "elf",
                    class: "archer",
                    saga: "vulkanor",
                    baseHealth: 90,
                    baseDamage: 22,
                    baseArmor: 8,
                    gold: 1000,
                    level: 3,
                    experience: 150,
                    inventory: [1, 2],
                    equipment: {
                        main_hand: null,
                        chest: null
                    }
                },
                {
                    id: 2,
                    name: "–ì–∏–º–ª–∏",
                    image: "images/heroes/argonat.webp", // –≤—Ä–µ–º–µ–Ω–Ω–æ —Ç–æ—Ç –∂–µ
                    race: "dwarf",
                    class: "warrior", 
                    saga: "golden_egg",
                    baseHealth: 120,
                    baseDamage: 18,
                    baseArmor: 15,
                    gold: 800,
                    level: 2,
                    experience: 80,
                    inventory: [3],
                    equipment: {
                        main_hand: null,
                        chest: null
                    }
                }
            ];

            this.items = [
                {
                    id: 1,
                    name: "–ú–µ—á –í—É–ª–∫–∞–Ω–æ—Ä–∞",
                    type: "weapon",
                    slot: "main_hand",
                    image: "images/items/weapons/vulkanor_sword.jpg",
                    icon: "images/items/icons/sword_icon.png",
                    rarity: "rare",
                    fixed_damage: 25,
                    bonus: {type: "damage_mult", value: 0.2},
                    price: 300,
                    requiredLevel: 3,
                    description: "–ú–µ—á, –≤—ã–∫–æ–≤–∞–Ω–Ω—ã–π –≤ –ª–∞–≤–æ–≤—ã—Ö –∫—É–∑–Ω–∏—Ü–∞—Ö –í—É–ª–∫–∞–Ω–æ—Ä–∞"
                },
                {
                    id: 2,
                    name: "–õ—É–∫ –¢–µ–Ω–µ–π",
                    type: "weapon",
                    slot: "main_hand",
                    image: "images/items/weapons/shadow_bow.jpg",
                    icon: "images/items/icons/bow_icon.png", 
                    rarity: "uncommon",
                    fixed_damage: 20,
                    bonus: {type: "stealth_bonus", value: 1},
                    price: 250,
                    requiredLevel: 2,
                    description: "–ë–µ—Å—à—É–º–Ω—ã–π –ª—É–∫ –¥–ª—è —Å–∫—Ä—ã—Ç–Ω—ã—Ö –∞—Ç–∞–∫"
                },
                {
                    id: 3,
                    name: "–î–æ—Å–ø–µ—Ö –ì–Ω–æ–º–æ–≤",
                    type: "armor",
                    slot: "chest",
                    image: "images/items/armor/dwarf_armor.jpg",
                    icon: "images/items/icons/armor_icon.png",
                    rarity: "rare",
                    fixed_armor: 15,
                    bonus: {type: "health_mult", value: 0.3},
                    price: 400,
                    requiredLevel: 3,
                    description: "–ü—Ä–æ—á–Ω–∞—è –±—Ä–æ–Ω—è, —É–∫—Ä–∞—à–µ–Ω–Ω–∞—è —Ä—É–Ω–∞–º–∏"
                }
            ];

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    // –ë–æ–Ω—É—Å—ã —Ä–∞—Å, –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏ —Å–∞–≥
    getBonuses() {
        return {
            races: {
                elf: { bonus: {type: "escape_bonus", value: 1}, name: "–≠–ª—å—Ñ", description: "–ü—Ä–æ–≤–æ—Ä–Ω—ã–π –∏ –Ω–µ—É–ª–æ–≤–∏–º—ã–π" },
                dwarf: { bonus: {type: "health_mult", value: 0.3}, name: "–ì–Ω–æ–º", description: "–í—ã–Ω–æ—Å–ª–∏–≤—ã–π –∏ –∫—Ä–µ–ø–∫–∏–π" }
            },
            classes: {
                archer: { bonus: {type: "damage_mult", value: 0.2}, name: "–õ—É—á–Ω–∏–∫", description: "–ú–∞—Å—Ç–µ—Ä –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è" },
                warrior: { bonus: {type: "damage_mult", value: 0.2}, name: "–í–æ–∏–Ω", description: "–°–∏–ª—å–Ω—ã–π –∏ –æ—Ç–≤–∞–∂–Ω—ã–π" }
            },
            sagas: {
                vulkanor: { bonus: {type: "damage_mult", value: 0.2}, name: "–í—É–ª–∫–∞–Ω–æ—Ä", description: "–ü—Ä–æ—à–µ–¥—à–∏–π –æ–≥–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è" },
                golden_egg: { bonus: {type: "health_mult", value: 0.3}, name: "–ó–æ–ª–æ—Ç–æ–µ –Ø–π—Ü–æ", description: "–û–±–ª–∞–¥–∞—Ç–µ–ª—å –¥—Ä–µ–≤–Ω–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞" }
            }
        };
    }

    // –†–∞—Å—á—ë—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–µ—Ä–æ—è
    calculateHeroStats(hero) {
        const bonuses = this.getBonuses();
        
        // –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å—ã
        const raceBonus = bonuses.races[hero.race]?.bonus || {type: "none", value: 0};
        const classBonus = bonuses.classes[hero.class]?.bonus || {type: "none", value: 0};
        const sagaBonus = bonuses.sagas[hero.saga]?.bonus || {type: "none", value: 0};
        
        // –ë–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        let weaponBonus = {type: "none", value: 0};
        let armorBonus = {type: "none", value: 0};
        
        if (hero.equipment.main_hand) {
            const weapon = this.items.find(item => item.id === hero.equipment.main_hand);
            weaponBonus = weapon?.bonus || {type: "none", value: 0};
        }
        
        if (hero.equipment.chest) {
            const armor = this.items.find(item => item.id === hero.equipment.chest);
            armorBonus = armor?.bonus || {type: "none", value: 0};
        }

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±–æ–Ω—É—Å—ã
        const allBonuses = [raceBonus, classBonus, sagaBonus, weaponBonus, armorBonus];

        // –ë–∞–∑–∞
        let health = hero.baseHealth;
        let damage = hero.baseDamage;
        let armor = hero.baseArmor;

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        if (hero.equipment.main_hand) {
            const weapon = this.items.find(item => item.id === hero.equipment.main_hand);
            damage += weapon?.fixed_damage || 0;
        }
        
        if (hero.equipment.chest) {
            const armorItem = this.items.find(item => item.id === hero.equipment.chest);
            armor += armorItem?.fixed_armor || 0;
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏
        allBonuses.forEach(bonus => {
            switch(bonus.type) {
                case 'health_mult':
                    health *= (1 + bonus.value);
                    break;
                case 'damage_mult':
                    damage *= (1 + bonus.value);
                    break;
                case 'armor_mult':
                    armor *= (1 + bonus.value);
                    break;
            }
        });

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ—á—å
        const power = Math.round((health / 10) + (damage * 1.5) + (armor * 2));

        // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–≤—ã–∫–∏
        const skills = {
            escape: 0,
            stealth: 0,
            luck: 0,
            survival: 0,
            wealth: 0
        };

        allBonuses.forEach(bonus => {
            if (bonus.type.includes('_bonus')) {
                const skill = bonus.type.replace('_bonus', '');
                if (skills.hasOwnProperty(skill)) {
                    skills[skill] += bonus.value;
                }
            }
        });

        return {
            health: Math.round(health),
            damage: Math.round(damage),
            armor: Math.round(armor),
            power: power,
            skills: skills,
            bonuses: {
                race: raceBonus,
                class: classBonus,
                saga: sagaBonus,
                weapon: weaponBonus,
                armor: armorBonus
            }
        };
    }

    // –†–µ–Ω–¥–µ—Ä –≤—ã–±–æ—Ä–∞ –≥–µ—Ä–æ—è
    renderHeroSelect() {
        const container = document.getElementById('app');
        container.innerHTML = `
            <div class="screen active" id="screen-hero-select">
                <h2 class="text-center">–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è</h2>
                <div class="hero-list">
                    ${this.heroes.map(hero => `
                        <div class="hero-option" onclick="game.selectHero(${hero.id})">
                            <strong>${hero.name}</strong>
                            <div>–£—Ä. ${hero.level} | üí∞ ${hero.gold}</div>
                            <small>${this.getBonuses().races[hero.race]?.name} - ${this.getBonuses().classes[hero.class]?.name}</small>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }

    // –í—ã–±–æ—Ä –≥–µ—Ä–æ—è
    selectHero(heroId) {
        this.currentHero = this.heroes.find(h => h.id === heroId);
        this.showScreen('main');
        this.renderHeroScreen();
        this.saveGame();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω
    showScreen(screenName) {
        this.currentScreen = screenName;
    }

    // –†–µ–Ω–¥–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –≥–µ—Ä–æ—è
    renderHeroScreen() {
        if (!this.currentHero) return;

        const stats = this.calculateHeroStats(this.currentHero);
        const bonuses = this.getBonuses();

        const container = document.getElementById('app');
        container.innerHTML = `
            <div class="screen active" id="screen-main">
                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥–µ—Ä–æ—è -->
                <div class="hero-header">
                    <div class="hero-image">
                        <img src="${this.currentHero.image}" alt="${this.currentHero.name}">
                    </div>
                    <div class="hero-info">
                        <h1>${this.currentHero.name}</h1>
                        <div class="hero-stats">
                            <span>–£—Ä. ${this.currentHero.level}</span>
                            <span>üí∞ ${this.currentHero.gold}</span>
                            <span>‚ö° ${this.currentHero.experience}/100</span>
                        </div>
                    </div>
                </div>

                <!-- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div>‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ</div>
                        <div class="stat-value">${stats.health}</div>
                    </div>
                    <div class="stat-card">
                        <div>‚öîÔ∏è –£—Ä–æ–Ω</div>
                        <div class="stat-value">${stats.damage}</div>
                    </div>
                    <div class="stat-card">
                        <div>üõ°Ô∏è –ë—Ä–æ–Ω—è</div>
                        <div class="stat-value">${stats.armor}</div>
                    </div>
                    <div class="stat-card">
                        <div>üåü –ú–æ—â—å</div>
                        <div class="stat-value">${stats.power}</div>
                    </div>
                </div>

                <!-- –ë–æ–Ω—É—Å—ã -->
                <div class="bonuses-section">
                    <h3>üéØ –ë–æ–Ω—É—Å—ã:</h3>
                    <div class="bonus-item">
                        <strong>–†–∞—Å–∞:</strong> ${bonuses.races[this.currentHero.race]?.name} 
                        (${this.formatBonus(stats.bonuses.race)})
                    </div>
                    <div class="bonus-item">
                        <strong>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</strong> ${bonuses.classes[this.currentHero.class]?.name}
                        (${this.formatBonus(stats.bonuses.class)})
                    </div>
                    <div class="bonus-item">
                        <strong>–°–∞–≥–∞:</strong> ${bonuses.sagas[this.currentHero.saga]?.name}
                        (${this.formatBonus(stats.bonuses.saga)})
                    </div>
                    <div class="bonus-item ${!stats.bonuses.weapon.value ? 'bonus-empty' : ''}">
                        <strong>–û—Ä—É–∂–∏–µ:</strong> ${this.getEquipmentName('main_hand') || '–ü—É—Å—Ç–æ'}
                        (${this.formatBonus(stats.bonuses.weapon)})
                    </div>
                    <div class="bonus-item ${!stats.bonuses.armor.value ? 'bonus-empty' : ''}">
                        <strong>–ë—Ä–æ–Ω—è:</strong> ${this.getEquipmentName('chest') || '–ü—É—Å—Ç–æ'}
                        (${this.formatBonus(stats.bonuses.armor)})
                    </div>
                </div>

                <!-- –ù–∞–≤—ã–∫–∏ -->
                <div class="bonuses-section">
                    <h3>üéØ –ù–∞–≤—ã–∫–∏:</h3>
                    <div>üèÉ –ü–æ–±–µ–≥: +${stats.skills.escape}d6</div>
                    <div>üëª –°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å: +${stats.skills.stealth}d6</div>
                    <div>üçÄ –£–¥–∞—á–∞: +${stats.skills.luck}d6</div>
                </div>

                <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
                <div class="action-buttons">
                    <button class="btn-primary" onclick="game.showInventory()">üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</button>
                    <button class="btn-secondary" onclick="game.renderHeroSelect()">üîÅ –°–º–µ–Ω–∏—Ç—å –≥–µ—Ä–æ—è</button>
                </div>
            </div>
        `;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatBonus(bonus) {
        if (!bonus || bonus.type === 'none') return '–ù–µ—Ç –±–æ–Ω—É—Å–∞';
        
        const bonusNames = {
            'health_mult': '+% –∫ –∑–¥–æ—Ä–æ–≤—å—é',
            'damage_mult': '+% –∫ —É—Ä–æ–Ω—É', 
            'armor_mult': '+% –∫ –±—Ä–æ–Ω–µ',
            'gold_mult': '+% –∫ –∑–æ–ª–æ—Ç—É',
            'escape_bonus': '–ü–æ–±–µ–≥ +',
            'stealth_bonus': '–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å +',
            'luck_bonus': '–£–¥–∞—á–∞ +',
            'survival_bonus': '–í—ã–∂–∏–≤–∞–Ω–∏–µ +'
        };

        const value = bonus.type.includes('_mult') ? 
            Math.round(bonus.value * 100) : bonus.value;
            
        return bonusNames[bonus.type] ? 
            `${bonusNames[bonus.type]}${value}${bonus.type.includes('_mult') ? '%' : ''}` : 
            `–ë–æ–Ω—É—Å: ${value}`;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    getEquipmentName(slot) {
        const itemId = this.currentHero.equipment[slot];
        if (!itemId) return null;
        const item = this.items.find(i => i.id === itemId);
        return item?.name || null;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    showInventory() {
        if (!this.currentHero) return;

        const inventoryHTML = this.currentHero.inventory.map(itemId => {
            const item = this.items.find(i => i.id === itemId);
            if (!item) return '';
            
            const isEquipped = Object.values(this.currentHero.equipment).includes(itemId);
            
            return `
                <div class="inventory-slot" onclick="game.equipItem(${itemId})">
                    ${item.name}
                    ${isEquipped ? '<br><small>‚úì –ù–∞–¥–µ—Ç–æ</small>' : ''}
                </div>
            `;
        }).join('');

        const container = document.getElementById('app');
        container.innerHTML += `
            <div class="screen active" id="screen-inventory">
                <h3 class="text-center">üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</h3>
                <div class="inventory-grid">
                    ${inventoryHTML || '<div class="text-center">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</div>'}
                </div>
                <div class="action-buttons">
                    <button class="btn-secondary" onclick="game.renderHeroScreen()">‚Üê –ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;

        this.showScreen('inventory');
    }

    // –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
    equipItem(itemId) {
        const item = this.items.find(i => i.id === itemId);
        if (!item) return;

        // –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        const currentEquipped = this.currentHero.equipment[item.slot];
        if (currentEquipped) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            if (!this.currentHero.inventory.includes(currentEquipped)) {
                this.currentHero.inventory.push(currentEquipped);
            }
        }

        // –ù–∞–¥–µ–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
        this.currentHero.equipment[item.slot] = itemId;
        
        // –£–±–∏—Ä–∞–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        this.currentHero.inventory = this.currentHero.inventory.filter(id => id !== itemId);

        this.saveGame();
        this.renderHeroScreen();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –ë—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
    saveGame() {
        if (this.currentHero) {
            localStorage.setItem('heroGameSave', JSON.stringify({
                currentHeroId: this.currentHero.id,
                heroes: this.heroes
            }));
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    loadSave() {
        try {
            const save = localStorage.getItem('heroGameSave');
            if (save) {
                const data = JSON.parse(save);
                this.heroes = data.heroes || this.heroes;
                
                if (data.currentHeroId) {
                    this.currentHero = this.heroes.find(h => h.id === data.currentHeroId);
                    if (this.currentHero) {
                        this.showScreen('main');
                        this.renderHeroScreen();
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–≥—Ä—ã –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
let game;
document.addEventListener('DOMContentLoaded', () => {
    game = new HeroGame();
});
