// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã
class HeroGame {
    constructor() {
        this.heroes = [];
        this.items = [];
        this.monsters = [];
        this.locations = [];
        this.movementStyles = [];
        this.merchants = [];
        
        this.currentHero = null;
        this.currentScreen = 'hero-select';
        this.currentLocation = null;
        this.currentMonster = null;
        this.selectedMovement = null;
        this.merchantsUnlocked = 1; // –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤
        
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    async init() {
        await this.loadGameData();
        this.loadSave();
        this.renderHeroSelect();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
    async loadGameData() {
        try {
            // –ì–µ—Ä–æ–∏
            this.heroes = [
                {
                    id: 1,
                    name: "–õ–µ–≥–æ–ª–∞—Å",
                    image: "https://raw.githubusercontent.com/StaleGradov/Tigrimion/main/Argonat.jpg",
                    race: "elf",
                    class: "archer",
                    saga: "vulkanor",
                    baseHealth: 90,
                    baseDamage: 22,
                    baseArmor: 8,
                    gold: 1000,
                    level: 3,
                    experience: 150,
                    inventory: [1, 2],
                    equipment: {
                        main_hand: null,
                        chest: null
                    }
                },
                {
                    id: 2,
                    name: "–ì–∏–º–ª–∏",
                    image: "https://raw.githubusercontent.com/StaleGradov/Tigrimion/main/Argonat.jpg",
                    race: "dwarf",
                    class: "warrior",
                    saga: "golden_egg",
                    baseHealth: 120,
                    baseDamage: 18,
                    baseArmor: 15,
                    gold: 800,
                    level: 2,
                    experience: 80,
                    inventory: [3],
                    equipment: {
                        main_hand: null,
                        chest: null
                    }
                }
            ];

            // –ü—Ä–µ–¥–º–µ—Ç—ã (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ç–æ—Ä–≥–æ–≤—Ü–∞–º)
            this.items = [
                // –¢–æ—Ä–≥–æ–≤–µ—Ü 1 (–±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã)
                {
                    id: 1,
                    name: "–°—Ç–∞–ª—å–Ω–æ–π –ú–µ—á",
                    type: "weapon",
                    slot: "main_hand",
                    image: "https://via.placeholder.com/100x100/333/fff?text=üó°Ô∏è",
                    icon: "https://via.placeholder.com/64x64/333/fff?text=üó°Ô∏è",
                    rarity: "common",
                    fixed_damage: 15,
                    bonus: {type: "damage_mult", value: 0.1},
                    price: 150,
                    requiredLevel: 1,
                    merchant: 1,
                    description: "–ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∞–ª—å–Ω–æ–π –º–µ—á"
                },
                {
                    id: 2,
                    name: "–ö–æ–∂–∞–Ω—ã–π –î–æ—Å–ø–µ—Ö",
                    type: "armor",
                    slot: "chest",
                    image: "https://via.placeholder.com/100x100/333/fff?text=üõ°Ô∏è",
                    icon: "https://via.placeholder.com/64x64/333/fff?text=üõ°Ô∏è",
                    rarity: "common",
                    fixed_armor: 10,
                    bonus: {type: "health_mult", value: 0.1},
                    price: 120,
                    requiredLevel: 1,
                    merchant: 1,
                    description: "–õ—ë–≥–∫–∏–π –∫–æ–∂–∞–Ω—ã–π –¥–æ—Å–ø–µ—Ö"
                },
                // –¢–æ—Ä–≥–æ–≤–µ—Ü 2 (—É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã)
                {
                    id: 3,
                    name: "–ú–µ—á –í—É–ª–∫–∞–Ω–æ—Ä–∞",
                    type: "weapon",
                    slot: "main_hand",
                    image: "https://via.placeholder.com/100x100/ff4400/fff?text=üî•",
                    icon: "https://via.placeholder.com/64x64/ff4400/fff?text=üî•",
                    rarity: "rare",
                    fixed_damage: 25,
                    bonus: {type: "damage_mult", value: 0.2},
                    price: 300,
                    requiredLevel: 3,
                    merchant: 2,
                    description: "–ú–µ—á, –≤—ã–∫–æ–≤–∞–Ω–Ω—ã–π –≤ –ª–∞–≤–æ–≤—ã—Ö –∫—É–∑–Ω–∏—Ü–∞—Ö –í—É–ª–∫–∞–Ω–æ—Ä–∞"
                },
                {
                    id: 4,
                    name: "–õ—É–∫ –¢–µ–Ω–µ–π",
                    type: "weapon",
                    slot: "main_hand",
                    image: "https://via.placeholder.com/100x100/000/fff?text=üèπ",
                    icon: "https://via.placeholder.com/64x64/000/fff?text=üèπ",
                    rarity: "uncommon",
                    fixed_damage: 20,
                    bonus: {type: "stealth_bonus", value: 1},
                    price: 250,
                    requiredLevel: 2,
                    merchant: 2,
                    description: "–ë–µ—Å—à—É–º–Ω—ã–π –ª—É–∫ –¥–ª—è —Å–∫—Ä—ã—Ç–Ω—ã—Ö –∞—Ç–∞–∫"
                },
                // –¢–æ—Ä–≥–æ–≤–µ—Ü 3 (—ç–ø–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã)
                {
                    id: 5,
                    name: "–î–æ—Å–ø–µ—Ö –ì–Ω–æ–º–æ–≤",
                    type: "armor",
                    slot: "chest",
                    image: "https://via.placeholder.com/100x100/ffd700/000?text=‚≠ê",
                    icon: "https://via.placeholder.com/64x64/ffd700/000?text=‚≠ê",
                    rarity: "epic",
                    fixed_armor: 15,
                    bonus: {type: "health_mult", value: 0.3},
                    price: 400,
                    requiredLevel: 3,
                    merchant: 3,
                    description: "–ü—Ä–æ—á–Ω–∞—è –±—Ä–æ–Ω—è, —É–∫—Ä–∞—à–µ–Ω–Ω–∞—è —Ä—É–Ω–∞–º–∏"
                }
            ];

            // –ú–æ–Ω—Å—Ç—Ä—ã
            this.monsters = [
                {
                    id: 1,
                    name: "–ö–ª–µ—â",
                    image: "https://via.placeholder.com/200x200/333/fff?text=üï∑Ô∏è",
                    health: 250,
                    armor: 10,
                    damage: 40,
                    power: 105,
                    reward: 24,
                    escapeDifficulty: 4,
                    description: "–û—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ, –ø–∏—Ç–∞—é—â–µ–µ—Å—è –∫—Ä–æ–≤—å—é..."
                },
                {
                    id: 2,
                    name: "–ì–æ–±–ª–∏–Ω",
                    image: "https://via.placeholder.com/200x200/333/fff?text=üëπ",
                    health: 80,
                    armor: 5,
                    damage: 25,
                    power: 68,
                    reward: 15,
                    escapeDifficulty: 3,
                    description: "–ú–µ–ª–∫–∏–π –∏ –ø—Ä–æ—Ç–∏–≤–Ω—ã–π –≥—É–º–∞–Ω–æ–∏–¥"
                },
                {
                    id: 3,
                    name: "–í–æ–ª–∫",
                    image: "https://via.placeholder.com/200x200/333/fff?text=üê∫",
                    health: 60,
                    armor: 3,
                    damage: 30,
                    power: 72,
                    reward: 12,
                    escapeDifficulty: 2,
                    description: "–ë—ã—Å—Ç—Ä—ã–π –∏ –æ–ø–∞—Å–Ω—ã–π —Ö–∏—â–Ω–∏–∫"
                }
            ];

            // –õ–æ–∫–∞—Ü–∏–∏ (—Å —à–∞–Ω—Å–æ–º —Å–º–µ—Ä—Ç–∏)
            this.locations = [
                {
                    id: 1,
                    name: "–õ–∞–≤–æ–≤—ã–µ –∑–µ–º–ª–∏",
                    image: "https://via.placeholder.com/300x200/ff4400/fff?text=üåã",
                    description: "–†–∞—Å–∫–∞–ª—ë–Ω–Ω—ã–µ –ø—É—Å—Ç–æ—à–∏ —Å –±—É—Ä–ª—è—â–µ–π –ª–∞–≤–æ–π",
                    movementPenalty: -2,
                    escapePenalty: -2,
                    stealthPenalty: -2,
                    deathRisk: 4, // 1 –∏–∑ 4 —à–∞–Ω—Å —Å–º–µ—Ä—Ç–∏
                    deathMessage: "–í—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å –≤ –ª–∞–≤–æ–≤—É—é —Ä–∞—Å—â–µ–ª–∏–Ω—É –∏ –ø–æ–≥–∏–±–ª–∏!"
                },
                {
                    id: 2,
                    name: "–í–µ–ª–∏–∫–∏–µ –õ—É–≥–∞",
                    image: "https://via.placeholder.com/300x200/44ff44/fff?text=üåø",
                    description: "–ë–µ—Å–∫—Ä–∞–π–Ω–∏–µ –∑–µ–ª—ë–Ω—ã–µ –ø—Ä–æ—Å—Ç–æ—Ä—ã",
                    movementBonus: 1,
                    stealthBonus: 2,
                    deathRisk: 20, // 1 –∏–∑ 20 —à–∞–Ω—Å —Å–º–µ—Ä—Ç–∏
                    deathMessage: "–ù–∞ –≤–∞—Å –Ω–∞–ø–∞–ª —Å—Ç–∞—è –≥–æ–ª–æ–¥–Ω—ã—Ö –≤–æ–ª–∫–æ–≤!"
                },
                {
                    id: 3,
                    name: "–î—Ä–µ–≤–Ω–∏–µ –†—É–∏–Ω—ã",
                    image: "https://via.placeholder.com/300x200/888844/fff?text=üèõÔ∏è",
                    description: "–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–µ –ø–æ–¥–∑–µ–º–µ–ª—å—è –∏ –≥—Ä–æ–±–Ω–∏—Ü—ã",
                    movementPenalty: -1,
                    escapePenalty: -1,
                    stealthPenalty: -1,
                    deathRisk: 6, // 1 –∏–∑ 6 —à–∞–Ω—Å —Å–º–µ—Ä—Ç–∏
                    deathMessage: "–ü–æ—Ç–æ–ª–æ–∫ —Ä—É—Ö–Ω—É–ª –∏ –ø–æ—Ö–æ—Ä–æ–Ω–∏–ª –≤–∞—Å –ø–æ–¥ –æ–±–ª–æ–º–∫–∞–º–∏!"
                }
            ];

            // –°—Ç–∏–ª–∏ –¥–≤–∏–∂–µ–Ω–∏—è
            this.movementStyles = [
                {
                    id: "skip",
                    name: "–ü—Ä–æ–ø—É—Å–∫ –•–æ–¥–∞",
                    movement: 0,
                    stealthBonus: 2,
                    escapeBonus: 2,
                    canReroll: true,
                    description: "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç—å—é"
                },
                {
                    id: "stealth",
                    name: "–°–∫—Ä—ã—Ç–Ω–æ–µ –ü–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ",
                    movement: 1,
                    ignoresPenalties: true,
                    stealthBonus: 2,
                    escapeBonus: 2,
                    canReroll: true,
                    description: "–¢–∏—Ö–∏–µ —à–∞–≥–∏ –≤ —Ç–µ–Ω–∏"
                },
                {
                    id: "step",
                    name: "–®–∞–≥",
                    movement: 2,
                    minMovement: 1,
                    stealthBonus: 1,
                    description: "–û–±—ã—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–≥"
                },
                {
                    id: "fast",
                    name: "–ë—ã—Å—Ç—Ä–æ–µ –ü–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ",
                    movement: "1d4",
                    stealthPenalty: 1,
                    escapePenalty: 2,
                    description: "–°–ø–µ—à–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å —Ä–∏—Å–∫–æ–º"
                },
                {
                    id: "run",
                    name: "–ë–µ–≥",
                    movement: "1d6",
                    noEscape: true,
                    noStealth: true,
                    description: "–°—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –±–µ–≥ –±–µ–∑ –æ–≥–ª—è–¥–∫–∏"
                }
            ];

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    // –ë–æ–Ω—É—Å—ã —Ä–∞—Å, –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏ —Å–∞–≥
// –ë–æ–Ω—É—Å—ã —Ä–∞—Å, –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏ —Å–∞–≥
getBonuses() {
    return {
        races: {
            elf: { 
                bonus: {type: "escape_bonus", value: 1}, 
                name: "–≠–ª—å—Ñ", 
                description: "–ü—Ä–æ–≤–æ—Ä–Ω—ã–π –∏ –Ω–µ—É–ª–æ–≤–∏–º—ã–π" 
            },
            dwarf: { 
                bonus: {type: "health_mult", value: 0.3}, 
                name: "–ì–Ω–æ–º", 
                description: "–í—ã–Ω–æ—Å–ª–∏–≤—ã–π –∏ –∫—Ä–µ–ø–∫–∏–π" 
            },
            halfling: { 
                bonus: {type: "stealth_bonus", value: 1}, 
                name: "–ü–æ–ª—É—Ä–æ—Å–ª–∏–∫", 
                description: "–ú–∞–ª–µ–Ω—å–∫–∏–π –∏ –Ω–µ–∑–∞–º–µ—Ç–Ω—ã–π" 
            },
            fairy: { 
                bonus: {type: "luck_bonus", value: 1}, 
                name: "–§–µ—è", 
                description: "–í–µ–∑–µ–Ω–∏–µ –∏ –º–∞–≥–∏—è" 
            },
            laitar: { 
                bonus: {type: "survival_bonus", value: 1}, 
                name: "–õ–∞–π—Ç–∞—Ä", 
                description: "–ú–∞—Å—Ç–µ—Ä –≤—ã–∂–∏–≤–∞–Ω–∏—è" 
            },
            ork: { 
                bonus: {type: "damage_mult", value: 0.2}, 
                name: "–û—Ä–∫", 
                description: "–°–∏–ª—å–Ω—ã–π –∏ —Å–≤–∏—Ä–µ–ø—ã–π" 
            },
            human: { 
                bonus: {type: "gold_mult", value: 0.3}, 
                name: "–ß–µ–ª–æ–≤–µ–∫", 
                description: "–ü—Ä–µ–¥–ø—Ä–∏–∏–º—á–∏–≤—ã–π –∏ –±–æ–≥–∞—Ç—ã–π" 
            },
            dragon: { 
                bonus: {type: "armor_mult", value: 0.15}, 
                name: "–î—Ä–∞–∫–æ–Ω", 
                description: "–ú–æ–≥—É—á–∏–π –∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π" 
            }
        },
        classes: {
            archer: { 
                bonus: {type: "damage_mult", value: 0.2}, 
                name: "–õ—É—á–Ω–∏–∫", 
                description: "–ú–∞—Å—Ç–µ—Ä –¥–∞–ª—å–Ω–µ–≥–æ –±–æ—è" 
            },
            warrior: { 
                bonus: {type: "damage_mult", value: 0.2}, 
                name: "–í–æ–∏–Ω", 
                description: "–°–∏–ª—å–Ω—ã–π –∏ –æ—Ç–≤–∞–∂–Ω—ã–π" 
            },
            thief: { 
                bonus: {type: "stealth_bonus", value: 1}, 
                name: "–í–æ—Ä", 
                description: "–¢–∏—Ö–∏–π –∏ –Ω–µ–∑–∞–º–µ—Ç–Ω—ã–π" 
            },
            merchant: { 
                bonus: {type: "gold_mult", value: 0.3}, 
                name: "–¢–æ—Ä–≥–æ–≤–µ—Ü", 
                description: "–ò—Å–∫—É—Å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤–µ—Ü" 
            },
            fighter: { 
                bonus: {type: "luck_bonus", value: 1}, 
                name: "–ö—É–ª–∞—á–Ω—ã–π –±–æ–µ—Ü", 
                description: "–£–¥–∞—á–ª–∏–≤—ã–π –±–æ–µ—Ü" 
            },
            healer: { 
                bonus: {type: "health_mult", value: 0.3}, 
                name: "–ó–Ω–∞—Ö–∞—Ä—å", 
                description: "–ú–∞—Å—Ç–µ—Ä –∏—Å—Ü–µ–ª–µ–Ω–∏—è" 
            },
            sorcerer: { 
                bonus: {type: "escape_bonus", value: 1}, 
                name: "–ö–æ–ª–¥—É–Ω", 
                description: "–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞" 
            },
            death_mage: { 
                bonus: {type: "stealth_bonus", value: 1}, 
                name: "–í–æ–ª—Ö–≤ —Å–º–µ—Ä—Ç–∏", 
                description: "–¢—ë–º–Ω—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞" 
            },
            hunter: { 
                bonus: {type: "survival_bonus", value: 1}, 
                name: "–û—Ö–æ—Ç–Ω–∏–∫", 
                description: "–°–ª–µ–¥–æ–ø—ã—Ç –∏ –≤—ã–∂–∏–≤–∞–ª—å—â–∏–∫" 
            },
            bounty_hunter: { 
                bonus: {type: "damage_mult", value: 0.1}, 
                name: "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –≥–æ–ª–æ–≤–∞–º–∏", 
                description: "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é" 
            },
            gladiator: { 
                bonus: {type: "damage_mult", value: 0.2}, 
                name: "–ì–ª–∞–¥–∏–∞—Ç–æ—Ä", 
                description: "–ú–∞—Å—Ç–µ—Ä –ª—é–±–æ–≥–æ –æ—Ä—É–∂–∏—è" 
            },
            blacksmith: { 
                bonus: {type: "armor_mult", value: 0.15}, 
                name: "–ö—É–∑–Ω–µ—Ü", 
                description: "–ú–∞—Å—Ç–µ—Ä –±—Ä–æ–Ω–∏" 
            },
            antiquarian: { 
                bonus: {type: "gold_mult", value: 0.3}, 
                name: "–ò—Å–∫–∞—Ç–µ–ª—å –¥—Ä–µ–≤–Ω–æ—Å—Ç–µ–π", 
                description: "–ó–Ω–∞—Ç–æ–∫ —Å–æ–∫—Ä–æ–≤–∏—â" 
            }
        },
        sagas: {
            golden_egg: { 
                bonus: {type: "health_mult", value: 0.3}, 
                name: "–ó–æ–ª–æ—Ç–æ–µ –Ø–π—Ü–æ", 
                description: "–û–±–ª–∞–¥–∞—Ç–µ–ª—å –¥—Ä–µ–≤–Ω–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞" 
            },
            vulkanor: { 
                bonus: {type: "damage_mult", value: 0.2}, 
                name: "–í—É–ª–∫–∞–Ω–æ—Ä", 
                description: "–ü—Ä–æ—à–µ–¥—à–∏–π –æ–≥–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è" 
            },
            well: { 
                bonus: {type: "gold_mult", value: 0.3}, 
                name: "–ö–æ–ª–æ–¥–µ—Ü", 
                description: "–ù–∞—à–µ–¥—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –±–æ–≥–∞—Ç—Å—Ç–≤–∞" 
            },
            pets: { 
                bonus: {type: "luck_bonus", value: 1}, 
                name: "–ü–∏—Ç–æ–º—Ü—ã", 
                description: "–í–µ—Ä–Ω—ã–µ —Å–ø—É—Ç–Ω–∏–∫–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç —É–¥–∞—á—É" 
            },
            following_sun: { 
                bonus: {type: "survival_bonus", value: 1}, 
                name: "–í—Å–ª–µ–¥ –∑–∞ —Å–æ–ª–Ω—Ü–µ–º", 
                description: "–ü—Ä–æ—à–µ–¥—à–∏–π —á–µ—Ä–µ–∑ –ø—É—Å—Ç—ã–Ω–∏" 
            },
            vampire_crown: { 
                bonus: {type: "stealth_bonus", value: 1}, 
                name: "–ö–æ—Ä–æ–Ω–∞ –∫–æ—Ä–æ–ª—è –≤–∞–º–ø–∏—Ä–æ–≤", 
                description: "–ù–æ—Å–∏—Ç–µ–ª—å —Ç—ë–º–Ω–æ–π –∫–æ—Ä–æ–Ω—ã" 
            },
            tiger_eye: { 
                bonus: {type: "armor_mult", value: 0.15}, 
                name: "–ñ–µ–ª—Ç—ã–π –ì–ª–∞–∑ —Ç–∏–≥—Ä–∞", 
                description: "–û–±–ª–∞–¥–∞—Ç–µ–ª—å –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–∞—â–∏—Ç—ã" 
            },
            sky_phenomena: { 
                bonus: {type: "escape_bonus", value: 1}, 
                name: "–ù–µ–±–µ—Å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è", 
                description: "–°–≤–∏–¥–µ—Ç–µ–ª—å –Ω–µ–±–µ—Å–Ω—ã—Ö —á—É–¥–µ—Å" 
            }
        }
    };
}

    // –†–∞—Å—á—ë—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–µ—Ä–æ—è
    calculateHeroStats(hero) {
        const bonuses = this.getBonuses();
        
        // –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å—ã
        const raceBonus = bonuses.races[hero.race]?.bonus || {type: "none", value: 0};
        const classBonus = bonuses.classes[hero.class]?.bonus || {type: "none", value: 0};
        const sagaBonus = bonuses.sagas[hero.saga]?.bonus || {type: "none", value: 0};
        
        // –ë–æ–Ω—É—Å—ã –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        let weaponBonus = {type: "none", value: 0};
        let armorBonus = {type: "none", value: 0};
        
        if (hero.equipment.main_hand) {
            const weapon = this.items.find(item => item.id === hero.equipment.main_hand);
            weaponBonus = weapon?.bonus || {type: "none", value: 0};
        }
        
        if (hero.equipment.chest) {
            const armor = this.items.find(item => item.id === hero.equipment.chest);
            armorBonus = armor?.bonus || {type: "none", value: 0};
        }

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±–æ–Ω—É—Å—ã
        const allBonuses = [raceBonus, classBonus, sagaBonus, weaponBonus, armorBonus];

        // –ë–∞–∑–∞
        let health = hero.baseHealth;
        let damage = hero.baseDamage;
        let armor = hero.baseArmor;

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
        if (hero.equipment.main_hand) {
            const weapon = this.items.find(item => item.id === hero.equipment.main_hand);
            damage += weapon?.fixed_damage || 0;
        }
        
        if (hero.equipment.chest) {
            const armorItem = this.items.find(item => item.id === hero.equipment.chest);
            armor += armorItem?.fixed_armor || 0;
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏
        allBonuses.forEach(bonus => {
            switch(bonus.type) {
                case 'health_mult':
                    health *= (1 + bonus.value);
                    break;
                case 'damage_mult':
                    damage *= (1 + bonus.value);
                    break;
                case 'armor_mult':
                    armor *= (1 + bonus.value);
                    break;
            }
        });

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ—á—å
        const power = Math.round((health / 10) + (damage * 1.5) + (armor * 2));

        // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–≤—ã–∫–∏
        const skills = {
            escape: 0,
            stealth: 0,
            luck: 0,
            survival: 0,
            wealth: 0
        };

        allBonuses.forEach(bonus => {
            if (bonus.type.includes('_bonus')) {
                const skill = bonus.type.replace('_bonus', '');
                if (skills.hasOwnProperty(skill)) {
                    skills[skill] += bonus.value;
                }
            }
        });

        return {
            health: Math.round(health),
            damage: Math.round(damage),
            armor: Math.round(armor),
            power: power,
            skills: skills,
            bonuses: {
                race: raceBonus,
                class: classBonus,
                saga: sagaBonus,
                weapon: weaponBonus,
                armor: armorBonus
            }
        };
    }

    // –†–µ–Ω–¥–µ—Ä –≤—ã–±–æ—Ä–∞ –≥–µ—Ä–æ—è
    renderHeroSelect() {
        const container = document.getElementById('app');
        container.innerHTML = `
            <div class="screen active" id="screen-hero-select">
                <h2 class="text-center">–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è</h2>
                <div class="hero-list">
                    ${this.heroes.map(hero => `
                        <div class="hero-option" onclick="game.selectHero(${hero.id})">
                            <strong>${hero.name}</strong>
                            <div>–£—Ä. ${hero.level} | üí∞ ${hero.gold}</div>
                            <small>${this.getBonuses().races[hero.race]?.name} - ${this.getBonuses().classes[hero.class]?.name}</small>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }

    // –í—ã–±–æ—Ä –≥–µ—Ä–æ—è
    selectHero(heroId) {
        this.currentHero = this.heroes.find(h => h.id === heroId);
        this.showScreen('main');
        this.renderHeroScreen();
        this.saveGame();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω
    showScreen(screenName) {
        this.currentScreen = screenName;
    }

    // –†–µ–Ω–¥–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –≥–µ—Ä–æ—è
    renderHeroScreen() {
        if (!this.currentHero) return;

        const stats = this.calculateHeroStats(this.currentHero);
        const bonuses = this.getBonuses();

        const container = document.getElementById('app');
        container.innerHTML = `
            <div class="screen active" id="screen-main">
                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥–µ—Ä–æ—è -->
                <div class="hero-header">
                    <div class="hero-image">
                        <img src="${this.currentHero.image}" alt="${this.currentHero.name}">
                    </div>
                    <div class="hero-info">
                        <h1>${this.currentHero.name}</h1>
                        <div class="hero-stats">
                            <span>–£—Ä. ${this.currentHero.level}</span>
                            <span>üí∞ ${this.currentHero.gold}</span>
                            <span>‚ö° ${this.currentHero.experience}/100</span>
                        </div>
                    </div>
                </div>

                <!-- –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è -->
                ${this.currentLocation ? `
                <div class="location-info">
                    <h3>üìç ${this.currentLocation.name}</h3>
                    <p>${this.currentLocation.description}</p>
                    <div class="location-risks">
                        ${this.currentLocation.deathRisk ? `<span class="risk-badge">‚ò†Ô∏è –®–∞–Ω—Å —Å–º–µ—Ä—Ç–∏: 1/${this.currentLocation.deathRisk}</span>` : ''}
                    </div>
                </div>
                ` : ''}

                <!-- –ü–∞–Ω–µ–ª—å —Ä–∞—Å—á—ë—Ç–æ–≤ -->
                ${this.selectedMovement ? this.renderCalculationsPanel() : ''}

                <!-- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div>‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ</div>
                        <div class="stat-value">${stats.health}</div>
                    </div>
                    <div class="stat-card">
                        <div>‚öîÔ∏è –£—Ä–æ–Ω</div>
                        <div class="stat-value">${stats.damage}</div>
                    </div>
                    <div class="stat-card">
                        <div>üõ°Ô∏è –ë—Ä–æ–Ω—è</div>
                        <div class="stat-value">${stats.armor}</div>
                    </div>
                    <div class="stat-card">
                        <div>üåü –ú–æ—â—å</div>
                        <div class="stat-value">${stats.power}</div>
                    </div>
                </div>

                <!-- –ë–æ–Ω—É—Å—ã -->
                <div class="bonuses-section">
                    <h3>üéØ –ë–æ–Ω—É—Å—ã:</h3>
                    <div class="bonus-item">
                        <strong>–†–∞—Å–∞:</strong> ${bonuses.races[this.currentHero.race]?.name} 
                        (${this.formatBonus(stats.bonuses.race)})
                    </div>
                    <div class="bonus-item">
                        <strong>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</strong> ${bonuses.classes[this.currentHero.class]?.name}
                        (${this.formatBonus(stats.bonuses.class)})
                    </div>
                    <div class="bonus-item">
                        <strong>–°–∞–≥–∞:</strong> ${bonuses.sagas[this.currentHero.saga]?.name}
                        (${this.formatBonus(stats.bonuses.saga)})
                    </div>
                    <div class="bonus-item ${!stats.bonuses.weapon.value ? 'bonus-empty' : ''}">
                        <strong>–û—Ä—É–∂–∏–µ:</strong> ${this.getEquipmentName('main_hand') || '–ü—É—Å—Ç–æ'}
                        (${this.formatBonus(stats.bonuses.weapon)})
                    </div>
                    <div class="bonus-item ${!stats.bonuses.armor.value ? 'bonus-empty' : ''}">
                        <strong>–ë—Ä–æ–Ω—è:</strong> ${this.getEquipmentName('chest') || '–ü—É—Å—Ç–æ'}
                        (${this.formatBonus(stats.bonuses.armor)})
                    </div>
                </div>

                <!-- –ù–∞–≤—ã–∫–∏ -->
                <div class="bonuses-section">
                    <h3>üéØ –ù–∞–≤—ã–∫–∏:</h3>
                    <div>üèÉ –ü–æ–±–µ–≥: +${stats.skills.escape}d6</div>
                    <div>üëª –°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å: +${stats.skills.stealth}d6</div>
                    <div>üçÄ –£–¥–∞—á–∞: +${stats.skills.luck}d6</div>
                </div>

                <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
                <div class="action-buttons">
                    <button class="btn-primary" onclick="game.rollLocation()">üé≤ –ë—Ä–æ—Å–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é</button>
                    <button class="btn-secondary" onclick="game.showInventory()">üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</button>
                    <button class="btn-secondary" onclick="game.showMerchant()">üè™ –ú–∞–≥–∞–∑–∏–Ω (${this.merchantsUnlocked})</button>
                    <button class="btn-secondary" onclick="game.renderHeroSelect()">üîÅ –°–º–µ–Ω–∏—Ç—å –≥–µ—Ä–æ—è</button>
                </div>

                <!-- –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π -->
                <div class="battle-log" id="battle-log"></div>
            </div>
        `;
    }

    // –ü–∞–Ω–µ–ª—å —Ä–∞—Å—á—ë—Ç–æ–≤
    renderCalculationsPanel() {
        if (!this.currentMonster || !this.selectedMovement) return '';
        
        const stats = this.calculateHeroStats(this.currentHero);
        const movement = this.movementStyles.find(s => s.id === this.selectedMovement);
        
        // –†–∞—Å—á—ë—Ç –¥–∞–ª—å–Ω–æ—Å—Ç–∏
        let movementRange = typeof movement.movement === 'string' ? movement.movement : movement.movement;
        if (this.currentLocation.movementBonus) {
            movementRange = this.calculateMovementRange(movementRange, this.currentLocation.movementBonus);
        }
        if (this.currentLocation.movementPenalty && !movement.ignoresPenalties) {
            movementRange = this.calculateMovementRange(movementRange, this.currentLocation.movementPenalty);
        }

        // –†–∞—Å—á—ë—Ç —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏
        let stealthChance = stats.skills.stealth;
        if (movement.stealthBonus) stealthChance += movement.stealthBonus;
        if (movement.stealthPenalty) stealthChance += movement.stealthPenalty;
        if (this.currentLocation.stealthBonus) stealthChance += this.currentLocation.stealthBonus;
        if (this.currentLocation.stealthPenalty) stealthChance += this.currentLocation.stealthPenalty;

        // –†–∞—Å—á—ë—Ç –ø–æ–±–µ–≥–∞
        let escapeChance = stats.skills.escape;
        if (movement.escapeBonus) escapeChance += movement.escapeBonus;
        if (movement.escapePenalty) escapeChance += movement.escapePenalty;
        if (this.currentLocation.escapeBonus) escapeChance += this.currentLocation.escapeBonus;
        if (this.currentLocation.escapePenalty) escapeChance += this.currentLocation.escapePenalty;

        return `
            <div class="calculations-panel">
                <h3>üìä –†–∞—Å—á—ë—Ç—ã –¥–ª—è ${this.currentMonster.name}:</h3>
                <div class="calculation-row">
                    <span>üìè –î–∞–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–∞:</span>
                    <span class="calculation-value">${movementRange} –∫–ª–µ—Ç–æ–∫</span>
                </div>
                <div class="calculation-row">
                    <span>üëª –®–∞–Ω—Å —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏:</span>
                    <span class="calculation-value">${this.calculateSuccessChance(stealthChance, 3)}%</span>
                </div>
                <div class="calculation-row">
                    <span>üèÉ –®–∞–Ω—Å –ø–æ–±–µ–≥–∞:</span>
                    <span class="calculation-value">${this.calculateSuccessChance(escapeChance, this.currentMonster.escapeDifficulty)}%</span>
                </div>
                <div class="calculation-row">
                    <span>‚öîÔ∏è –®–∞–Ω—Å –ø–æ–±–µ–¥—ã:</span>
                    <span class="calculation-value ${stats.power >= this.currentMonster.power ? 'power-advantage' : 'power-risk'}">
                        ${stats.power >= this.currentMonster.power ? '–í—ã—Å–æ–∫–∏–π' : '–ù–∏–∑–∫–∏–π'}
                    </span>
                </div>
            </div>
        `;
    }

    // –†–∞—Å—á—ë—Ç –¥–∞–ª—å–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞
    calculateMovementRange(base, modifier) {
        if (typeof base === 'string') {
            // –î–ª—è dice notation —Ç–∏–ø–∞ "1d4"
            const [count, dice] = base.split('d').map(Number);
            const min = Math.max(1, count + modifier);
            const max = dice + modifier;
            return `${min}-${max}`;
        } else {
            return Math.max(1, base + modifier);
        }
    }

    // –†–∞—Å—á—ë—Ç —à–∞–Ω—Å–∞ —É—Å–ø–µ—Ö–∞
    calculateSuccessChance(bonusDice, targetNumber) {
        // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞: –∫–∞–∂–¥—ã–π d6 –¥–∞—ë—Ç ~16.7% —à–∞–Ω—Å –Ω–∞ —É—Å–ø–µ—Ö
        const baseChance = (7 - targetNumber) * 16.7;
        const bonusChance = bonusDice * 16.7;
        return Math.min(95, Math.max(5, Math.round(baseChance + bonusChance)));
    }

    // –ë—Ä–æ—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–∏
    rollLocation() {
        const roll = Math.floor(Math.random() * this.locations.length);
        this.currentLocation = this.locations[roll];
        this.selectedMovement = null;
        
        this.addToLog(`üé≤ –ë—Ä–æ—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–∏: ${this.currentLocation.name}`);
        this.addToLog(`üìç ${this.currentLocation.description}`);
        if (this.currentLocation.deathRisk) {
            this.addToLog(`‚ö†Ô∏è –û–ø–∞—Å–Ω–æ—Å—Ç—å: —à–∞–Ω—Å —Å–º–µ—Ä—Ç–∏ 1/${this.currentLocation.deathRisk}`);
        }
        
        this.renderHeroScreen();
        this.showMovementSelection();
    }

    // –í—ã–±–æ—Ä —Å—Ç–∏–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
    showMovementSelection() {
        const container = document.getElementById('app');
        const movementHTML = this.movementStyles.map(style => `
            <div class="hero-option" onclick="game.selectMovement('${style.id}')">
                <strong>${style.name}</strong>
                <div>${style.description}</div>
                <small>–î–≤–∏–∂–µ–Ω–∏–µ: ${typeof style.movement === 'string' ? style.movement : style.movement} –∫–ª–µ—Ç–∫–∏</small>
            </div>
        `).join('');

        container.innerHTML += `
            <div class="screen active" id="screen-movement">
                <h3 class="text-center">üö∂ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–≤–∏–∂–µ–Ω–∏—è</h3>
                <div class="hero-list">
                    ${movementHTML}
                </div>
            </div>
        `;

        this.showScreen('movement');
    }

    // –í—ã–±–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è
    selectMovement(styleId) {
        const style = this.movementStyles.find(s => s.id === styleId);
        this.selectedMovement = styleId;
        
        this.addToLog(`üö∂ –í—ã–±—Ä–∞–Ω–æ: ${style.name}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–Ω—Å–∞ —Å–º–µ—Ä—Ç–∏
        if (this.checkDeathRisk()) {
            return; // –ì–µ—Ä–æ–π –ø–æ–≥–∏–±
        }
        
        // –í—Å—Ç—Ä–µ—á–∞ —Å –º–æ–Ω—Å—Ç—Ä–æ–º
        this.encounterMonster();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–Ω—Å–∞ —Å–º–µ—Ä—Ç–∏
    checkDeathRisk() {
        if (!this.currentLocation.deathRisk) return false;
        
        const deathRoll = Math.floor(Math.random() * this.currentLocation.deathRisk) + 1;
        if (deathRoll === 1) {
            this.addToLog(`üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ù–ï–£–î–ê–ß–ê!`);
            this.addToLog(`‚ò†Ô∏è ${this.currentLocation.deathMessage}`);
            this.addToLog(`üè• –í—ã –ø–æ–≥–∏–±–ª–∏ –∏ –≤–æ–∑—Ä–æ–¥–∏–ª–∏—Å—å —É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–∞–≤–µ—Ä–Ω—ã`);
            
            // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —à—Ç—Ä–∞—Ñ—ã)
            this.currentLocation = null;
            this.selectedMovement = null;
            this.currentMonster = null;
            this.saveGame();
            
            setTimeout(() => {
                this.renderHeroScreen();
            }, 3000);
            
            return true;
        }
        
        this.addToLog(`‚úÖ –í–∞–º –ø–æ–≤–µ–∑–ª–æ! –®–∞–Ω—Å —Å–º–µ—Ä—Ç–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–≤—ã–ø–∞–ª–æ ${deathRoll})`);
        return false;
    }

    // –í—Å—Ç—Ä–µ—á–∞ —Å –º–æ–Ω—Å—Ç—Ä–æ–º
    encounterMonster() {
        const roll = Math.floor(Math.random() * this.monsters.length);
        this.currentMonster = this.monsters[roll];
        
        this.addToLog(`üé≠ –í—Å—Ç—Ä–µ—á–µ–Ω: ${this.currentMonster.name}`);
        this.renderHeroScreen(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å –ø–∞–Ω–µ–ª—å—é —Ä–∞—Å—á—ë—Ç–æ–≤
        this.showMonsterEncounter();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É —Å –º–æ–Ω—Å—Ç—Ä–æ–º
    showMonsterEncounter() {
        const stats = this.calculateHeroStats(this.currentHero);
        const container = document.getElementById('app');
        
        const powerComparison = stats.power >= this.currentMonster.power ? '‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û' : '‚ö†Ô∏è –†–ò–°–ö';

        container.innerHTML += `
            <div class="screen active" id="screen-monster">
                <div class="location-info">
                    <h3>üé≠ ${this.currentMonster.name}</h3>
                    <img src="${this.currentMonster.image}" alt="${this.currentMonster.name}" style="width: 100%; max-width: 200px; margin: 10px auto; display: block; border-radius: 10px;">
                    <p>${this.currentMonster.description}</p>
                    
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div>‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ</div>
                            <div class="stat-value">${this.currentMonster.health}</div>
                        </div>
                        <div class="stat-card">
                            <div>‚öîÔ∏è –£—Ä–æ–Ω</div>
                            <div class="stat-value">${this.currentMonster.damage}</div>
                        </div>
                        <div class="stat-card">
                            <div>üõ°Ô∏è –ë—Ä–æ–Ω—è</div>
                            <div class="stat-value">${this.currentMonster.armor}</div>
                        </div>
                        <div class="stat-card">
                            <div>üåü –ú–æ—â—å</div>
                            <div class="stat-value">${this.currentMonster.power}</div>
                        </div>
                    </div>
                    
                    <p><strong>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:</strong> ${powerComparison}</p>
                    <p>üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${this.currentMonster.reward} –∑–æ–ª–æ—Ç–∞</p>
                </div>

                <div class="action-buttons">
                    <button class="btn-primary" onclick="game.startBattle()">‚öîÔ∏è –°—Ä–∞–∂–∞—Ç—å—Å—è</button>
                    <button class="btn-secondary" onclick="game.attemptStealth()">üëª –°–∫—Ä—ã—Ç—å—Å—è</button>
                    <button class="btn-secondary" onclick="game.attemptEscape()">üèÉ –£–±–µ–∂–∞—Ç—å</button>
                    <button class="btn-secondary" onclick="game.renderHeroScreen()">‚Üê –ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;

        this.showScreen('monster');
    }

    // –ù–∞—á–∞—Ç—å –±–æ–π
    startBattle() {
        this.addToLog(`‚öîÔ∏è –ù–∞—á–∞–ª–æ –±–æ—è —Å ${this.currentMonster.name}`);
        const stats = this.calculateHeroStats(this.currentHero);
        
        if (stats.power >= this.currentMonster.power) {
            this.addToLog(`üéØ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ ${this.currentMonster.name}!`);
            this.addToLog(`üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${this.currentMonster.reward} –∑–æ–ª–æ—Ç–∞`);
            this.currentHero.gold += this.currentMonster.reward;
        } else {
            this.addToLog(`üí• –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –±–æ–π —Å ${this.currentMonster.name}`);
            this.addToLog(`üè• –ü–æ—Ç–µ—Ä—è–Ω–æ 20% –∑–¥–æ—Ä–æ–≤—å—è`);
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ç–µ—Ä—é –∑–¥–æ—Ä–æ–≤—å—è
        }
        
        this.completeEncounter();
    }

    // –ü–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä—ã—Ç—å—Å—è
    attemptStealth() {
        const stats = this.calculateHeroStats(this.currentHero);
        let stealthBonus = stats.skills.stealth;
        
        // –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã/—à—Ç—Ä–∞—Ñ—ã
        const movement = this.movementStyles.find(s => s.id === this.selectedMovement);
        if (movement.stealthBonus) stealthBonus += movement.stealthBonus;
        if (movement.stealthPenalty) stealthBonus += movement.stealthPenalty;
        if (this.currentLocation.stealthBonus) stealthBonus += this.currentLocation.stealthBonus;
        if (this.currentLocation.stealthPenalty) stealthBonus += this.currentLocation.stealthPenalty;
        
        this.addToLog(`üëª –ü–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä—ã—Ç—å—Å—è... –ë–æ–Ω—É—Å: +${stealthBonus}d6`);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –±—Ä–æ—Å–∫–∞
        const stealthRoll = this.rollDice(stealthBonus, 3);
        
        if (stealthRoll.success) {
            this.addToLog(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã–ª–∏—Å—å –æ—Ç ${this.currentMonster.name}!`);
        } else {
            this.addToLog(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å—Å—è! –ú–æ–Ω—Å—Ç—Ä –≤–∞—Å –∑–∞–º–µ—Ç–∏–ª`);
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è
        }
        
        this.completeEncounter();
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–±–µ–≥–∞
    attemptEscape() {
        const stats = this.calculateHeroStats(this.currentHero);
        let escapeBonus = stats.skills.escape;
        
        // –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã/—à—Ç—Ä–∞—Ñ—ã
        const movement = this.movementStyles.find(s => s.id === this.selectedMovement);
        if (movement.escapeBonus) escapeBonus += movement.escapeBonus;
        if (movement.escapePenalty) escapeBonus += movement.escapePenalty;
        if (this.currentLocation.escapeBonus) escapeBonus += this.currentLocation.escapeBonus;
        if (this.currentLocation.escapePenalty) escapeBonus += this.currentLocation.escapePenalty;
        
        this.addToLog(`üèÉ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–±–µ–≥–∞... –ë–æ–Ω—É—Å: +${escapeBonus}d6`);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –±—Ä–æ—Å–∫–∞
        const escapeRoll = this.rollDice(escapeBonus, this.currentMonster.escapeDifficulty);
        
        if (escapeRoll.success) {
            this.addToLog(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–±–µ–∂–∞–ª–∏ –æ—Ç ${this.currentMonster.name}!`);
        } else {
            this.addToLog(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å! –ü—Ä–∏–¥—ë—Ç—Å—è —Å—Ä–∞–∂–∞—Ç—å—Å—è`);
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –±–æ–π
            this.startBattle();
            return;
        }
        
        this.completeEncounter();
    }

    // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤
    rollDice(bonusDice, targetNumber) {
        let total = 0;
        let rolls = [];
        
        // –ë–∞–∑–æ–≤—ã–π –±—Ä–æ—Å–æ–∫
        const baseRoll = Math.floor(Math.random() * 6) + 1;
        rolls.push(baseRoll);
        total += baseRoll;
        
        // –ë–æ–Ω—É—Å–Ω—ã–µ –±—Ä–æ—Å–∫–∏
        for (let i = 0; i < bonusDice; i++) {
            const bonusRoll = Math.floor(Math.random() * 6) + 1;
            rolls.push(bonusRoll);
            total += bonusRoll;
        }
        
        const success = total >= targetNumber;
        
        this.addToLog(`üé≤ –ë—Ä–æ—Å–æ–∫: [${rolls.join(', ')}] = ${total} (–Ω—É–∂–Ω–æ ${targetNumber}+) - ${success ? '–£–°–ü–ï–•' : '–ù–ï–£–î–ê–ß–ê'}`);
        
        return { success, total, rolls };
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
    completeEncounter() {
        this.currentMonster = null;
        this.selectedMovement = null;
        this.addToLog(`üèÅ –í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
        this.saveGame();
        setTimeout(() => {
            this.renderHeroScreen();
        }, 2000);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω
    showMerchant() {
        const availableItems = this.items.filter(item => item.merchant <= this.merchantsUnlocked);
        const merchantHTML = availableItems.map(item => `
            <div class="hero-option" onclick="game.buyItem(${item.id})">
                <strong>${item.name}</strong>
                <div>${this.formatBonus(item.bonus)} | –£—Ä–æ–Ω: +${item.fixed_damage || 0} | –ë—Ä–æ–Ω—è: +${item.fixed_armor || 0}</div>
                <div>üí∞ ${item.price} –∑–æ–ª–æ—Ç–∞ | –£—Ä. ${item.requiredLevel}</div>
                <small>${item.description}</small>
            </div>
        `).join('');

        const container = document.getElementById('app');
        container.innerHTML += `
            <div class="screen active" id="screen-merchant">
                <h3 class="text-center">üè™ –ú–∞–≥–∞–∑–∏–Ω (–¢–æ—Ä–≥–æ–≤–µ—Ü ${this.merchantsUnlocked})</h3>
                <div class="hero-list">
                    ${merchantHTML || '<div class="text-center">–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç</div>'}
                </div>
                <div class="action-buttons">
                    <button class="btn-secondary" onclick="game.renderHeroScreen()">‚Üê –ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;

        this.showScreen('merchant');
    }

    // –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    buyItem(itemId) {
        const item = this.items.find(i => i.id === itemId);
        if (!item) return;

        if (this.currentHero.gold < item.price) {
            this.addToLog(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${item.name}`);
            return;
        }

        if (this.currentHero.level < item.requiredLevel) {
            this.addToLog(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${item.name}`);
            return;
        }

        this.currentHero.gold -= item.price;
        this.currentHero.inventory.push(itemId);
        
        this.addToLog(`üõí –ö—É–ø–ª–µ–Ω–æ: ${item.name} –∑–∞ ${item.price} –∑–æ–ª–æ—Ç–∞`);
        this.saveGame();
        this.showMerchant(); // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω
    }

    // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª
    addToLog(message) {
        const log = document.getElementById('battle-log');
        if (log) {
            const entry = document.createElement('div');
            entry.className = 'log-entry';
            entry.textContent = message;
            log.appendChild(entry);
            log.scrollTop = log.scrollHeight;
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatBonus(bonus) {
        if (!bonus || bonus.type === 'none') return '–ù–µ—Ç –±–æ–Ω—É—Å–∞';
        
        const bonusNames = {
            'health_mult': '+% –∫ –∑–¥–æ—Ä–æ–≤—å—é',
            'damage_mult': '+% –∫ —É—Ä–æ–Ω—É', 
            'armor_mult': '+% –∫ –±—Ä–æ–Ω–µ',
            'gold_mult': '+% –∫ –∑–æ–ª–æ—Ç—É',
            'escape_bonus': '–ü–æ–±–µ–≥ +',
            'stealth_bonus': '–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å +',
            'luck_bonus': '–£–¥–∞—á–∞ +',
            'survival_bonus': '–í—ã–∂–∏–≤–∞–Ω–∏–µ +'
        };

        const value = bonus.type.includes('_mult') ? 
            Math.round(bonus.value * 100) : bonus.value;
            
        return bonusNames[bonus.type] ? 
            `${bonusNames[bonus.type]}${value}${bonus.type.includes('_mult') ? '%' : ''}` : 
            `–ë–æ–Ω—É—Å: ${value}`;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    getEquipmentName(slot) {
        const itemId = this.currentHero.equipment[slot];
        if (!itemId) return null;
        const item = this.items.find(i => i.id === itemId);
        return item?.name || null;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    showInventory() {
        if (!this.currentHero) return;

        const inventoryHTML = this.currentHero.inventory.map(itemId => {
            const item = this.items.find(i => i.id === itemId);
            if (!item) return '';
            
            const isEquipped = Object.values(this.currentHero.equipment).includes(itemId);
            
            return `
                <div class="hero-option" onclick="game.equipItem(${itemId})">
                    <strong>${item.name}</strong>
                    <div>${this.formatBonus(item.bonus)} | –£—Ä–æ–Ω: +${item.fixed_damage || 0} | –ë—Ä–æ–Ω—è: +${item.fixed_armor || 0}</div>
                    ${isEquipped ? '<small>‚úì –ù–∞–¥–µ—Ç–æ</small>' : '<small>üì¶ –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ</small>'}
                </div>
            `;
        }).join('');

        const container = document.getElementById('app');
        container.innerHTML += `
            <div class="screen active" id="screen-inventory">
                <h3 class="text-center">üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</h3>
                <div class="hero-list">
                    ${inventoryHTML || '<div class="text-center">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</div>'}
                </div>
                <div class="action-buttons">
                    <button class="btn-secondary" onclick="game.renderHeroScreen()">‚Üê –ù–∞–∑–∞–¥</button>
                </div>
            </div>
        `;

        this.showScreen('inventory');
    }

    // –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
    equipItem(itemId) {
        const item = this.items.find(i => i.id === itemId);
        if (!item) return;

        // –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        const currentEquipped = this.currentHero.equipment[item.slot];
        if (currentEquipped) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            if (!this.currentHero.inventory.includes(currentEquipped)) {
                this.currentHero.inventory.push(currentEquipped);
            }
        }

        // –ù–∞–¥–µ–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
        this.currentHero.equipment[item.slot] = itemId;
        
        // –£–±–∏—Ä–∞–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        this.currentHero.inventory = this.currentHero.inventory.filter(id => id !== itemId);

        this.addToLog(`üéØ –ù–∞–¥–µ—Ç–æ: ${item.name}`);
        this.saveGame();
        this.renderHeroScreen();
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
    saveGame() {
        if (this.currentHero) {
            localStorage.setItem('heroGameSave', JSON.stringify({
                currentHeroId: this.currentHero.id,
                heroes: this.heroes,
                currentLocation: this.currentLocation,
                merchantsUnlocked: this.merchantsUnlocked
            }));
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    loadSave() {
        try {
            const save = localStorage.getItem('heroGameSave');
            if (save) {
                const data = JSON.parse(save);
                this.heroes = data.heroes || this.heroes;
                this.currentLocation = data.currentLocation || null;
                this.merchantsUnlocked = data.merchantsUnlocked || 1;
                
                if (data.currentHeroId) {
                    this.currentHero = this.heroes.find(h => h.id === data.currentHeroId);
                    if (this.currentHero) {
                        this.showScreen('main');
                        this.renderHeroScreen();
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–≥—Ä—ã –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
let game;
document.addEventListener('DOMContentLoaded', () => {
    game = new HeroGame();
});
