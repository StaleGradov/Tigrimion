// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã
class HeroGame {
    constructor() {
        this.heroes = [];
        this.items = [];
        this.monsters = [];
        this.maps = [];
        this.locations = [];
        
        this.showReward = false;
        this.lastReward = 0;
        this.currentHero = null;
        this.currentScreen = 'hero-select';
        this.currentMap = null;
        this.currentLocation = null;
        this.currentMonster = null;
        
        // –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –±–æ—è
        this.battleActive = false;
        this.battleRound = 0;
        this.battleLog = [];
        this.lastHealthUpdate = Date.now();
        this.healthInterval = null;
        
        // –†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è
        this.battleResult = null;
        
        // –û–±—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        this.globalInventory = [];
        
        // –í–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–µ—Ä–æ—è
        this.heroVideos = {
            1: 'https://www.youtube.com/embed/mfziNIhX9mo',
            2: 'https://www.youtube.com/embed/dQw4w9WgXcQ',  
            3: 'https://www.youtube.com/embed/dQw4w9WgXcQ'
        };
        
        this.videos = {
            map: 'https://www.youtube.com/embed/4gSmkjlEO_Q',
            location: 'https://www.youtube.com/embed/ytr51kwNLPo'
        };
        
        this.showVideo = {
            hero: false,
            map: false,
            location: false
        };
        
        // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ª–æ–∫–∞—Ü–∏–π
        this.locationProgress = {
            10: { unlocked: true, monstersKilled: Array(10).fill(0), totalMonsters: 10, name: "–ù–∞—á–∞–ª—å–Ω—ã–µ –∑–µ–º–ª–∏" },
            9: { unlocked: false, monstersKilled: Array(10).fill(0), totalMonsters: 10, name: "–õ–µ—Å–Ω—ã–µ —Ç—Ä–æ–ø—ã" },
            8: { unlocked: false, monstersKilled: Array(10).fill(0), totalMonsters: 10, name: "–ì–æ—Ä–Ω—ã–µ —É—â–µ–ª—å—è" },
            7: { unlocked: false, monstersKilled: Array(10).fill(0), totalMonsters: 10, name: "–ü–æ–¥–∑–µ–º–µ–ª—å—è" },
            6: { unlocked: false, monstersKilled: Array(10).fill(0), totalMonsters: 10, name: "–ë–æ–ª–æ—Ç–∞" },
            5: { unlocked: false, monstersKilled: Array(10).fill(0), totalMonsters: 10, name: "–í—É–ª–∫–∞–Ω—ã" },
            4: { unlocked: false, monstersKilled: Array(10).fill(0), totalMonsters: 10, name: "–õ–µ–¥—è–Ω—ã–µ –ø—É—Å—Ç–æ—à–∏" },
            3: { unlocked: false, monstersKilled: Array(10).fill(0), totalMonsters: 10, name: "–ù–µ–±–µ—Å–Ω—ã–µ –æ—Å—Ç—Ä–æ–≤–∞" },
            2: { unlocked: false, monstersKilled: Array(10).fill(0), totalMonsters: 10, name: "–•—Ä–∞–º—ã –¥—Ä–µ–≤–Ω–∏—Ö" },
            1: { unlocked: false, monstersKilled: Array(10).fill(0), totalMonsters: 10, name: "–¢—Ä–æ–Ω–Ω—ã–π –∑–∞–ª" }
        };
        
        this.init();
    }

    async init() {
        await this.loadGameData();
        this.loadSave();
        
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –≥–µ—Ä–æ–π –≤—Å–µ–≥–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        if (this.heroes.length > 0) {
            const firstHero = this.heroes.find(h => h.id === 1);
            if (firstHero) {
                firstHero.unlocked = true;
            }
        }
        
        this.renderHeroSelect();
    }

    async loadJSON(filePath) {
        try {
            const response = await fetch(filePath);
            if (!response.ok) throw new Error('HTTP error! status: ' + response.status);
            return await response.json();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ' + filePath + ':', error);
            return null;
        }
    }

    async loadGameData() {
        try {
            const [heroes, enemies, items, mapsData, locationsData] = await Promise.all([
                this.loadJSON('data/heroes.json'),
                this.loadJSON('data/enemies.json'),
                this.loadJSON('data/items.json'),
                this.loadJSON('data/maps.json'),
                this.loadJSON('data/locations.json')
            ]);

            this.heroes = heroes || [];
            this.monsters = enemies || [];
            this.items = items || [];
            this.maps = mapsData || [];
            this.locations = locationsData || [];

            if (this.heroes.length === 0) {
                this.createFallbackData();
            }

            if (this.heroes.length > 0) {
                const firstHero = this.heroes.find(h => h.id === 1);
                if (firstHero) firstHero.unlocked = true;
            }

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.createFallbackData();
        }
    }

    createFallbackData() {
        console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–ª–±—ç–∫ –¥–∞–Ω–Ω—ã—Ö...');
        
        this.heroes = [
            {
                id: 1, name: "–ù–∞—á–∞–ª—å–Ω—ã–π –≥–µ—Ä–æ–π", image: "https://via.placeholder.com/300x400/333/fff?text=Hero+1",
                race: "human", class: "warrior", saga: "golden_egg", baseHealth: 100, baseDamage: 20, baseArmor: 10,
                gold: 500, level: 1, experience: 0, healthRegen: 100/60, inventory: [], 
                equipment: { main_hand: null, chest: null }, unlocked: true,
                story: "–ü—Ä–æ—Å—Ç–æ–π –≤–æ–∏–Ω –∏–∑ –¥–∞–ª–µ–∫–æ–π –¥–µ—Ä–µ–≤–Ω–∏..."
            },
            {
                id: 2, name: "–≠–ª—å—Ñ–∏–π—Å–∫–∏–π –ª—É—á–Ω–∏–∫", image: "https://via.placeholder.com/300x400/336/fff?text=Hero+2",
                race: "elf", class: "archer", saga: "pets", baseHealth: 80, baseDamage: 25, baseArmor: 8,
                gold: 0, level: 1, experience: 0, healthRegen: 80/60, inventory: [],
                equipment: { main_hand: null, chest: null }, unlocked: false,
                story: "–ò—Å–∫—É—Å–Ω—ã–π —Å—Ç—Ä–µ–ª–æ–∫ –∏–∑ –¥—Ä–µ–≤–Ω–µ–≥–æ –ª–µ—Å–∞"
            }
        ];

        // –°–æ–∑–¥–∞–µ–º –º–æ–Ω—Å—Ç—Ä–æ–≤
        this.monsters = [];
        for (let i = 1; i <= 100; i++) {
            this.monsters.push({
                id: i, name: `–ú–æ–Ω—Å—Ç—Ä ${i}`, image: "https://via.placeholder.com/300x400/633/fff?text=Monster",
                description: `–ú–æ–Ω—Å—Ç—Ä —É—Ä–æ–≤–Ω—è ${Math.ceil(i/10)}`, health: 20 + (i * 3), maxHealth: 20 + (i * 3),
                damage: 5 + i, attack: 5 + i, defense: 2 + Math.floor(i/2), armor: 2 + Math.floor(i/3),
                speed: 3 + Math.floor(i/5), experience: 5 + (i * 2), reward: 10 + (i * 3), power: 15 + (i * 4)
            });
        }

        this.items = [
            {
                id: 1, name: "–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", type: "potion", value: 20, price: 25, heal: 20,
                image: "https://via.placeholder.com/50x50/393/fff?text=Potion", description: "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 20 –∑–¥–æ—Ä–æ–≤—å—è"
            },
            {
                id: 2, name: "–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á", type: "weapon", value: 50, price: 100, fixed_damage: 10,
                image: "https://via.placeholder.com/50x50/663/fff?text=Sword", description: "–ü—Ä–æ—Å—Ç–æ–π –Ω–æ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—á",
                bonus: { type: "damage_mult", value: 0.1 }
            }
        ];

        this.maps = [
            { id: 1, name: "–ê—Ä–∫–∞–Ω–∏—É–º", image: "https://via.placeholder.com/400x600/363/fff?text=Map", 
              description: "–ó–µ–º–ª—è –¥—Ä–µ–≤–Ω–µ–π –º–∞–≥–∏–∏", multiplier: 1.0, unlocked: true }
        ];

        // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏
        this.locations = [];
        const locationNames = {
            10: "–ù–∞—á–∞–ª—å–Ω—ã–µ –∑–µ–º–ª–∏", 9: "–õ–µ—Å–Ω—ã–µ —Ç—Ä–æ–ø—ã", 8: "–ì–æ—Ä–Ω—ã–µ —É—â–µ–ª—å—è", 7: "–ü–æ–¥–∑–µ–º–µ–ª—å—è",
            6: "–ë–æ–ª–æ—Ç–∞", 5: "–í—É–ª–∫–∞–Ω—ã", 4: "–õ–µ–¥—è–Ω—ã–µ –ø—É—Å—Ç–æ—à–∏", 3: "–ù–µ–±–µ—Å–Ω—ã–µ –æ—Å—Ç—Ä–æ–≤–∞",
            2: "–•—Ä–∞–º—ã –¥—Ä–µ–≤–Ω–∏—Ö", 1: "–¢—Ä–æ–Ω–Ω—ã–π –∑–∞–ª"
        };

        for (let level = 10; level >= 1; level--) {
            this.locations.push({
                level: level, name: locationNames[level], description: `–õ–æ–∫–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è ${level}`,
                image: "https://via.placeholder.com/400x600/663/fff?text=Location",
                monsterRange: [((10 - level) * 10 + 1), ((10 - level) * 10 + 10)],
                artifactChance: 0.005 + (0.001 * (10 - level)),
                relicChance: 0.0005 + (0.0001 * (10 - level))
            });
        }
    }

    // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ë–û–ù–£–°–û–í
    getBonuses() {
        return {
            races: {
                elf: { type: "damage_mult", value: 0.2, name: "–≠–ª—å—Ñ", description: "–£—Ä–æ–Ω +20%" },
                human: { type: "gold_mult", value: 0.3, name: "–ß–µ–ª–æ–≤–µ–∫", description: "+30% –∑–æ–ª–æ—Ç–∞" },
                dwarf: { type: "health_mult", value: 0.3, name: "–ì–Ω–æ–º", description: "+30% –∫ –∑–¥–æ—Ä–æ–≤—å—é" }
            },
            classes: {
                warrior: { type: "armor_mult", value: 0.15, name: "–í–æ–∏–Ω", description: "+15% –∫ –±—Ä–æ–Ω–µ" },
                archer: { type: "crit_chance", value: 0.2, name: "–õ—É—á–Ω–∏–∫", description: "20% —à–∞–Ω—Å –¥–≤–æ–π–Ω–æ–≥–æ —É—Ä–æ–Ω–∞" },
                blacksmith: { type: "armor_mult", value: 0.15, name: "–ö—É–∑–Ω–µ—Ü", description: "+15% –∫ –±—Ä–æ–Ω–µ" }
            },
            sagas: {
                golden_egg: { type: "health_mult", value: 0.3, name: "–ó–æ–ª–æ—Ç–æ–µ –Ø–π—Ü–µ", description: "+30% –∫ –∑–¥–æ—Ä–æ–≤—å—é" },
                pets: { type: "damage_mult", value: 0.2, name: "–ü–∏—Ç–æ–º–µ—Ü", description: "–£—Ä–æ–Ω +20%" },
                vulkanor: { type: "armor_penetration", value: 0.25, name: "–í—É–ª–∫–∞–Ω–æ—Ä", description: "25% —à–∞–Ω—Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –±—Ä–æ–Ω—é" }
            }
        };
    }

    // –°–±–æ—Ä –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    getBonusesWithSources(hero) {
        hero = hero || this.currentHero;
        if (!hero) return [];
        
        const bonuses = this.getBonuses();
        const bonusesWithSources = [];
        
        if (bonuses.races[hero.race]) {
            bonusesWithSources.push({ ...bonuses.races[hero.race], source: 'race', sourceName: bonuses.races[hero.race].name });
        }
        if (bonuses.classes[hero.class]) {
            bonusesWithSources.push({ ...bonuses.classes[hero.class], source: 'class', sourceName: bonuses.classes[hero.class].name });
        }
        if (bonuses.sagas[hero.saga]) {
            bonusesWithSources.push({ ...bonuses.sagas[hero.saga], source: 'saga', sourceName: bonuses.sagas[hero.saga].name });
        }
        
        if (hero.equipment.main_hand) {
            const weapon = this.items.find(item => item.id === hero.equipment.main_hand);
            if (weapon && weapon.bonus) {
                bonusesWithSources.push({ ...weapon.bonus, source: 'weapon', sourceName: weapon.name });
            }
        }
        
        if (hero.equipment.chest) {
            const armor = this.items.find(item => item.id === hero.equipment.chest);
            if (armor && armor.bonus) {
                bonusesWithSources.push({ ...armor.bonus, source: 'armor', sourceName: armor.name });
            }
        }
        
        return bonusesWithSources;
    }

    // –†–∞—Å—á–µ—Ç —Å—É–º–º–∞—Ä–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –ø–æ —Ç–∏–ø–∞–º
    calculateTotalBonuses(hero) {
        const activeBonuses = this.getBonusesWithSources(hero);
        const totals = {
            health_mult: 0, damage_mult: 0, armor_mult: 0, gold_mult: 0,
            health_regen_mult: 0, crit_chance: 0, armor_penetration: 0, vampirism: 0
        };
        
        activeBonuses.forEach(bonus => {
            if (totals.hasOwnProperty(bonus.type)) {
                totals[bonus.type] += bonus.value;
            }
        });
        
        return totals;
    }

    // –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
    getLevelRequirements() {
        return { 1: 1, 2: 100, 3: 250, 4: 500, 5: 1000, 6: 2000, 7: 4000, 8: 8000, 9: 16000, 10: 32000 };
    }

    addExperience(amount) {
        if (!this.currentHero) return;
        
        const oldLevel = this.currentHero.level;
        this.currentHero.experience += amount;
        
        const levelRequirements = this.getLevelRequirements();
        let newLevel = oldLevel;
        
        while (this.currentHero.experience >= levelRequirements[newLevel + 1] && levelRequirements[newLevel + 1]) {
            newLevel++;
        }
        
        if (newLevel > oldLevel) {
            this.levelUp(newLevel);
        }
        
        this.saveGame();
    }

    levelUp(newLevel) {
        const levelsGained = newLevel - this.currentHero.level;
        this.currentHero.level = newLevel;
        
        const healthIncrease = 10 * levelsGained;
        const damageIncrease = 2 * levelsGained;
        const armorIncrease = 1 * levelsGained;
        
        this.currentHero.baseHealth += healthIncrease;
        this.currentHero.baseDamage += damageIncrease;
        this.currentHero.baseArmor += armorIncrease;
        
        this.currentHero.currentHealth = this.calculateMaxHealth();
        
        this.addToLog('üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å —É—Ä–æ–≤–µ–Ω—å ' + newLevel);
        this.checkHeroUnlocks();
    }

    checkHeroUnlocks() {
        if (!this.currentHero) return;
        
        const heroUnlockLevels = { 2: 10, 3: 15 };
        
        Object.keys(heroUnlockLevels).forEach(heroId => {
            const requiredLevel = heroUnlockLevels[heroId];
            const hero = this.heroes.find(h => h.id === parseInt(heroId));
            if (hero && !hero.unlocked && this.currentHero.level >= requiredLevel) {
                hero.unlocked = true;
                this.addToLog('üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –≥–µ—Ä–æ–π: ' + hero.name + '!');
            }
        });
    }

    // –ù–û–í–´–ô –†–ê–°–ß–ï–¢ –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö
    calculateMaxHealth(hero) {
        hero = hero || this.currentHero;
        if (!hero) return 0;
        
        const totals = this.calculateTotalBonuses(hero);
        const levelMultiplier = 1 + (hero.level - 1) * 0.1;
        let health = hero.baseHealth * levelMultiplier;
        health += hero.baseHealth * totals.health_mult;
        
        return Math.round(health);
    }

    calculateHeroStats(hero) {
        hero = hero || this.currentHero;
        if (!hero) return {};
        
        const totals = this.calculateTotalBonuses(hero);
        const levelMultiplier = 1 + (hero.level - 1) * 0.1;
        
        let baseHealth = hero.baseHealth * levelMultiplier;
        let baseDamage = hero.baseDamage * levelMultiplier;
        let baseArmor = hero.baseArmor * levelMultiplier;
        
        let health = baseHealth + (hero.baseHealth * totals.health_mult);
        let damage = baseDamage + (hero.baseDamage * totals.damage_mult);
        let armor = baseArmor + (hero.baseArmor * totals.armor_mult);
        
        // –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞
        if (hero.equipment.main_hand) {
            const weapon = this.items.find(item => item.id === hero.equipment.main_hand);
            damage += (weapon && weapon.fixed_damage) ? weapon.fixed_damage : 0;
        }
        
        if (hero.equipment.chest) {
            const armorItem = this.items.find(item => item.id === hero.equipment.chest);
            armor += (armorItem && armorItem.fixed_armor) ? armorItem.fixed_armor : 0;
        }
        
        const power = Math.round((health / 10) + (damage * 1.5) + (armor * 2));
        const currentHealth = this.getCurrentHealthForDisplay(hero);
        
        return {
            health: Math.round(health),
            currentHealth: Math.floor(currentHealth),
            maxHealth: Math.round(health),
            damage: Math.round(damage),
            armor: Math.round(armor),
            power: power,
            bonuses: totals,
            baseHealth: Math.round(baseHealth),
            baseDamage: Math.round(baseDamage),
            baseArmor: Math.round(baseArmor)
        };
    }

    // –ù–û–í–ê–Ø –ú–ï–•–ê–ù–ò–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –£–î–ê–†–ê
    calculateAttackDamage(isHeroAttack = true) {
        const stats = this.calculateHeroStats();
        const totals = this.calculateTotalBonuses(this.currentHero); // –ò–°–ü–†–ê–í–õ–ï–ù–û
        
        let baseDamage = stats.damage;
        let isCritical = false;
        let isArmorPenetrated = false;
        let finalDamage = baseDamage;
        
        if (isHeroAttack && Math.random() < totals.crit_chance) {
            isCritical = true;
            finalDamage *= 2;
            this.addBattleLog({ message: 'üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†! –î–≤–æ–π–Ω–æ–π —É—Ä–æ–Ω!', type: 'critical' });
        }
        
        if (isHeroAttack && Math.random() < totals.armor_penetration) {
            isArmorPenetrated = true;
            this.addBattleLog({ message: '‚ö° –ü–†–û–ù–ò–ö–ù–û–í–ï–ù–ò–ï! –ë—Ä–æ–Ω—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞!', type: 'penetration' });
        }
        
        return { damage: Math.round(finalDamage), isCritical, isArmorPenetrated };
    }

    // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ú–ï–•–ê–ù–ò–ö–ê –ë–û–Ø
    battleAttack() {
        if (!this.battleActive) return;
        
        this.battleRound++;
        const stats = this.calculateHeroStats(this.currentHero);
        const totals = this.calculateTotalBonuses(this.currentHero); // –ò–°–ü–†–ê–í–õ–ï–ù–û
        
        // –•–æ–¥ –≥–µ—Ä–æ—è
        const heroAttack = this.calculateAttackDamage(true);
        let monsterDamageReduction = heroAttack.isArmorPenetrated ? 0 : this.currentMonster.armor;
        const heroDamage = Math.max(1, heroAttack.damage - monsterDamageReduction);
        
        this.currentMonster.currentHealth -= heroDamage;
        
        this.addBattleLog({
            message: `üó°Ô∏è ${this.currentHero.name} –Ω–∞–Ω–æ—Å–∏—Ç ${heroDamage} —É—Ä–æ–Ω–∞!` + 
                     (heroAttack.isCritical ? ' üí•' : '') +
                     (heroAttack.isArmorPenetrated ? ' ‚ö°' : ''),
            type: 'hero-attack'
        });
        
        // –í–∞–º–ø–∏—Ä–∏–∑–º
        if (totals.vampirism > 0 && heroDamage > 0) {
            const healAmount = Math.round(heroDamage * totals.vampirism);
            this.updateHealth(healAmount);
            this.addBattleLog({ message: `ü©∏ –í–∞–º–ø–∏—Ä–∏–∑–º! +${healAmount} –∑–¥–æ—Ä–æ–≤—å—è`, type: 'vampirism' });
        }
        
        if (this.currentMonster.currentHealth <= 0) {
            this.endBattle(true);
            return;
        }
        
        // –•–æ–¥ –º–æ–Ω—Å—Ç—Ä–∞
        const monsterDamage = Math.max(1, this.currentMonster.damage - stats.armor);
        this.updateHealth(-monsterDamage);
        
        this.addBattleLog({
            message: 'üëπ ' + this.currentMonster.name + ' –Ω–∞–Ω–æ—Å–∏—Ç ' + monsterDamage + ' —É—Ä–æ–Ω–∞!',
            type: 'monster-attack'
        });
        
        if (this.currentHero.currentHealth <= 0) {
            this.endBattle(false);
            return;
        }
        
        this.saveGame();
        this.renderHeroScreen();
    }

    // –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï –ë–û–Ø
    endBattle(victory) {
        if (victory) {
            const totals = this.calculateTotalBonuses(this.currentHero); // –ò–°–ü–†–ê–í–õ–ï–ù–û
            const baseReward = this.currentMonster.reward;
            const goldMultiplier = 1 + totals.gold_mult;
            const reward = Math.round(baseReward * goldMultiplier);
            
            this.currentHero.gold += reward;
            this.lastReward = reward;
            
            const baseExperience = Math.max(10, Math.floor(this.currentMonster.power / 2));
            const experienceGained = baseExperience;
            
            this.addExperience(experienceGained);
            
            if (this.currentLocation) {
                this.updateLocationProgress();
            }
            
            this.addBattleLog({
                message: `üéâ –ü–û–ë–ï–î–ê! –ü–æ–ª—É—á–µ–Ω–æ ${reward} –∑–æ–ª–æ—Ç–∞ –∏ ${experienceGained} –æ–ø—ã—Ç–∞`,
                type: 'victory'
            });
            
            this.battleResult = { victory: true, reward: reward, experience: experienceGained, monsterName: this.currentMonster.name };
            
        } else {
            this.currentHero.currentHealth = 0;
            this.lastHealthUpdate = Date.now();
            
            this.addBattleLog({ message: 'üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï! –ì–µ—Ä–æ–π –ø–æ–≤–µ—Ä–∂–µ–Ω.', type: 'defeat' });
            this.battleResult = { victory: false, monsterName: this.currentMonster.name };
        }
        
        this.battleActive = false;
        this.currentMonster = null;
        this.renderHeroScreen();
    }

    getCurrentHealthForDisplay(hero) {
        hero = hero || this.currentHero;
        if (!hero) return 0;
        
        const now = Date.now();
        const timePassed = (now - this.lastHealthUpdate) / 1000;
        
        if (!hero.currentHealth) {
            hero.currentHealth = this.calculateMaxHealth(hero);
        }
        
        let currentHealth = hero.currentHealth;
        const maxHealth = this.calculateMaxHealth(hero);
        
        if (currentHealth < maxHealth) {
            const totals = this.calculateTotalBonuses(hero); // –ò–°–ü–†–ê–í–õ–ï–ù–û
            const regenMultiplier = 1 + totals.health_regen_mult;
            const baseRegen = hero.healthRegen || 100/60;
            const healthToRegen = timePassed * baseRegen * regenMultiplier;
            currentHealth = Math.min(maxHealth, currentHealth + healthToRegen);
            
            if (currentHealth > hero.currentHealth) {
                this.lastHealthUpdate = now;
                hero.currentHealth = currentHealth;
                this.saveGame();
            }
        }
        
        return currentHealth;
    }

    updateHealth(change) {
        if (!this.currentHero) return;
        
        if (!this.currentHero.currentHealth) {
            this.currentHero.currentHealth = this.calculateMaxHealth();
        }
        
        this.currentHero.currentHealth += change;
        const maxHealth = this.calculateMaxHealth();
        this.currentHero.currentHealth = Math.max(0, Math.min(maxHealth, this.currentHero.currentHealth));
        
        if (change !== 0) {
            this.lastHealthUpdate = Date.now();
        }
        
        this.saveGame();
    }

    // –í–°–¢–†–ï–ß–ê –ú–û–ù–°–¢–†–ê
    encounterMonster() {
        if (!this.currentLocation || !this.currentMap) {
            console.error('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –∏–ª–∏ –∫–∞—Ä—Ç–∞');
            return;
        }

        const locationLevel = this.currentLocation.level;
        const startMonsterId = (10 - locationLevel) * 10 + 1;
        const endMonsterId = startMonsterId + 9;
        const monsterId = Math.floor(Math.random() * 10) + startMonsterId;
        
        let monster = this.monsters.find(m => m.id === monsterId);
        if (!monster) {
            monster = this.monsters.find(m => m.id >= startMonsterId && m.id <= endMonsterId);
            if (!monster) return;
        }

        this.currentMonster = {
            ...monster,
            currentHealth: Math.round(monster.health * this.currentMap.multiplier),
            health: Math.round(monster.health * this.currentMap.multiplier),
            damage: Math.round(monster.damage * this.currentMap.multiplier),
            armor: Math.round(monster.armor * this.currentMap.multiplier),
            reward: Math.round(monster.reward * this.currentMap.multiplier),
            power: Math.round(((monster.health / 10) + (monster.damage * 1.5) + (monster.armor * 2)) * this.currentMap.multiplier)
        };

        this.addToLog('üé≠ –í—Å—Ç—Ä–µ—á–µ–Ω: ' + this.currentMonster.name);
        this.renderHeroScreen();
    }

    // –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–ì–†–ï–°–°–ê –õ–û–ö–ê–¶–ò–ò
    updateLocationProgress() {
        if (!this.currentLocation || !this.currentMonster) return;
        
        const locationLevel = this.currentLocation.level;
        const progress = this.locationProgress[locationLevel];
        
        if (progress) {
            const monsterIndex = this.currentMonster.id - ((10 - locationLevel) * 10 + 1);
            if (monsterIndex >= 0 && monsterIndex < 10) {
                progress.monstersKilled[monsterIndex]++;
                const allMonstersKilled = progress.monstersKilled.every(kills => kills > 0);
                if (allMonstersKilled) {
                    this.completeLocation(locationLevel);
                }
                this.saveGame();
            }
        }
    }

    completeLocation(locationLevel) {
        const nextLocationLevel = locationLevel - 1;
        const nextProgress = this.locationProgress[nextLocationLevel];
        if (nextProgress) {
            nextProgress.unlocked = true;
            this.addToLog('üéâ –õ–æ–∫–∞—Ü–∏—è "' + this.getLocationName(locationLevel) + '" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            this.addToLog('üîì –û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è: "' + this.getLocationName(nextLocationLevel) + '"');
        }
        this.saveGame();
    }

    getLocationName(level) {
        const location = this.locations.find(l => l.level === level);
        return location ? location.name : '–õ–æ–∫–∞—Ü–∏—è ' + level;
    }

    getBonusIcon(bonusType) {
        const icons = {
            'health_mult': '‚ù§Ô∏è', 'damage_mult': '‚öîÔ∏è', 'armor_mult': 'üõ°Ô∏è', 'gold_mult': 'üí∞',
            'health_regen_mult': '‚ö°', 'crit_chance': 'üí•', 'armor_penetration': '‚ö°', 'vampirism': 'ü©∏'
        };
        return icons[bonusType] || 'üéØ';
    }

    renderHeroSelect() {
        const container = document.getElementById('app');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä app –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        const heroesHTML = this.heroes.map(hero => {
            const isUnlocked = hero.unlocked === true;
            const stats = this.calculateHeroStats(hero);
            const bonuses = this.getBonuses();
            
            const activeBonuses = this.getBonusesWithSources(hero);
            const bonusDisplay = activeBonuses.map(bonus => {
                const value = bonus.type.includes('_mult') ? Math.round(bonus.value * 100) + '%' : Math.round(bonus.value * 100) + '%';
                return `<span title="${bonus.description}">${this.getBonusIcon(bonus.type)} ${value}</span>`;
            }).join('');
            
            const raceName = bonuses.races[hero.race]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            const className = bonuses.classes[hero.class]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            const sagaName = bonuses.sagas[hero.saga]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

            return `
                <div class="hero-option ${isUnlocked ? '' : 'locked'}" onclick="game.selectHero(${hero.id})">
                    <div class="hero-option-image">
                        <img src="${hero.image}" alt="${hero.name}">
                        ${!isUnlocked ? '<div class="locked-overlay">üîí</div>' : ''}
                    </div>
                    <div class="hero-option-info">
                        <div class="hero-option-header">
                            <strong>${hero.name}</strong>
                            <span class="hero-level">–£—Ä. ${hero.level}</span>
                        </div>
                        <div class="hero-option-stats">
                            <div class="stat-row">
                                <span>‚ù§Ô∏è ${Math.floor(this.getCurrentHealthForDisplay(hero))}/${this.calculateMaxHealth(hero)}</span>
                                <span>‚öîÔ∏è ${stats.damage}</span>
                                <span>üõ°Ô∏è ${stats.armor}</span>
                            </div>
                            <div class="stat-row">
                                <span>üí∞ ${hero.gold}</span>
                                <span>üåü ${stats.power}</span>
                            </div>
                        </div>
                        ${bonusDisplay ? `<div class="hero-option-skills">${bonusDisplay}</div>` : ''}
                        <div class="hero-option-bonuses">
                            <small>${raceName} - ${className} - ${sagaName}</small>
                        </div>
                        ${!isUnlocked ? '<small class="locked-text">–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å: ' + (hero.id * 5) + '</small>' : ''}
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = `
            <div class="screen active" id="screen-hero-select">
                <h2 class="text-center">–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è</h2>
                <div class="hero-list">${heroesHTML}</div>
            </div>
        `;
    }

    selectHero(heroId) {
        console.log('–í—ã–±–æ—Ä –≥–µ—Ä–æ—è:', heroId);
        const hero = this.heroes.find(h => h.id === heroId);
        if (!hero) return;

        const isUnlocked = hero.unlocked === true || hero.id === 1;
        if (!isUnlocked) {
            alert('–≠—Ç–æ—Ç –≥–µ—Ä–æ–π –µ—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
            return;
        }

        this.currentHero = hero;
        this.showScreen('main');
        this.renderHeroScreen();
        this.saveGame();
    }

    showScreen(screenName) {
        this.currentScreen = screenName;
        if (this.healthInterval) {
            clearInterval(this.healthInterval);
            this.healthInterval = null;
        }
    }

    startHealthAnimation() {
        if (!this.currentHero) return;
        this.healthInterval = setInterval(() => {
            const stats = this.calculateHeroStats(this.currentHero);
            const healthPercent = (stats.currentHealth / stats.maxHealth) * 100;
            const healthFill = document.querySelector('.health-bar-fill');
            const currentHealthEl = document.getElementById('current-health');
            const maxHealthEl = document.getElementById('max-health');
            if (healthFill && currentHealthEl && maxHealthEl) {
                healthFill.style.width = healthPercent + '%';
                currentHealthEl.textContent = stats.currentHealth;
                maxHealthEl.textContent = stats.maxHealth;
            }
        }, 1000);
    }

    renderHeroScreen() {
        if (!this.currentHero) return;
        const stats = this.calculateHeroStats(this.currentHero);
        const activeBonuses = this.getBonusesWithSources();
        const bonusesBySource = {
            race: activeBonuses.filter(b => b.source === 'race'),
            class: activeBonuses.filter(b => b.source === 'class'),
            saga: activeBonuses.filter(b => b.source === 'saga'),
            weapon: activeBonuses.filter(b => b.source === 'weapon'),
            armor: activeBonuses.filter(b => b.source === 'armor')
        };

        const weapon = this.currentHero.equipment.main_hand ? this.items.find(item => item.id === this.currentHero.equipment.main_hand) : null;
        const armor = this.currentHero.equipment.chest ? this.items.find(item => item.id === this.currentHero.equipment.chest) : null;
        const nextLevelExp = this.getLevelRequirements()[this.currentHero.level + 1];
        const expProgress = nextLevelExp ? (this.currentHero.experience / nextLevelExp) * 100 : 100;
        const healthPercent = (stats.currentHealth / stats.maxHealth) * 100;

        const container = document.getElementById('app');
        container.innerHTML = `
            <div class="screen active" id="screen-main">
                <div class="action-buttons">
                    <button class="btn-primary" onclick="game.startAdventure()">üé≤ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ</button>
                    <button class="btn-secondary" onclick="game.showInventory()">üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</button>
                    <button class="btn-secondary" onclick="game.showMerchant()">üè™ –ú–∞–≥–∞–∑–∏–Ω</button>
                    <button class="btn-danger" onclick="game.resetHero()">üîÑ –°–±—Ä–æ—Å</button>
                    <button class="btn-secondary" onclick="game.renderHeroSelect()">üîÅ –ì–µ—Ä–æ–∏</button>
                </div>

                <div class="hero-layout">
                    <!-- –ö–æ–ª–æ–Ω–∫–∞ 1: –ì–µ—Ä–æ–π -->
                    <div class="hero-column" style="background-image: url('${this.currentHero.image}')">
                        <div class="column-overlay"></div>
                        <div class="column-content">
                            <div class="column-title">üéØ ${this.currentHero.name}</div>
                            <div class="hero-info">
                                <div class="health-display">
                                    <div class="health-bar-container">
                                        <div class="health-bar">
                                            <div class="health-bar-fill" style="width: ${healthPercent}%"></div>
                                        </div>
                                        <div class="health-text">
                                            ‚ù§Ô∏è <span id="current-health">${stats.currentHealth}</span>/<span id="max-health">${stats.maxHealth}</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="hero-main-stats">
                                    <div class="main-stat"><span class="stat-icon">‚öîÔ∏è</span><span class="stat-value">${stats.damage}</span></div>
                                    <div class="main-stat"><span class="stat-icon">üõ°Ô∏è</span><span class="stat-value">${stats.armor}</span></div>
                                    <div class="main-stat"><span class="stat-icon">üåü</span><span class="stat-value">${stats.power}</span></div>
                                </div>
                                <div class="level-progress"><div class="level-progress-fill" style="width: ${expProgress}%"></div></div>
                                <div class="hero-progress">
                                    <span>–£—Ä.${this.currentHero.level}</span>
                                    <span>üí∞${this.currentHero.gold}</span>
                                    <span>‚ö°${this.currentHero.experience}/${nextLevelExp || 'MAX'}</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- –ö–æ–ª–æ–Ω–∫–∞ 2: –ú–æ–Ω—Å—Ç—Ä -->
                    <div class="monster-column" style="background-image: url('${this.currentMonster ? this.currentMonster.image : 'https://via.placeholder.com/400x600/633/fff?text=No+Monster'}')">
                        <div class="column-overlay"></div>
                        <div class="column-content">
                            <div class="column-title">üé≠ –í—Ä–∞–≥</div>
                            ${this.renderMonsterColumn()}
                        </div>
                    </div>

                    <!-- –ö–æ–ª–æ–Ω–∫–∞ 3: –ö–∞—Ä—Ç–∞ -->
                    <div class="map-column" style="background-image: url('${this.currentMap ? this.currentMap.image : 'https://via.placeholder.com/400x600/363/fff?text=No+Map'}')">
                        <div class="column-overlay"></div>
                        <div class="column-content">
                            <div class="column-title">üó∫Ô∏è –ö–∞—Ä—Ç–∞</div>
                            ${this.renderMapSelection()}
                        </div>
                    </div>

                    <!-- –ö–æ–ª–æ–Ω–∫–∞ 4: –õ–æ–∫–∞—Ü–∏—è -->
                    <div class="location-column" style="background-image: url('${this.currentLocation ? this.currentLocation.image : 'https://via.placeholder.com/400x600/663/fff?text=No+Location'}')">
                        <div class="column-overlay"></div>
                        <div class="column-content">
                            <div class="column-title">üìç –õ–æ–∫–∞—Ü–∏—è</div>
                            ${this.renderLocationSelection()}
                        </div>
                    </div>
                </div>

                <div class="battle-log" id="battle-log"></div>
            </div>
        `;

        this.startHealthAnimation();
    }

    renderMonsterColumn() {
        if (this.battleResult) {
            return this.renderBattleResult();
        }
        
        if (this.currentMonster) {
            const stats = this.calculateHeroStats(this.currentHero);
            const powerComparison = stats.power >= this.currentMonster.power ? '‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–û' : '‚ö†Ô∏è –†–ò–°–ö';

            return `
                <div class="monster-info">
                    <h4>${this.currentMonster.name}</h4>
                    <div class="monster-stats-grid">
                        <div class="monster-stat-card"><div>‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ</div><div class="monster-stat-value">${this.currentMonster.health}</div></div>
                        <div class="monster-stat-card"><div>‚öîÔ∏è –£—Ä–æ–Ω</div><div class="monster-stat-value">${this.currentMonster.damage}</div></div>
                        <div class="monster-stat-card"><div>üõ°Ô∏è –ë—Ä–æ–Ω—è</div><div class="monster-stat-value">${this.currentMonster.armor}</div></div>
                        <div class="monster-stat-card"><div>üåü –ú–æ—â—å</div><div class="monster-stat-value">${this.currentMonster.power}</div></div>
                    </div>
                    <div style="text-align: center; margin: 12px 0;">
                        <p><strong>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:</strong> ${powerComparison}</p>
                        <p>üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${this.currentMonster.reward} –∑–æ–ª–æ—Ç–∞</p>
                    </div>
                    <div class="monster-actions">
                        <button class="btn-primary" onclick="game.startBattle()">‚öîÔ∏è –°—Ä–∞–∂–∞—Ç—å—Å—è</button>
                    </div>
                </div>
            `;
        } else {
            return `
                <div class="monster-info" style="text-align: center; padding: 20px;">
                    <h4>–í—Ä–∞–≥–∞ –Ω–µ—Ç</h4>
                    <p>–ù–∞—á–Ω–∏—Ç–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞</p>
                    <button class="btn-primary" onclick="game.startAdventure()">üé≤ –ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ</button>
                </div>
            `;
        }
    }

    renderBattleResult() {
        if (!this.battleResult) return '';
        const victory = this.battleResult.victory;
        
        if (victory) {
            return `
                <div class="battle-result">
                    <div class="battle-result-image">üéâ</div>
                    <h4>–ü–û–ë–ï–î–ê!</h4>
                    <p>–í—ã –ø–æ–±–µ–¥–∏–ª–∏ ${this.battleResult.monsterName}!</p>
                    <div class="reward-amount">+${this.battleResult.reward} –∑–æ–ª–æ—Ç–∞<br>+${this.battleResult.experience} –æ–ø—ã—Ç–∞</div>
                    <button class="btn-primary" onclick="game.continueAfterBattle()">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
                </div>
            `;
        } else {
            return `
                <div class="battle-result">
                    <div class="battle-result-image">üíÄ</div>
                    <h4>–ü–û–†–ê–ñ–ï–ù–ò–ï</h4>
                    <p>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –±–æ–π —Å ${this.battleResult.monsterName}</p>
                    <button class="btn-primary" onclick="game.continueAfterBattle()">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
                </div>
            `;
        }
    }

    renderMapSelection() {
        if (this.currentMap) {
            return `
                <div class="map-info">
                    <h4>${this.currentMap.name}</h4>
                    <p>${this.currentMap.description}</p>
                    <button class="btn-secondary" onclick="game.showMapSelection()">–°–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É</button>
                </div>
            `;
        } else {
            return `
                <div class="map-info" style="text-align: center;">
                    <h4>–ö–∞—Ä—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞</h4>
                    <button class="btn-primary" onclick="game.showMapSelection()">üó∫Ô∏è –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É</button>
                </div>
            `;
        }
    }

    renderLocationSelection() {
        if (this.currentLocation) {
            const progress = this.locationProgress[this.currentLocation.level];
            const killedCount = progress ? progress.monstersKilled.filter(kills => kills > 0).length : 0;
            
            return `
                <div class="location-info">
                    <h4>${this.currentLocation.name} (–£—Ä. ${this.currentLocation.level})</h4>
                    <p>–ü—Ä–æ–≥—Ä–µ—Å—Å: ${killedCount}/10 –º–æ–Ω—Å—Ç—Ä–æ–≤ —É–±–∏—Ç–æ</p>
                    <button class="btn-secondary" onclick="game.showLocationSelection()">–°–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é</button>
                </div>
            `;
        } else {
            return `
                <div class="location-info" style="text-align: center;">
                    <h4>–õ–æ–∫–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞</h4>
                    <button class="btn-primary" onclick="game.showLocationSelection()">üìç –í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é</button>
                </div>
            `;
        }
    }

    startAdventure() {
        if (!this.currentMap || !this.currentLocation) {
            this.addToLog('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏ –ª–æ–∫–∞—Ü–∏—é');
            return;
        }
        this.addToLog('üöÄ –ù–∞—á–∞—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ');
        setTimeout(() => this.encounterMonster(), 1000);
    }

    startBattle() {
        if (!this.currentMonster || this.battleActive) return;
        this.battleActive = true;
        this.battleRound = 0;
        this.battleLog = [];
        this.battleResult = null;
        this.currentMonster.currentHealth = this.currentMonster.health;
        this.addToLog('‚öîÔ∏è –ù–∞—á–∞–ª–æ –±–æ—è —Å ' + this.currentMonster.name + '!');
        this.renderHeroScreen();
    }

    addBattleLog(entry) {
        this.battleLog.push(entry);
        if (this.battleLog.length > 10) this.battleLog.shift();
    }

    continueAfterBattle() {
        this.battleResult = null;
        this.renderHeroScreen();
    }

    addToLog(message) {
        const log = document.getElementById('battle-log');
        if (log) {
            const entry = document.createElement('div');
            entry.className = 'log-entry';
            entry.textContent = message;
            log.appendChild(entry);
            log.scrollTop = log.scrollHeight;
        }
    }

    showMapSelection() {
        const mapsHTML = this.maps.map(map => `
            <div class="map-option ${map.unlocked ? '' : 'locked'}" onclick="${map.unlocked ? `game.selectMap(${map.id})` : ''}">
                <div class="map-option-image"><img src="${map.image}" alt="${map.name}"></div>
                <div class="map-option-info">
                    <strong>${map.name}</strong>
                    <div>${map.description}</div>
                    <small>–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x${map.multiplier}</small>
                </div>
            </div>
        `).join('');

        const container = document.getElementById('app');
        container.innerHTML = `
            <div class="screen active" id="screen-map-select">
                <h3 class="text-center">üó∫Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É</h3>
                <div class="maps-grid">${mapsHTML}</div>
                <button class="btn-secondary" onclick="game.renderHeroScreen()">‚Üê –ù–∞–∑–∞–¥</button>
            </div>
        `;
    }

    selectMap(mapId) {
        this.currentMap = this.maps.find(m => m.id === mapId);
        this.addToLog(`üó∫Ô∏è –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞: ${this.currentMap.name}`);
        this.renderHeroScreen();
    }

    showLocationSelection() {
        if (!this.currentMap) {
            this.addToLog('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É');
            return;
        }

        const locationsHTML = this.locations.map(location => {
            const progress = this.locationProgress[location.level];
            const isUnlocked = progress ? progress.unlocked : false;
            const killedCount = progress ? progress.monstersKilled.filter(kills => kills > 0).length : 0;

            return `
                <div class="location-option ${isUnlocked ? '' : 'locked'}" onclick="${isUnlocked ? 'game.selectLocation(' + location.level + ')' : ''}">
                    <div class="location-option-image"><img src="${location.image}" alt="${location.name}"></div>
                    <div class="location-option-info">
                        <strong>${location.name} (–£—Ä. ${location.level})</strong>
                        ${isUnlocked ? `<div class="location-progress"><div class="location-progress-fill" style="width: ${(killedCount / 10) * 100}%"></div></div>` : ''}
                    </div>
                </div>
            `;
        }).join('');

        const container = document.getElementById('app');
        container.innerHTML = `
            <div class="screen active" id="screen-location-select">
                <h3 class="text-center">üìç –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</h3>
                <div class="locations-grid">${locationsHTML}</div>
                <button class="btn-secondary" onclick="game.renderHeroScreen()">‚Üê –ù–∞–∑–∞–¥</button>
            </div>
        `;
    }

    selectLocation(level) {
        this.currentLocation = this.locations.find(l => l.level === level);
        this.addToLog('üìç –í—ã–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: ' + this.currentLocation.name);
        this.renderHeroScreen();
    }

    showInventory() {
        if (!this.currentHero) return;
        const container = document.getElementById('app');
        container.innerHTML = `
            <div class="screen active" id="screen-inventory">
                <h3 class="text-center">üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</h3>
                <div class="inventory-grid">${this.currentHero.inventory.length ? '–ü—Ä–µ–¥–º–µ—Ç—ã...' : '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç'}</div>
                <button class="btn-secondary" onclick="game.renderHeroScreen()">‚Üê –ù–∞–∑–∞–¥</button>
            </div>
        `;
    }

    showMerchant() {
        const container = document.getElementById('app');
        container.innerHTML = `
            <div class="screen active" id="screen-merchant">
                <h3 class="text-center">üè™ –ú–∞–≥–∞–∑–∏–Ω</h3>
                <div class="merchant-list">–¢–æ–≤–∞—Ä—ã...</div>
                <button class="btn-secondary" onclick="game.renderHeroScreen()">‚Üê –ù–∞–∑–∞–¥</button>
            </div>
        `;
    }

    resetHero() {
        if (!this.currentHero) return;
        if (!confirm("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≥–µ—Ä–æ—è?")) return;
        
        const baseConfig = {
            race: "human", class: "warrior", saga: "golden_egg", baseHealth: 100, baseDamage: 20, baseArmor: 10,
            gold: 500, level: 1, experience: 0, inventory: [], equipment: { main_hand: null, chest: null }
        };
        
        Object.assign(this.currentHero, baseConfig);
        this.addToLog("üîÑ –ì–µ—Ä–æ–π —Å–±—Ä–æ—à–µ–Ω –∫ –±–∞–∑–æ–≤—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º");
        this.saveGame();
        this.renderHeroScreen();
    }

    saveGame() {
        if (this.currentHero) {
            localStorage.setItem('heroGameSave', JSON.stringify({
                currentHeroId: this.currentHero.id,
                heroes: this.heroes,
                currentMap: this.currentMap,
                currentLocation: this.currentLocation,
                lastHealthUpdate: this.lastHealthUpdate,
                globalInventory: this.globalInventory,
                locationProgress: this.locationProgress,
                showVideo: this.showVideo
            }));
        }
    }

    loadSave() {
        try {
            const save = localStorage.getItem('heroGameSave');
            if (save) {
                const data = JSON.parse(save);
                const savedHeroProgress = data.heroes || [];
                const currentHeroId = data.currentHeroId;
                
                const progressMap = new Map();
                savedHeroProgress.forEach(hero => {
                    progressMap.set(hero.id, {
                        gold: hero.gold, level: hero.level, experience: hero.experience,
                        inventory: hero.inventory, equipment: hero.equipment,
                        currentHealth: hero.currentHealth, unlocked: hero.unlocked
                    });
                });
                
                this.heroes = this.heroes.map(freshHero => {
                    const progress = progressMap.get(freshHero.id);
                    return progress ? { ...freshHero, ...progress } : freshHero;
                });
                
                this.currentMap = data.currentMap || null;
                this.currentLocation = data.currentLocation || null;
                this.lastHealthUpdate = data.lastHealthUpdate || Date.now();
                this.globalInventory = data.globalInventory || [];
                this.locationProgress = data.locationProgress || this.locationProgress;
                this.showVideo = data.showVideo || this.showVideo;
                
                if (currentHeroId) {
                    this.currentHero = this.heroes.find(h => h.id === currentHeroId);
                    if (this.currentHero) this.showScreen('main');
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    }
}

// ========== –ó–ê–ü–£–°–ö –ò–ì–†–´ ==========
console.log('üöÄ Script.js –∑–∞–≥—Ä—É–∂–µ–Ω!');

let game;

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        console.log('‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω');
        game = new HeroGame();
        window.game = game;
    });
} else {
    console.log('‚úÖ DOM —É–∂–µ –≥–æ—Ç–æ–≤');
    game = new HeroGame();
    window.game = game;
}
